<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2001-2003 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Document
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.
-->
<!--This file is an extract of interface definitions from Document Object Model (DOM) Level 2 Core Specification-->
<library>
<exception name="DOMException" id="ID-17189187">
<descr>
<p>DOM operations only raise exceptions in "exceptional" circumstances, i.e., when an operation is impossible to perform (either for logical reasons, because data is lost, or because the implementation has become unstable). In general, DOM methods return specific error values in ordinary processing situations, such as out-of-bound errors when using<code>NodeList</code>.</p>
<p>Implementations should raise other exceptions under other circumstances. For example, implementations should raise an implementation-dependent exception if a<code>null</code>argument is passed.</p>
<p>Some languages and object systems do not support the concept of exceptions. For such systems, error conditions may be indicated using native error reporting mechanisms. For some bindings, for example, methods may return error codes similar to those listed in the corresponding method descriptions.</p>
</descr>
<component id="ID-146F692A" name="code">
<typename>unsigned short</typename>
</component>
</exception>
<group id="ID-258A00AF" name="ExceptionCode">
<descr>
<p>An integer indicating the type of error generated.</p>
<note>
<p>Other numeric codes are reserved for W3C for possible future use.</p>
</note>
</descr>
<constant name="INDEX_SIZE_ERR" type="unsigned short" value="1">
<descr>
<p>If index or size is negative, or greater than the allowed value</p>
</descr>
</constant>
<constant name="DOMSTRING_SIZE_ERR" type="unsigned short" value="2">
<descr>
<p>If the specified range of text does not fit into a DOMString</p>
</descr>
</constant>
<constant name="HIERARCHY_REQUEST_ERR" type="unsigned short" value="3">
<descr>
<p>If any node is inserted somewhere it doesn't belong</p>
</descr>
</constant>
<constant name="WRONG_DOCUMENT_ERR" type="unsigned short" value="4">
<descr>
<p>If a node is used in a different document than the one that created it (that doesn't support it)</p>
</descr>
</constant>
<constant name="INVALID_CHARACTER_ERR" type="unsigned short" value="5">
<descr>
<p>If an invalid or illegal character is specified, such as in a name. Seein the XML specification for the definition of a legal character, andfor the definition of a legal name character.</p>
</descr>
</constant>
<constant name="NO_DATA_ALLOWED_ERR" type="unsigned short" value="6">
<descr>
<p>If data is specified for a node which does not support data</p>
</descr>
</constant>
<constant name="NO_MODIFICATION_ALLOWED_ERR" type="unsigned short" value="7">
<descr>
<p>If an attempt is made to modify an object where modifications are not allowed</p>
</descr>
</constant>
<constant name="NOT_FOUND_ERR" type="unsigned short" value="8">
<descr>
<p>If an attempt is made to reference a node in a context where it does not exist</p>
</descr>
</constant>
<constant name="NOT_SUPPORTED_ERR" type="unsigned short" value="9">
<descr>
<p>If the implementation does not support the requested type of object or operation.</p>
</descr>
</constant>
<constant name="INUSE_ATTRIBUTE_ERR" type="unsigned short" value="10">
<descr>
<p>If an attempt is made to add an attribute that is already in use elsewhere</p>
</descr>
</constant>
<constant name="INVALID_STATE_ERR" type="unsigned short" value="11" since="DOM Level 2">
<descr>
<p>If an attempt is made to use an object that is not, or is no longer, usable.</p>
</descr>
</constant>
<constant name="SYNTAX_ERR" type="unsigned short" value="12" since="DOM Level 2">
<descr>
<p>If an invalid or illegal string is specified.</p>
</descr>
</constant>
<constant name="INVALID_MODIFICATION_ERR" type="unsigned short" value="13" since="DOM Level 2">
<descr>
<p>If an attempt is made to modify the type of the underlying object.</p>
</descr>
</constant>
<constant name="NAMESPACE_ERR" type="unsigned short" value="14" since="DOM Level 2">
<descr>
<p>If an attempt is made to create or change an object in a way which is incorrect with regard to namespaces.</p>
</descr>
</constant>
<constant name="INVALID_ACCESS_ERR" type="unsigned short" value="15" since="DOM Level 2">
<descr>
<p>If a parameter or an operation is not supported by the underlying object.</p>
</descr>
</constant>
</group>
<interface name="DOMImplementation" id="ID-102161490">
<descr>
<p>The<code>DOMImplementation</code>interface provides a number of methods for performing operations that are independent of any particular instance of the document object model.</p>
</descr>
<method name="hasFeature" id="ID-5CED94D7">
<descr>
<p>Test if the DOM implementation implements a specific feature.</p>
</descr>
<parameters>
<param name="feature" type="DOMString" attr="in">
<descr>
<p>The name of the feature to test (case-insensitive). The values used by DOM features are defined throughout the DOM Level 2 specifications and listed in the<specref ref="ID-Conformance"/>section. The name must be an<termref def="dt-XML-name">XML name</termref>. To avoid possible conflicts, as a convention, names referring to features defined outside the DOM specification should be made unique by reversing the name of the Internet domain name of the person (or the organization that the person belongs to) who defines the feature, component by component, and using this as a prefix. For instance, the W3C SVG Working Group defines the feature "org.w3c.dom.svg".</p>
</descr>
</param>
<param name="version" type="DOMString" attr="in">
<descr>
<p>This is the version number of the feature to test. In Level 2, the string can be either "2.0" or "1.0". If the version is not specified, supporting any version of the feature causes the method to return<code>true</code>.</p>
</descr>
</param>
</parameters>
<returns type="boolean">
<descr>
<p>
<code>true</code>if the feature is implemented in the specified version,<code>false</code>otherwise.</p>
</descr>
</returns>
<raises/>
</method>
<method name="createDocumentType" id="Level-2-Core-DOM-createDocType" since="DOM Level 2">
<descr>
<p>Creates an empty<code>DocumentType</code>node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur. It is expected that a future version of the DOM will provide a way for populating a<code>DocumentType</code>.</p>
<p>HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="qualifiedName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-qualifiedname">qualified name</termref>of the document type to be created.</p>
</descr>
</param>
<param name="publicId" type="DOMString" attr="in">
<descr>
<p>The external subset public identifier.</p>
</descr>
</param>
<param name="systemId" type="DOMString" attr="in">
<descr>
<p>The external subset system identifier.</p>
</descr>
</param>
</parameters>
<returns type="DocumentType">
<descr>
<p>A new<code>DocumentType</code>node with<code>Node.ownerDocument</code>set to<code>null</code>.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character.</p>
<p>NAMESPACE_ERR: Raised if the<code>qualifiedName</code>is malformed.</p>
</descr>
</exception>
</raises>
</method>
<method name="createDocument" id="Level-2-Core-DOM-createDocument" since="DOM Level 2">
<descr>
<p>Creates an XML<code>Document</code>object of the specified type with its document element. HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the document element to create.</p>
</descr>
</param>
<param name="qualifiedName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-qualifiedname">qualified name</termref>of the document element to be created.</p>
</descr>
</param>
<param name="doctype" type="DocumentType" attr="in">
<descr>
<p>The type of document to be created or<code>null</code>.</p>
<p>When<code>doctype</code>is not<code>null</code>, its<code>Node.ownerDocument</code>attribute is set to the document being created.</p>
</descr>
</param>
</parameters>
<returns type="Document">
<descr>
<p>A new<code>Document</code>object.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character.</p>
<p>NAMESPACE_ERR: Raised if the<code>qualifiedName</code>is malformed, if the<code>qualifiedName</code>has a prefix and the<code>namespaceURI</code>is<code>null</code>, or if the<code>qualifiedName</code>has a prefix that is "xml" and the<code>namespaceURI</code>is different from ""<bibref ref="Namespaces"/>.</p>
<p>WRONG_DOCUMENT_ERR: Raised if<code>doctype</code>has already been used with a different document or was created from a different implementation.</p>
<p>NOT_SUPPORTED_ERR: May be raised by DOM implementations which do not support the "XML" feature, if they choose not to support this method. Note: Other features introduced in the future, by the DOM WG or in extensions defined by other groups, may also demand support for this method; please consult the definition of the feature to see if it requires this method.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="DocumentFragment" inherits="Node" id="ID-B63ED1A3">
<descr>
<p>
<code>DocumentFragment</code>is a "lightweight" or "minimal"<code>Document</code>object. It is very common to want to be able to extract a portion of a document's tree or to create a new fragment of a document. Imagine implementing a user command like cut or rearranging a document by moving fragments around. It is desirable to have an object which can hold such fragments and it is quite natural to use a Node for this purpose. While it is true that a<code>Document</code>object could fulfill this role, a<code>Document</code>object can potentially be a heavyweight object, depending on the underlying implementation. What is really needed for this is a very lightweight object.<code>DocumentFragment</code>is such an object.</p>
<p>Furthermore, various operations -- such as inserting nodes as children of another<code>Node</code>-- may take<code>DocumentFragment</code>objects as arguments; this results in all the child nodes of the<code>DocumentFragment</code>being moved to the child list of this node.</p>
<p>The children of a<code>DocumentFragment</code>node are zero or more nodes representing the tops of any sub-trees defining the structure of the document.<code>DocumentFragment</code>nodes do not need to be<termref def="dt-well-formed">well-formed XML documents</termref>(although they do need to follow the rules imposed upon well-formed XML parsed entities, which can have multiple top nodes). For example, a<code>DocumentFragment</code>might have only one child and that child node could be a<code>Text</code>node. Such a structure model represents neither an HTML document nor a well-formed XML document.</p>
<p>When a<code>DocumentFragment</code>is inserted into a<code>Document</code>(or indeed any other<code>Node</code>that may take children) the children of the<code>DocumentFragment</code>and not the<code>DocumentFragment</code>itself are inserted into the<code>Node</code>. This makes the<code>DocumentFragment</code>very useful when the user wishes to create nodes that are<termref def="dt-sibling">siblings</termref>; the<code>DocumentFragment</code>acts as the parent of these nodes so that the user can use the standard methods from the<code>Node</code>interface, such as<code>insertBefore</code>and<code>appendChild</code>.</p>
</descr>
</interface>
<interface name="Document" inherits="Node" id="i-Document">
<descr>
<p>The<code>Document</code>interface represents the entire HTML or XML document. Conceptually, it is the<termref def="dt-root-node">root</termref>of the document tree, and provides the primary access to the document's data.</p>
<p>Since elements, text nodes, comments, processing instructions, etc. cannot exist outside the context of a<code>Document</code>, the<code>Document</code>interface also contains the factory methods needed to create these objects. The<code>Node</code>objects created have a<code>ownerDocument</code>attribute which associates them with the<code>Document</code>within whose context they were created.</p>
</descr>
<attribute readonly="yes" name="doctype" type="DocumentType" id="ID-B63ED1A31">
<descr>
<p>The Document Type Declaration (see<code>DocumentType</code>) associated with this document. For HTML documents as well as XML documents without a document type declaration this returns<code>null</code>. The DOM Level 2 does not support editing the Document Type Declaration.<code>docType</code>cannot be altered in any way, including through the use of methods inherited from the<code>Node</code>interface, such as<code>insertNode</code>or<code>removeNode</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" name="implementation" type="DOMImplementation" id="ID-1B793EBA">
<descr>
<p>The<code>DOMImplementation</code>object that handles this document. A DOM application may use objects from multiple implementations.</p>
</descr>
</attribute>
<attribute readonly="yes" name="documentElement" type="Element" id="ID-87CD092">
<descr>
<p>This is a<termref def="dt-convenience">convenience</termref>attribute that allows direct access to the child node that is the root element of the document. For HTML documents, this is the element with the tagName "HTML".</p>
</descr>
</attribute>
<method name="createElement" id="ID-2141741547">
<descr>
<p>Creates an element of the type specified. Note that the instance returned implements the<code>Element</code>interface, so attributes can be specified directly on the returned object.</p>
<p>In addition, if there are known attributes with default values,<code>Attr</code>nodes representing them are automatically created and attached to the element.</p>
<p>To create an element with a qualified name and namespace URI, use the<code>createElementNS</code>method.</p>
</descr>
<parameters>
<param name="tagName" type="DOMString" attr="in">
<descr>
<p>The name of the element type to instantiate. For XML, this is case-sensitive. For HTML, the<code>tagName</code>parameter may be provided in any case, but it must be mapped to the canonical uppercase form by the DOM implementation.</p>
</descr>
</param>
</parameters>
<returns type="Element">
<descr>
<p>A new<code>Element</code>object with the<code>nodeName</code>attribute set to<code>tagName</code>, and<code>localName</code>,<code>prefix</code>, and<code>namespaceURI</code>set to<code>null</code>.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character.</p>
</descr>
</exception>
</raises>
</method>
<method name="createDocumentFragment" id="ID-35CB04B5">
<descr>
<p>Creates an empty<code>DocumentFragment</code>object.</p>
</descr>
<parameters/>
<returns type="DocumentFragment">
<descr>
<p>A new<code>DocumentFragment</code>.</p>
</descr>
</returns>
<raises/>
</method>
<method name="createTextNode" id="ID-1975348127">
<descr>
<p>Creates a<code>Text</code>node given the specified string.</p>
</descr>
<parameters>
<param name="data" type="DOMString" attr="in">
<descr>
<p>The data for the node.</p>
</descr>
</param>
</parameters>
<returns type="Text">
<descr>
<p>The new<code>Text</code>object.</p>
</descr>
</returns>
<raises/>
</method>
<method name="createComment" id="ID-1334481328">
<descr>
<p>Creates a<code>Comment</code>node given the specified string.</p>
</descr>
<parameters>
<param name="data" type="DOMString" attr="in">
<descr>
<p>The data for the node.</p>
</descr>
</param>
</parameters>
<returns type="Comment">
<descr>
<p>The new<code>Comment</code>object.</p>
</descr>
</returns>
<raises/>
</method>
<method name="createCDATASection" id="ID-D26C0AF8">
<descr>
<p>Creates a<code>CDATASection</code>node whose value is the specified string.</p>
</descr>
<parameters>
<param name="data" type="DOMString" attr="in">
<descr>
<p>The data for the<code>CDATASection</code>contents.</p>
</descr>
</param>
</parameters>
<returns type="CDATASection">
<descr>
<p>The new<code>CDATASection</code>object.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</p>
</descr>
</exception>
</raises>
</method>
<method name="createProcessingInstruction" id="ID-135944439">
<descr>
<p>Creates a<code>ProcessingInstruction</code>node given the specified name and data strings.</p>
</descr>
<parameters>
<param name="target" type="DOMString" attr="in">
<descr>
<p>The target part of the processing instruction.</p>
</descr>
</param>
<param name="data" type="DOMString" attr="in">
<descr>
<p>The data for the node.</p>
</descr>
</param>
</parameters>
<returns type="ProcessingInstruction">
<descr>
<p>The new<code>ProcessingInstruction</code>object.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified target contains an illegal character.</p>
<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</p>
</descr>
</exception>
</raises>
</method>
<method name="createAttribute" id="ID-1084891198">
<descr>
<p>Creates an<code>Attr</code>of the given name. Note that the<code>Attr</code>instance can then be set on an<code>Element</code>using the<code>setAttributeNode</code>method.</p>
<p>To create an attribute with a qualified name and namespace URI, use the<code>createAttributeNS</code>method.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The name of the attribute.</p>
</descr>
</param>
</parameters>
<returns type="Attr">
<descr>
<p>A new<code>Attr</code>object with the<code>nodeName</code>attribute set to<code>name</code>, and<code>localName</code>,<code>prefix</code>, and<code>namespaceURI</code>set to<code>null</code>. The value of the attribute is the empty string.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character.</p>
</descr>
</exception>
</raises>
</method>
<method name="createEntityReference" id="ID-392B75AE">
<descr>
<p>Creates an<code>EntityReference</code>object. In addition, if the referenced entity is known, the child list of the<code>EntityReference</code>node is made the same as that of the corresponding<code>Entity</code>node.</p>
<note>
<p>If any descendant of the<code>Entity</code>node has an unbound<termref def="dt-namespaceprefix">namespace prefix</termref>, the corresponding descendant of the created<code>EntityReference</code>node is also unbound; (its<code>namespaceURI</code>is<code>null</code>). The DOM Level 2 does not support any mechanism to resolve namespace prefixes.</p>
</note>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The name of the entity to reference.</p>
</descr>
</param>
</parameters>
<returns type="EntityReference">
<descr>
<p>The new<code>EntityReference</code>object.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character.</p>
<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</p>
</descr>
</exception>
</raises>
</method>
<method name="getElementsByTagName" id="ID-A6C9094">
<descr>
<p>Returns a<code>NodeList</code>of all the<code>Elements</code>with a given tag name in the order in which they are encountered in a preorder traversal of the<code>Document</code>tree.</p>
</descr>
<parameters>
<param name="tagname" type="DOMString" attr="in">
<descr>
<p>The name of the tag to match on. The special value "*" matches all tags.</p>
</descr>
</param>
</parameters>
<returns type="NodeList">
<descr>
<p>A new<code>NodeList</code>object containing all the matched<code>Elements</code>.</p>
</descr>
</returns>
<raises/>
</method>
<method name="importNode" id="Core-Document-importNode" since="DOM Level 2">
<descr>
<p>Imports a node from another document to this document. The returned node has no parent; (<code>parentNode</code>is<code>null</code>). The source node is not altered or removed from the original document; this method creates a new copy of the source node.</p>
<p>For all nodes, importing a node creates a node object owned by the importing document, with attribute values identical to the source node's<code>nodeName</code>and<code>nodeType</code>, plus the attributes related to namespaces (<code>prefix</code>,<code>localName</code>, and<code>namespaceURI</code>). As in the<code>cloneNode</code>operation on a<code>Node</code>, the source node is not altered.</p>
<p>Additional information is copied as appropriate to the<code>nodeType</code>, attempting to mirror the behavior expected if a fragment of XML or HTML source was copied from one document to another, recognizing that the two documents may have different DTDs in the XML case. The following list describes the specifics for each type of node.<glist>
<gitem>
<label>ATTRIBUTE_NODE</label>
<def>
<p>The<code>ownerElement</code>attribute is set to<code>null</code>and the<code>specified</code>flag is set to<code>true</code>on the generated<code>Attr</code>. The<termref def="dt-descendant">descendants</termref>of the source<code>Attr</code>are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</p>
<p>Note that the<code>deep</code>parameter has no effect on<code>Attr</code>nodes; they always carry their children with them when imported.</p>
</def>
</gitem>
<gitem>
<label>DOCUMENT_FRAGMENT_NODE</label>
<def>
<p>If the<code>deep</code>option was set to<code>true</code>, the<termref def="dt-descendant">descendants</termref>of the source element are recursively imported and the resulting nodes reassembled to form the corresponding subtree. Otherwise, this simply generates an empty<code>DocumentFragment</code>.</p>
</def>
</gitem>
<gitem>
<label>DOCUMENT_NODE</label>
<def>
<p>
<code>Document</code>nodes cannot be imported.</p>
</def>
</gitem>
<gitem>
<label>DOCUMENT_TYPE_NODE</label>
<def>
<p>
<code>DocumentType</code>nodes cannot be imported.</p>
</def>
</gitem>
<gitem>
<label>ELEMENT_NODE</label>
<def>
<p>
<emph>Specified</emph>attribute nodes of the source element are imported, and the generated<code>Attr</code>nodes are attached to the generated<code>Element</code>. Default attributes are<emph>not</emph>copied, though if the document being imported into defines default attributes for this element name, those are assigned. If the<code>importNode</code>
<code>deep</code>parameter was set to<code>true</code>, the<termref def="dt-descendant">descendants</termref>of the source element are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</p>
</def>
</gitem>
<gitem>
<label>ENTITY_NODE</label>
<def>
<p>
<code>Entity</code>nodes can be imported, however in the current release of the DOM the<code>DocumentType</code>is readonly. Ability to add these imported nodes to a<code>DocumentType</code>will be considered for addition to a future release of the DOM.</p>
<p>On import, the<code>publicId</code>,<code>systemId</code>, and<code>notationName</code>attributes are copied. If a<code>deep</code>import is requested, the<termref def="dt-descendant">descendants</termref>of the the source<code>Entity</code>are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</p>
</def>
</gitem>
<gitem>
<label>ENTITY_REFERENCE_NODE</label>
<def>
<p>Only the<code>EntityReference</code>itself is copied, even if a<code>deep</code>import is requested, since the source and destination documents might have defined the entity differently. If the document being imported into provides a definition for this entity name, its value is assigned.</p>
</def>
</gitem>
<gitem>
<label>NOTATION_NODE</label>
<def>
<p>
<code>Notation</code>nodes can be imported, however in the current release of the DOM the<code>DocumentType</code>is readonly. Ability to add these imported nodes to a<code>DocumentType</code>will be considered for addition to a future release of the DOM.</p>
<p>On import, the<code>publicId</code>and<code>systemId</code>attributes are copied.</p>
<p>Note that the<code>deep</code>parameter has no effect on<code>Notation</code>nodes since they never have any children.</p>
</def>
</gitem>
<gitem>
<label>PROCESSING_INSTRUCTION_NODE</label>
<def>
<p>The imported node copies its<code>target</code>and<code>data</code>values from those of the source node.</p>
</def>
</gitem>
<gitem>
<label>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</label>
<def>
<p>These three types of nodes inheriting from<code>CharacterData</code>copy their<code>data</code>and<code>length</code>attributes from those of the source node.</p>
</def>
</gitem>
</glist>
</p>
</descr>
<parameters>
<param name="importedNode" type="Node" attr="in">
<descr>
<p>The node to import.</p>
</descr>
</param>
<param name="deep" type="boolean" attr="in">
<descr>
<p>If<code>true</code>, recursively import the subtree under the specified node; if<code>false</code>, import only the node itself, as explained above. This has no effect on<code>Attr</code>,<code>EntityReference</code>, and<code>Notation</code>nodes.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The imported node that belongs to this<code>Document</code>.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported.</p>
</descr>
</exception>
</raises>
</method>
<method name="createElementNS" id="ID-DocCrElNS" since="DOM Level 2">
<descr>
<p>Creates an element of the given qualified name and namespace URI. HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the element to create.</p>
</descr>
</param>
<param name="qualifiedName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-qualifiedname">qualified name</termref>of the element type to instantiate.</p>
</descr>
</param>
</parameters>
<returns type="Element">
<descr>
<p>A new<code>Element</code>object with the following attributes:</p>
<table summary="Layout table: the first cell the name property,                         the second cell contains his initial value">
<tbody>
<tr>
<th rowspan="1" colspan="1">Attribute</th>
<th rowspan="1" colspan="1">Value</th>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.nodeName</code>
</td>
<td rowspan="1" colspan="1">
<code>qualifiedName</code>
</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.namespaceURI</code>
</td>
<td rowspan="1" colspan="1">
<code>namespaceURI</code>
</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.prefix</code>
</td>
<td rowspan="1" colspan="1">prefix, extracted from<code>qualifiedName</code>, or<code>null</code>if there is no prefix</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.localName</code>
</td>
<td rowspan="1" colspan="1">
<termref def="dt-localname">local name</termref>, extracted from<code>qualifiedName</code>
</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Element.tagName</code>
</td>
<td rowspan="1" colspan="1">
<code>qualifiedName</code>
</td>
</tr>
</tbody>
</table>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character.</p>
<p>NAMESPACE_ERR: Raised if the<code>qualifiedName</code>is malformed, if the<code>qualifiedName</code>has a prefix and the<code>namespaceURI</code>is<code>null</code>, or if the<code>qualifiedName</code>has a prefix that is "xml" and the<code>namespaceURI</code>is different from ""<bibref ref="Namespaces"/>.</p>
</descr>
</exception>
</raises>
</method>
<method name="createAttributeNS" id="ID-DocCrAttrNS" since="DOM Level 2">
<descr>
<p>Creates an attribute of the given qualified name and namespace URI. HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the attribute to create.</p>
</descr>
</param>
<param name="qualifiedName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-qualifiedname">qualified name</termref>of the attribute to instantiate.</p>
</descr>
</param>
</parameters>
<returns type="Attr">
<descr>
<p>A new<code>Attr</code>object with the following attributes:</p>
<table summary="Layout table: the first cell the name property,                         the second cell contains his initial value">
<tbody>
<tr>
<th rowspan="1" colspan="1">Attribute</th>
<th rowspan="1" colspan="1">Value</th>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.nodeName</code>
</td>
<td rowspan="1" colspan="1">qualifiedName</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.namespaceURI</code>
</td>
<td rowspan="1" colspan="1">
<code>namespaceURI</code>
</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.prefix</code>
</td>
<td rowspan="1" colspan="1">prefix, extracted from<code>qualifiedName</code>, or<code>null</code>if there is no prefix</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.localName</code>
</td>
<td rowspan="1" colspan="1">
<termref def="dt-localname">local name</termref>, extracted from<code>qualifiedName</code>
</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Attr.name</code>
</td>
<td rowspan="1" colspan="1">
<code>qualifiedName</code>
</td>
</tr>
<tr>
<td rowspan="1" colspan="1">
<code>Node.nodeValue</code>
</td>
<td rowspan="1" colspan="1">the empty string</td>
</tr>
</tbody>
</table>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character.</p>
<p>NAMESPACE_ERR: Raised if the<code>qualifiedName</code>is malformed, if the<code>qualifiedName</code>has a prefix and the<code>namespaceURI</code>is<code>null</code>, if the<code>qualifiedName</code>has a prefix that is "xml" and the<code>namespaceURI</code>is different from "", or if the<code>qualifiedName</code>is "xmlns" and the<code>namespaceURI</code>is different from "".</p>
</descr>
</exception>
</raises>
</method>
<method name="getElementsByTagNameNS" id="ID-getElBTNNS" since="DOM Level 2">
<descr>
<p>Returns a<code>NodeList</code>of all the<code>Elements</code>with a given<termref def="dt-localname">local name</termref>and namespace URI in the order in which they are encountered in a preorder traversal of the<code>Document</code>tree.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the elements to match on. The special value "*" matches all namespaces.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the elements to match on. The special value "*" matches all local names.</p>
</descr>
</param>
</parameters>
<returns type="NodeList">
<descr>
<p>A new<code>NodeList</code>object containing all the matched<code>Elements</code>.</p>
</descr>
</returns>
<raises/>
</method>
<method name="getElementById" id="ID-getElBId" since="DOM Level 2">
<descr>
<p>Returns the<code>Element</code>whose<code>ID</code>is given by<code>elementId</code>. If no such element exists, returns<code>null</code>. Behavior is not defined if more than one element has this<code>ID</code>.<note>
<p>The DOM implementation must have information that says which attributes are of type ID. Attributes with the name "ID" are not of type ID unless so defined. Implementations that do not know whether attributes are of type ID or not are expected to return<code>null</code>.</p>
</note>
</p>
</descr>
<parameters>
<param name="elementId" type="DOMString" attr="in">
<descr>
<p>The unique<code>id</code>value for an element.</p>
</descr>
</param>
</parameters>
<returns type="Element">
<descr>
<p>The matching element.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="Node" id="ID-1950641247">
<descr>
<p>The<code>Node</code>interface is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects implementing the<code>Node</code>interface expose methods for dealing with children, not all objects implementing the<code>Node</code>interface may have children. For example,<code>Text</code>nodes may not have children, and adding children to such nodes results in a<code>DOMException</code>being raised.</p>
<p>The attributes<code>nodeName</code>,<code>nodeValue</code>and<code>attributes</code>are included as a mechanism to get at node information without casting down to the specific derived interface. In cases where there is no obvious mapping of these attributes for a specific<code>nodeType</code>(e.g.,<code>nodeValue</code>for an<code>Element</code>or<code>attributes</code>for a<code>Comment</code>), this returns<code>null</code>. Note that the specialized interfaces may contain additional and more convenient mechanisms to get and set the relevant information.</p>
</descr>
<group id="ID-1841493061" name="NodeType">
<descr>
<p>An integer indicating which type of node this is.</p>
<note>
<p>Numeric codes up to 200 are reserved to W3C for possible future use.</p>
</note>
</descr>
<constant name="ELEMENT_NODE" type="unsigned short" value="1">
<descr>
<p>The node is an<code>Element</code>.</p>
</descr>
</constant>
<constant name="ATTRIBUTE_NODE" type="unsigned short" value="2">
<descr>
<p>The node is an<code>Attr</code>.</p>
</descr>
</constant>
<constant name="TEXT_NODE" type="unsigned short" value="3">
<descr>
<p>The node is a<code>Text</code>node.</p>
</descr>
</constant>
<constant name="CDATA_SECTION_NODE" type="unsigned short" value="4">
<descr>
<p>The node is a<code>CDATASection</code>.</p>
</descr>
</constant>
<constant name="ENTITY_REFERENCE_NODE" type="unsigned short" value="5">
<descr>
<p>The node is an<code>EntityReference</code>.</p>
</descr>
</constant>
<constant name="ENTITY_NODE" type="unsigned short" value="6">
<descr>
<p>The node is an<code>Entity</code>.</p>
</descr>
</constant>
<constant name="PROCESSING_INSTRUCTION_NODE" type="unsigned short" value="7">
<descr>
<p>The node is a<code>ProcessingInstruction</code>.</p>
</descr>
</constant>
<constant name="COMMENT_NODE" type="unsigned short" value="8">
<descr>
<p>The node is a<code>Comment</code>.</p>
</descr>
</constant>
<constant name="DOCUMENT_NODE" type="unsigned short" value="9">
<descr>
<p>The node is a<code>Document</code>.</p>
</descr>
</constant>
<constant name="DOCUMENT_TYPE_NODE" type="unsigned short" value="10">
<descr>
<p>The node is a<code>DocumentType</code>.</p>
</descr>
</constant>
<constant name="DOCUMENT_FRAGMENT_NODE" type="unsigned short" value="11">
<descr>
<p>The node is a<code>DocumentFragment</code>.</p>
</descr>
</constant>
<constant name="NOTATION_NODE" type="unsigned short" value="12">
<descr>
<p>The node is a<code>Notation</code>.</p>
</descr>
</constant>
</group>
<p>The values of<code>nodeName</code>,<code>nodeValue</code>, and<code>attributes</code>vary according to the node type as follows:<table summary="Layout table:                   the first cell contains the name of the interface,                   the second contains the value of the nodeName attribute for this interface,                   the third contains the value of the nodeValue attribute for this interface and                   the fourth contains the value of the attributes attribute for this interface" border="1">
<tbody>
<tr>
<th rowspan="1" colspan="1">Interface</th>
<th rowspan="1" colspan="1">nodeName</th>
<th rowspan="1" colspan="1">nodeValue</th>
<th rowspan="1" colspan="1">attributes</th>
</tr>
<tr>
<td rowspan="1" colspan="1">Attr</td>
<td rowspan="1" colspan="1">name of attribute</td>
<td rowspan="1" colspan="1">value of attribute</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">CDATASection</td>
<td rowspan="1" colspan="1">#cdata-section</td>
<td rowspan="1" colspan="1">content of the CDATA Section</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">Comment</td>
<td rowspan="1" colspan="1">#comment</td>
<td rowspan="1" colspan="1">content of the comment</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">Document</td>
<td rowspan="1" colspan="1">#document</td>
<td rowspan="1" colspan="1">null</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">DocumentFragment</td>
<td rowspan="1" colspan="1">#document-fragment</td>
<td rowspan="1" colspan="1">null</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">DocumentType</td>
<td rowspan="1" colspan="1">document type name</td>
<td rowspan="1" colspan="1">null</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">Element</td>
<td rowspan="1" colspan="1">tag name</td>
<td rowspan="1" colspan="1">null</td>
<td rowspan="1" colspan="1">NamedNodeMap</td>
</tr>
<tr>
<td rowspan="1" colspan="1">Entity</td>
<td rowspan="1" colspan="1">entity name</td>
<td rowspan="1" colspan="1">null</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">EntityReference</td>
<td rowspan="1" colspan="1">name of entity referenced</td>
<td rowspan="1" colspan="1">null</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">Notation</td>
<td rowspan="1" colspan="1">notation name</td>
<td rowspan="1" colspan="1">null</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">ProcessingInstruction</td>
<td rowspan="1" colspan="1">target</td>
<td rowspan="1" colspan="1">entire content excluding the target</td>
<td rowspan="1" colspan="1">null</td>
</tr>
<tr>
<td rowspan="1" colspan="1">Text</td>
<td rowspan="1" colspan="1">#text</td>
<td rowspan="1" colspan="1">content of the text node</td>
<td rowspan="1" colspan="1">null</td>
</tr>
</tbody>
</table>
</p>
<attribute type="DOMString" readonly="yes" name="nodeName" id="ID-F68D095">
<descr>
<p>The name of this node, depending on its type; see the table above.</p>
</descr>
</attribute>
<attribute type="DOMString" name="nodeValue" id="ID-F68D080" readonly="no">
<descr>
<p>The value of this node, depending on its type; see the table above. When it is defined to be<code>null</code>, setting it has no effect.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.</p>
</descr>
</exception>
</setraises>
<getraises>
<exception name="DOMException">
<descr>
<p>DOMSTRING_SIZE_ERR: Raised when it would return more characters than fit in a<code>DOMString</code>variable on the implementation platform.</p>
</descr>
</exception>
</getraises>
</attribute>
<attribute type="unsigned short" name="nodeType" readonly="yes" id="ID-111237558">
<descr>
<p>A code representing the type of the underlying object, as defined above.</p>
</descr>
</attribute>
<attribute type="Node" readonly="yes" name="parentNode" id="ID-1060184317">
<descr>
<p>The<termref def="dt-parent">parent</termref>of this node. All nodes, except<code>Attr</code>,<code>Document</code>,<code>DocumentFragment</code>,<code>Entity</code>, and<code>Notation</code>may have a parent. However, if a node has just been created and not yet added to the tree, or if it has been removed from the tree, this is<code>null</code>.</p>
</descr>
</attribute>
<attribute type="NodeList" readonly="yes" name="childNodes" id="ID-1451460987">
<descr>
<p>A<code>NodeList</code>that contains all children of this node. If there are no children, this is a<code>NodeList</code>containing no nodes.</p>
</descr>
</attribute>
<attribute readonly="yes" type="Node" name="firstChild" id="ID-169727388">
<descr>
<p>The first child of this node. If there is no such node, this returns<code>null</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" type="Node" name="lastChild" id="ID-61AD09FB">
<descr>
<p>The last child of this node. If there is no such node, this returns<code>null</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" type="Node" name="previousSibling" id="ID-640FB3C8">
<descr>
<p>The node immediately preceding this node. If there is no such node, this returns<code>null</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" type="Node" name="nextSibling" id="ID-6AC54C2F">
<descr>
<p>The node immediately following this node. If there is no such node, this returns<code>null</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" type="NamedNodeMap" name="attributes" id="ID-84CF096">
<descr>
<p>A<code>NamedNodeMap</code>containing the attributes of this node (if it is an<code>Element</code>) or<code>null</code>otherwise.</p>
</descr>
</attribute>
<attribute readonly="yes" type="Document" name="ownerDocument" id="node-ownerDoc" version="DOM Level 2">
<descr>
<p>The<code>Document</code>object associated with this node. This is also the<code>Document</code>object used to create new nodes. When this node is a<code>Document</code>or a<code>DocumentType</code>which is not used with any<code>Document</code>yet, this is<code>null</code>.</p>
</descr>
</attribute>
<method name="insertBefore" id="ID-952280727">
<descr>
<p>Inserts the node<code>newChild</code>before the existing child node<code>refChild</code>. If<code>refChild</code>is<code>null</code>, insert<code>newChild</code>at the end of the list of children.</p>
<p>If<code>newChild</code>is a<code>DocumentFragment</code>object, all of its children are inserted, in the same order, before<code>refChild</code>. If the<code>newChild</code>is already in the tree, it is first removed.</p>
</descr>
<parameters>
<param name="newChild" type="Node" attr="in">
<descr>
<p>The node to insert.</p>
</descr>
</param>
<param name="refChild" type="Node" attr="in">
<descr>
<p>The reference node, i.e., the node before which the new node must be inserted.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node being inserted.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the type of the<code>newChild</code>node, or if the node to insert is one of this node's<termref def="dt-ancestor">ancestors</termref>.</p>
<p>WRONG_DOCUMENT_ERR: Raised if<code>newChild</code>was created from a different document than the one that created this node.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or if the parent of the node being inserted is readonly.</p>
<p>NOT_FOUND_ERR: Raised if<code>refChild</code>is not a child of this node.</p>
</descr>
</exception>
</raises>
</method>
<method name="replaceChild" id="ID-785887307">
<descr>
<p>Replaces the child node<code>oldChild</code>with<code>newChild</code>in the list of children, and returns the<code>oldChild</code>node.</p>
<p>If<code>newChild</code>is a<code>DocumentFragment</code>object,<code>oldChild</code>is replaced by all of the<code>DocumentFragment</code>children, which are inserted in the same order. If the<code>newChild</code>is already in the tree, it is first removed.</p>
</descr>
<parameters>
<param name="newChild" type="Node" attr="in">
<descr>
<p>The new node to put in the child list.</p>
</descr>
</param>
<param name="oldChild" type="Node" attr="in">
<descr>
<p>The node being replaced in the list.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node replaced.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the type of the<code>newChild</code>node, or if the node to put in is one of this node's<termref def="dt-ancestor">ancestors</termref>.</p>
<p>WRONG_DOCUMENT_ERR: Raised if<code>newChild</code>was created from a different document than the one that created this node.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node or the parent of the new node is readonly.</p>
<p>NOT_FOUND_ERR: Raised if<code>oldChild</code>is not a child of this node.</p>
</descr>
</exception>
</raises>
</method>
<method name="removeChild" id="ID-1734834066">
<descr>
<p>Removes the child node indicated by<code>oldChild</code>from the list of children, and returns it.</p>
</descr>
<parameters>
<param name="oldChild" type="Node" attr="in">
<descr>
<p>The node being removed.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node removed.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
<p>NOT_FOUND_ERR: Raised if<code>oldChild</code>is not a child of this node.</p>
</descr>
</exception>
</raises>
</method>
<method name="appendChild" id="ID-184E7107">
<descr>
<p>Adds the node<code>newChild</code>to the end of the list of children of this node. If the<code>newChild</code>is already in the tree, it is first removed.</p>
</descr>
<parameters>
<param name="newChild" type="Node" attr="in">
<descr>
<p>The node to add.</p>
<p>If it is a<code>DocumentFragment</code>object, the entire contents of the document fragment are moved into the child list of this node</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node added.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the type of the<code>newChild</code>node, or if the node to append is one of this node's<termref def="dt-ancestor">ancestors</termref>.</p>
<p>WRONG_DOCUMENT_ERR: Raised if<code>newChild</code>was created from a different document than the one that created this node.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="hasChildNodes" id="ID-810594187">
<descr>
<p>Returns whether this node has any children.</p>
</descr>
<parameters/>
<returns type="boolean">
<descr>
<p>
<code>true</code>if this node has any children,<code>false</code>otherwise.</p>
</descr>
</returns>
<raises/>
</method>
<method name="cloneNode" id="ID-3A0ED0A4">
<descr>
<p>Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes. The duplicate node has no parent; (<code>parentNode</code>is<code>null</code>.).</p>
<p>Cloning an<code>Element</code>copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes, but this method does not copy any text it contains unless it is a deep clone, since the text is contained in a child<code>Text</code>node. Cloning an<code>Attribute</code>directly, as opposed to be cloned as part of an<code>Element</code>cloning operation, returns a specified attribute (<code>specified</code>is<code>true</code>). Cloning any other type of node simply returns a copy of this node.</p>
<p>Note that cloning an immutable subtree results in a mutable copy, but the children of an<code>EntityReference</code>clone are<termref def="dt-readonly-node">readonly</termref>. In addition, clones of unspecified<code>Attr</code>nodes are specified. And, cloning<code>Document</code>,<code>DocumentType</code>,<code>Entity</code>, and<code>Notation</code>nodes is implementation dependent.</p>
</descr>
<parameters>
<param name="deep" type="boolean" attr="in">
<descr>
<p>If<code>true</code>, recursively clone the subtree under the specified node; if<code>false</code>, clone only the node itself (and its attributes, if it is an<code>Element</code>).</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The duplicate node.</p>
</descr>
</returns>
<raises/>
</method>
<method id="ID-normalize" name="normalize" version="DOM Level 2">
<descr>
<p>Puts all<code>Text</code>nodes in the full depth of the sub-tree underneath this<code>Node</code>, including attribute nodes, into a "normal" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates<code>Text</code>nodes, i.e., there are neither adjacent<code>Text</code>nodes nor empty<code>Text</code>nodes. This can be used to ensure that the DOM view of a document is the same as if it were saved and re-loaded, and is useful when operations (such as XPointer<bibref ref="XPointer"/>lookups) that depend on a particular document tree structure are to be used.</p>
<note>
<p>In cases where the document contains<code>CDATASections</code>, the normalize operation alone may not be sufficient, since XPointers do not differentiate between<code>Text</code>nodes and<code>CDATASection</code>nodes.</p>
</note>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="isSupported" id="Level-2-Core-Node-supports" since="DOM Level 2">
<descr>
<p>Tests whether the DOM implementation implements a specific feature and that feature is supported by this node.</p>
</descr>
<parameters>
<param name="feature" type="DOMString" attr="in">
<descr>
<p>The name of the feature to test. This is the same name which can be passed to the method<code>hasFeature</code>on<code>DOMImplementation</code>.</p>
</descr>
</param>
<param name="version" type="DOMString" attr="in">
<descr>
<p>This is the version number of the feature to test. In Level 2, version 1, this is the string "2.0". If the version is not specified, supporting any version of the feature will cause the method to return<code>true</code>.</p>
</descr>
</param>
</parameters>
<returns type="boolean">
<descr>
<p>Returns<code>true</code>if the specified feature is supported on this node,<code>false</code>otherwise.</p>
</descr>
</returns>
<raises/>
</method>
<attribute readonly="yes" type="DOMString" name="namespaceURI" id="ID-NodeNSname" since="DOM Level 2">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of this node, or<code>null</code>if it is unspecified.</p>
<p>This is not a computed value that is the result of a namespace lookup based on an examination of the namespace declarations in scope. It is merely the namespace URI given at creation time.</p>
<p>For nodes of any type other than<code>ELEMENT_NODE</code>and<code>ATTRIBUTE_NODE</code>and nodes created with a DOM Level 1 method, such as<code>createElement</code>from the<code>Document</code>interface, this is always<code>null</code>.</p>
<note>
<p>Per the<emph>Namespaces in XML</emph>Specification<bibref ref="Namespaces"/>an attribute does not inherit its namespace from the element it is attached to. If an attribute is not explicitly given a namespace, it simply has no namespace.</p>
</note>
</descr>
</attribute>
<attribute type="DOMString" name="prefix" id="ID-NodeNSPrefix" since="DOM Level 2" readonly="no">
<descr>
<p>The<termref def="dt-namespaceprefix">namespace prefix</termref>of this node, or<code>null</code>if it is unspecified.</p>
<p>Note that setting this attribute, when permitted, changes the<code>nodeName</code>attribute, which holds the<termref def="dt-qualifiedname">qualified name</termref>, as well as the<code>tagName</code>and<code>name</code>attributes of the<code>Element</code>and<code>Attr</code>interfaces, when applicable.</p>
<p>Note also that changing the prefix of an attribute that is known to have a default value, does not make a new attribute with the default value and the original prefix appear, since the<code>namespaceURI</code>and<code>localName</code>do not change.</p>
<p>For nodes of any type other than<code>ELEMENT_NODE</code>and<code>ATTRIBUTE_NODE</code>and nodes created with a DOM Level 1 method, such as<code>createElement</code>from the<code>Document</code>interface, this is always<code>null</code>.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified prefix contains an illegal character.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
<p>NAMESPACE_ERR: Raised if the specified<code>prefix</code>is malformed, if the<code>namespaceURI</code>of this node is<code>null</code>, if the specified prefix is "xml" and the<code>namespaceURI</code>of this node is different from "", if this node is an attribute and the specified prefix is "xmlns" and the<code>namespaceURI</code>of this node is different from "", or if this node is an attribute and the<code>qualifiedName</code>of this node is "xmlns"<bibref ref="Namespaces"/>.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute readonly="yes" type="DOMString" name="localName" id="ID-NodeNSLocalN" since="DOM Level 2">
<descr>
<p>Returns the local part of the<termref def="dt-qualifiedname">qualified name</termref>of this node.</p>
<p>For nodes of any type other than<code>ELEMENT_NODE</code>and<code>ATTRIBUTE_NODE</code>and nodes created with a DOM Level 1 method, such as<code>createElement</code>from the<code>Document</code>interface, this is always<code>null</code>.</p>
</descr>
</attribute>
<method name="hasAttributes" id="ID-NodeHasAttrs" since="DOM Level 2">
<descr>
<p>Returns whether this node (if it is an element) has any attributes.</p>
</descr>
<parameters/>
<returns type="boolean">
<descr>
<p>
<code>true</code>if this node has any attributes,<code>false</code>otherwise.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="NodeList" id="ID-536297177">
<descr>
<p>The<code>NodeList</code>interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented.<code>NodeList</code>objects in the DOM are<termref def="td-live">live</termref>.</p>
<p>The items in the<code>NodeList</code>are accessible via an integral index, starting from 0.</p>
</descr>
<method name="item" id="ID-844377136">
<descr>
<p>Returns the<code>index</code>th item in the collection. If<code>index</code>is greater than or equal to the number of nodes in the list, this returns<code>null</code>.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>Index into the collection.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node at the<code>index</code>th position in the<code>NodeList</code>, or<code>null</code>if that is not a valid index.</p>
</descr>
</returns>
<raises/>
</method>
<attribute type="unsigned long" readonly="yes" name="length" id="ID-203510337">
<descr>
<p>The number of nodes in the list. The range of valid child node indices is 0 to<code>length-1</code>inclusive.</p>
</descr>
</attribute>
</interface>
<interface name="NamedNodeMap" id="ID-1780488922">
<descr>
<p>Objects implementing the<code>NamedNodeMap</code>interface are used to represent collections of nodes that can be accessed by name. Note that<code>NamedNodeMap</code>does not inherit from<code>NodeList</code>;<code>NamedNodeMaps</code>are not maintained in any particular order. Objects contained in an object implementing<code>NamedNodeMap</code>may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a<code>NamedNodeMap</code>, and does not imply that the DOM specifies an order to these Nodes.</p>
<p>
<code>NamedNodeMap</code>objects in the DOM are<termref def="td-live">live</termref>.</p>
</descr>
<method name="getNamedItem" id="ID-1074577549">
<descr>
<p>Retrieves a node specified by name.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The<code>nodeName</code>of a node to retrieve.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>A<code>Node</code>(of any type) with the specified<code>nodeName</code>, or<code>null</code>if it does not identify any node in this map.</p>
</descr>
</returns>
<raises/>
</method>
<method name="setNamedItem" id="ID-1025163788">
<descr>
<p>Adds a node using its<code>nodeName</code>attribute. If a node with that name is already present in this map, it is replaced by the new one.</p>
<p>As the<code>nodeName</code>attribute is used to derive the name which the node must be stored under, multiple nodes of certain types (those that have a "special" string value) cannot be stored as the names would clash. This is seen as preferable to allowing nodes to be aliased.</p>
</descr>
<parameters>
<param name="arg" type="Node" attr="in">
<descr>
<p>A node to store in this map. The node will later be accessible using the value of its<code>nodeName</code>attribute.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>If the new<code>Node</code>replaces an existing node the replaced<code>Node</code>is returned, otherwise<code>null</code>is returned.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>WRONG_DOCUMENT_ERR: Raised if<code>arg</code>was created from a different document than the one that created this map.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
<p>INUSE_ATTRIBUTE_ERR: Raised if<code>arg</code>is an<code>Attr</code>that is already an attribute of another<code>Element</code>object. The DOM user must explicitly clone<code>Attr</code>nodes to re-use them in other elements.</p>
<p>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node doesn't belong in this NamedNodeMap. Examples would include trying to insert something other than an Attr node into an Element's map of attributes, or a non-Entity node into the DocumentType's map of Entities</p>
</descr>
</exception>
</raises>
</method>
<method name="removeNamedItem" id="ID-D58B193">
<descr>
<p>Removes a node specified by name. When this map contains the attributes attached to an element, if the removed attribute is known to have a default value, an attribute immediately appears containing the default value as well as the corresponding namespace URI, local name, and prefix when applicable.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The<code>nodeName</code>of the node to remove.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node removed from this map if a node with such a name exists.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_FOUND_ERR: Raised if there is no node named<code>name</code>in this map.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="item" id="ID-349467F9">
<descr>
<p>Returns the<code>index</code>th item in the map. If<code>index</code>is greater than or equal to the number of nodes in this map, this returns<code>null</code>.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>Index into this map.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node at the<code>index</code>th position in the map, or<code>null</code>if that is not a valid index.</p>
</descr>
</returns>
<raises/>
</method>
<attribute type="unsigned long" readonly="yes" name="length" id="ID-6D0FB19E">
<descr>
<p>The number of nodes in this map. The range of valid child node indices is<code>0</code>to<code>length-1</code>inclusive.</p>
</descr>
</attribute>
<method name="getNamedItemNS" id="ID-getNamedItemNS" since="DOM Level 2">
<descr>
<p>Retrieves a node specified by local name and namespace URI. HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the node to retrieve.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the node to retrieve.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>A<code>Node</code>(of any type) with the specified local name and namespace URI, or<code>null</code>if they do not identify any node in this map.</p>
</descr>
</returns>
<raises/>
</method>
<method name="setNamedItemNS" id="ID-setNamedItemNS" since="DOM Level 2">
<descr>
<p>Adds a node using its<code>namespaceURI</code>and<code>localName</code>. If a node with that namespace URI and that local name is already present in this map, it is replaced by the new one.</p>
<p>HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="arg" type="Node" attr="in">
<descr>
<p>A node to store in this map. The node will later be accessible using the value of its<code>namespaceURI</code>and<code>localName</code>attributes.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>If the new<code>Node</code>replaces an existing node the replaced<code>Node</code>is returned, otherwise<code>null</code>is returned.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>WRONG_DOCUMENT_ERR: Raised if<code>arg</code>was created from a different document than the one that created this map.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
<p>INUSE_ATTRIBUTE_ERR: Raised if<code>arg</code>is an<code>Attr</code>that is already an attribute of another<code>Element</code>object. The DOM user must explicitly clone<code>Attr</code>nodes to re-use them in other elements.</p>
<p>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node doesn't belong in this NamedNodeMap. Examples would include trying to insert something other than an Attr node into an Element's map of attributes, or a non-Entity node into the DocumentType's map of Entities</p>
</descr>
</exception>
</raises>
</method>
<method name="removeNamedItemNS" id="ID-removeNamedItemNS" since="DOM Level 2">
<descr>
<p>Removes a node specified by local name and namespace URI. A removed attribute may be known to have a default value when this map contains the attributes attached to an element, as returned by the attributes attribute of the<code>Node</code>interface. If so, an attribute immediately appears containing the default value as well as the corresponding namespace URI, local name, and prefix when applicable.</p>
<p>HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the node to remove.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the node to remove.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The node removed from this map if a node with such a local name and namespace URI exists.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_FOUND_ERR: Raised if there is no node with the specified<code>namespaceURI</code>and<code>localName</code>in this map.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="CharacterData" inherits="Node" id="ID-FF21A306">
<descr>
<p>The<code>CharacterData</code>interface extends Node with a set of attributes and methods for accessing character data in the DOM. For clarity this set is defined here rather than on each object that uses these attributes and methods. No DOM objects correspond directly to<code>CharacterData</code>, though<code>Text</code>and others do inherit the interface from it. All<code>offsets</code>in this interface start from<code>0</code>.</p>
<p>As explained in the<code>DOMString</code>interface, text strings in the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In the following, the term<termref def="dt-16-bit-unit">16-bit units</termref>is used whenever necessary to indicate that indexing on CharacterData is done in 16-bit units.</p>
</descr>
<attribute type="DOMString" name="data" id="ID-72AB8359" readonly="no">
<descr>
<p>The character data of the node that implements this interface. The DOM implementation may not put arbitrary limits on the amount of data that may be stored in a<code>CharacterData</code>node. However, implementation limits may mean that the entirety of a node's data may not fit into a single<code>DOMString</code>. In such cases, the user may call<code>substringData</code>to retrieve the data in appropriately sized pieces.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.</p>
</descr>
</exception>
</setraises>
<getraises>
<exception name="DOMException">
<descr>
<p>DOMSTRING_SIZE_ERR: Raised when it would return more characters than fit in a<code>DOMString</code>variable on the implementation platform.</p>
</descr>
</exception>
</getraises>
</attribute>
<attribute type="unsigned long" name="length" readonly="yes" id="ID-7D61178C">
<descr>
<p>The number of<termref def="dt-16-bit-unit">16-bit units</termref>that are available through<code>data</code>and the<code>substringData</code>method below. This may have the value zero, i.e.,<code>CharacterData</code>nodes may be empty.</p>
</descr>
</attribute>
<method name="substringData" id="ID-6531BCCF">
<descr>
<p>Extracts a range of data from the node.</p>
</descr>
<parameters>
<param name="offset" type="unsigned long" attr="in">
<descr>
<p>Start offset of substring to extract.</p>
</descr>
</param>
<param name="count" type="unsigned long" attr="in">
<descr>
<p>The number of 16-bit units to extract.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>The specified substring. If the sum of<code>offset</code>and<code>count</code>exceeds the<code>length</code>, then all 16-bit units to the end of the data are returned.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified<code>offset</code>is negative or greater than the number of 16-bit units in<code>data</code>, or if the specified<code>count</code>is negative.</p>
<p>DOMSTRING_SIZE_ERR: Raised if the specified range of text does not fit into a<code>DOMString</code>.</p>
</descr>
</exception>
</raises>
</method>
<method name="appendData" id="ID-32791A2F">
<descr>
<p>Append the string to the end of the character data of the node. Upon success,<code>data</code>provides access to the concatenation of<code>data</code>and the<code>DOMString</code>specified.</p>
</descr>
<parameters>
<param name="arg" type="DOMString" attr="in">
<descr>
<p>The<code>DOMString</code>to append.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="insertData" id="ID-3EDB695F">
<descr>
<p>Insert a string at the specified<termref def="dt-16-bit-unit">16-bit unit</termref>offset.</p>
</descr>
<parameters>
<param name="offset" type="unsigned long" attr="in">
<descr>
<p>The character offset at which to insert.</p>
</descr>
</param>
<param name="arg" type="DOMString" attr="in">
<descr>
<p>The<code>DOMString</code>to insert.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified<code>offset</code>is negative or greater than the number of 16-bit units in<code>data</code>.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="deleteData" id="ID-7C603781">
<descr>
<p>Remove a range of<termref def="dt-16-bit-unit">16-bit units</termref>from the node. Upon success,<code>data</code>and<code>length</code>reflect the change.</p>
</descr>
<parameters>
<param name="offset" type="unsigned long" attr="in">
<descr>
<p>The offset from which to start removing.</p>
</descr>
</param>
<param name="count" type="unsigned long" attr="in">
<descr>
<p>The number of 16-bit units to delete. If the sum of<code>offset</code>and<code>count</code>exceeds<code>length</code>then all 16-bit units from<code>offset</code>to the end of the data are deleted.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified<code>offset</code>is negative or greater than the number of 16-bit units in<code>data</code>, or if the specified<code>count</code>is negative.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="replaceData" id="ID-E5CBA7FB">
<descr>
<p>Replace the characters starting at the specified<termref def="dt-16-bit-unit">16-bit unit</termref>offset with the specified string.</p>
</descr>
<parameters>
<param name="offset" type="unsigned long" attr="in">
<descr>
<p>The offset from which to start replacing.</p>
</descr>
</param>
<param name="count" type="unsigned long" attr="in">
<descr>
<p>The number of 16-bit units to replace. If the sum of<code>offset</code>and<code>count</code>exceeds<code>length</code>, then all 16-bit units to the end of the data are replaced; (i.e., the effect is the same as a<code>remove</code>method call with the same range, followed by an<code>append</code>method invocation).</p>
</descr>
</param>
<param name="arg" type="DOMString" attr="in">
<descr>
<p>The<code>DOMString</code>with which the range must be replaced.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified<code>offset</code>is negative or greater than the number of 16-bit units in<code>data</code>, or if the specified<code>count</code>is negative.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="Attr" inherits="Node" id="ID-637646024">
<descr>
<p>The<code>Attr</code>interface represents an attribute in an<code>Element</code>object. Typically the allowable values for the attribute are defined in a document type definition.</p>
<p>
<code>Attr</code>objects inherit the<code>Node</code>interface, but since they are not actually child nodes of the element they describe, the DOM does not consider them part of the document tree. Thus, the<code>Node</code>attributes<code>parentNode</code>,<code>previousSibling</code>, and<code>nextSibling</code>have a<code>null</code>value for<code>Attr</code>objects. The DOM takes the view that attributes are properties of elements rather than having a separate identity from the elements they are associated with; this should make it more efficient to implement such features as default attributes associated with all elements of a given type. Furthermore,<code>Attr</code>nodes may not be immediate children of a<code>DocumentFragment</code>. However, they can be associated with<code>Element</code>nodes contained within a<code>DocumentFragment</code>. In short, users and implementors of the DOM need to be aware that<code>Attr</code>nodes have some things in common with other objects inheriting the<code>Node</code>interface, but they also are quite distinct.</p>
<p>The attribute's effective value is determined as follows: if this attribute has been explicitly assigned any value, that value is the attribute's effective value; otherwise, if there is a declaration for this attribute, and that declaration includes a default value, then that default value is the attribute's effective value; otherwise, the attribute does not exist on this element in the structure model until it has been explicitly added. Note that the<code>nodeValue</code>attribute on the<code>Attr</code>instance can also be used to retrieve the string version of the attribute's value(s).</p>
<p>In XML, where the value of an attribute can contain entity references, the child nodes of the<code>Attr</code>node may be either<code>Text</code>or<code>EntityReference</code>nodes (when these are in use; see the description of<code>EntityReference</code>for discussion). Because the DOM Core is not aware of attribute types, it treats all attribute values as simple strings, even if the DTD or schema declares them as having<termref def="dt-tokenized">tokenized</termref>types.</p>
</descr>
<attribute type="DOMString" readonly="yes" name="name" id="ID-1112119403">
<descr>
<p>Returns the name of this attribute.</p>
</descr>
</attribute>
<attribute type="boolean" readonly="yes" name="specified" id="ID-862529273">
<descr>
<p>If this attribute was explicitly given a value in the original document, this is<code>true</code>; otherwise, it is<code>false</code>. Note that the implementation is in charge of this attribute, not the user. If the user changes the value of the attribute (even if it ends up having the same value as the default value) then the<code>specified</code>flag is automatically flipped to<code>true</code>. To re-specify the attribute as the default value from the DTD, the user must delete the attribute. The implementation will then make a new attribute available with<code>specified</code>set to<code>false</code>and the default value (if one exists).</p>
<p>In summary:<ulist>
<item>
<p>If the attribute has an assigned value in the document then<code>specified</code>is<code>true</code>, and the value is the assigned value.</p>
</item>
<item>
<p>If the attribute has no assigned value in the document and has a default value in the DTD, then<code>specified</code>is<code>false</code>, and the value is the default value in the DTD.</p>
</item>
<item>
<p>If the attribute has no assigned value in the document and has a value of #IMPLIED in the DTD, then the attribute does not appear in the structure model of the document.</p>
</item>
<item>
<p>If the<code>ownerElement</code>attribute is<code>null</code>(i.e. because it was just created or was set to<code>null</code>by the various removal and cloning operations)<code>specified</code>is<code>true</code>.</p>
</item>
</ulist>
</p>
</descr>
</attribute>
<attribute type="DOMString" name="value" id="ID-221662474" readonly="no">
<descr>
<p>On retrieval, the value of the attribute is returned as a string. Character and general entity references are replaced with their values. See also the method<code>getAttribute</code>on the<code>Element</code>interface.</p>
<p>On setting, this creates a<code>Text</code>node with the unparsed contents of the string. I.e. any characters that an XML processor would recognize as markup are instead treated as literal text. See also the method<code>setAttribute</code>on the<code>Element</code>interface.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute name="ownerElement" type="Element" readonly="yes" id="Attr-ownerElement" since="DOM Level 2">
<descr>
<p>The<code>Element</code>node this attribute is attached to or<code>null</code>if this attribute is not in use.</p>
</descr>
</attribute>
</interface>
<interface name="Element" inherits="Node" id="ID-745549614">
<descr>
<p>The<code>Element</code>interface represents an<termref def="dt-element">element</termref>in an HTML or XML document. Elements may have attributes associated with them; since the<code>Element</code>interface inherits from<code>Node</code>, the generic<code>Node</code>interface attribute<code>attributes</code>may be used to retrieve the set of all attributes for an element. There are methods on the<code>Element</code>interface to retrieve either an<code>Attr</code>object by name or an attribute value by name. In XML, where an attribute value may contain entity references, an<code>Attr</code>object should be retrieved to examine the possibly fairly complex sub-tree representing the attribute value. On the other hand, in HTML, where all attributes have simple string values, methods to directly access an attribute value can safely be used as a<termref def="dt-convenience">convenience</termref>.</p>
<note>
<p>In DOM Level 2, the method<code>normalize</code>is inherited from the<code>Node</code>interface where it was moved.</p>
</note>
</descr>
<attribute type="DOMString" name="tagName" readonly="yes" id="ID-104682815">
<descr>
<p>The name of the element. For example, in:<eg role="code" xmlns:ns0="http://www.w3.org/XML/1998/namespace0" ns0:space="preserve">&lt;elementExample id="demo"&gt; ... &lt;/elementExample&gt; ,</eg>
<code>tagName</code>has the value<code>"elementExample"</code>. Note that this is case-preserving in XML, as are all of the operations of the DOM. The HTML DOM returns the<code>tagName</code>of an HTML element in the canonical uppercase form, regardless of the case in the source HTML document.</p>
</descr>
</attribute>
<method name="getAttribute" id="ID-666EE0F9">
<descr>
<p>Retrieves an attribute value by name.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The name of the attribute to retrieve.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>The<code>Attr</code>value as a string, or the empty string if that attribute does not have a specified or default value.</p>
</descr>
</returns>
<raises/>
</method>
<method name="setAttribute" id="ID-F68F082">
<descr>
<p>Adds a new attribute. If an attribute with that name is already present in the element, its value is changed to be that of the value parameter. This value is a simple string; it is not parsed as it is being set. So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an<code>Attr</code>node plus any<code>Text</code>and<code>EntityReference</code>nodes, build the appropriate subtree, and use<code>setAttributeNode</code>to assign it as the value of an attribute.</p>
<p>To set an attribute with a qualified name and namespace URI, use the<code>setAttributeNS</code>method.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The name of the attribute to create or alter.</p>
</descr>
</param>
<param name="value" type="DOMString" attr="in">
<descr>
<p>Value to set in string form.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="removeAttribute" id="ID-6D6AC0F9">
<descr>
<p>Removes an attribute by name. If the removed attribute is known to have a default value, an attribute immediately appears containing the default value as well as the corresponding namespace URI, local name, and prefix when applicable.</p>
<p>To remove an attribute by local name and namespace URI, use the<code>removeAttributeNS</code>method.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The name of the attribute to remove.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="getAttributeNode" id="ID-217A91B8">
<descr>
<p>Retrieves an attribute node by name.</p>
<p>To retrieve an attribute node by qualified name and namespace URI, use the<code>getAttributeNodeNS</code>method.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The name (<code>nodeName</code>) of the attribute to retrieve.</p>
</descr>
</param>
</parameters>
<returns type="Attr">
<descr>
<p>The<code>Attr</code>node with the specified name (<code>nodeName</code>) or<code>null</code>if there is no such attribute.</p>
</descr>
</returns>
<raises/>
</method>
<method name="setAttributeNode" id="ID-887236154">
<descr>
<p>Adds a new attribute node. If an attribute with that name (<code>nodeName</code>) is already present in the element, it is replaced by the new one.</p>
<p>To add a new attribute node with a qualified name and namespace URI, use the<code>setAttributeNodeNS</code>method.</p>
</descr>
<parameters>
<param name="newAttr" type="Attr" attr="in">
<descr>
<p>The<code>Attr</code>node to add to the attribute list.</p>
</descr>
</param>
</parameters>
<returns type="Attr">
<descr>
<p>If the<code>newAttr</code>attribute replaces an existing attribute, the replaced<code>Attr</code>node is returned, otherwise<code>null</code>is returned.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>WRONG_DOCUMENT_ERR: Raised if<code>newAttr</code>was created from a different document than the one that created the element.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
<p>INUSE_ATTRIBUTE_ERR: Raised if<code>newAttr</code>is already an attribute of another<code>Element</code>object. The DOM user must explicitly clone<code>Attr</code>nodes to re-use them in other elements.</p>
</descr>
</exception>
</raises>
</method>
<method name="removeAttributeNode" id="ID-D589198">
<descr>
<p>Removes the specified attribute node. If the removed<code>Attr</code>has a default value it is immediately replaced. The replacing attribute has the same namespace URI and local name, as well as the original prefix, when applicable.</p>
</descr>
<parameters>
<param name="oldAttr" type="Attr" attr="in">
<descr>
<p>The<code>Attr</code>node to remove from the attribute list.</p>
</descr>
</param>
</parameters>
<returns type="Attr">
<descr>
<p>The<code>Attr</code>node that was removed.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
<p>NOT_FOUND_ERR: Raised if<code>oldAttr</code>is not an attribute of the element.</p>
</descr>
</exception>
</raises>
</method>
<method name="getElementsByTagName" id="ID-1938918D">
<descr>
<p>Returns a<code>NodeList</code>of all<termref def="dt-descendant">descendant</termref>
<code>Elements</code>with a given tag name, in the order in which they are encountered in a preorder traversal of this<code>Element</code>tree.</p>
</descr>
<parameters>
<param name="tagname" type="DOMString" attr="in">
<descr>
<p>The name of the tag to match on. The special value "*" matches all tags.</p>
</descr>
</param>
</parameters>
<returns type="NodeList">
<descr>
<p>A list of matching<code>Element</code>nodes.</p>
</descr>
</returns>
<raises/>
</method>
<method name="getAttributeNS" id="ID-ElGetAttrNS" since="DOM Level 2">
<descr>
<p>Retrieves an attribute value by local name and namespace URI. HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the attribute to retrieve.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the attribute to retrieve.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>The<code>Attr</code>value as a string, or the empty string if that attribute does not have a specified or default value.</p>
</descr>
</returns>
<raises/>
</method>
<method name="setAttributeNS" id="ID-ElSetAttrNS" since="DOM Level 2">
<descr>
<p>Adds a new attribute. If an attribute with the same local name and namespace URI is already present on the element, its prefix is changed to be the prefix part of the<code>qualifiedName</code>, and its value is changed to be the<code>value</code>parameter. This value is a simple string; it is not parsed as it is being set. So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an<code>Attr</code>node plus any<code>Text</code>and<code>EntityReference</code>nodes, build the appropriate subtree, and use<code>setAttributeNodeNS</code>or<code>setAttributeNode</code>to assign it as the value of an attribute.</p>
<p>HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the attribute to create or alter.</p>
</descr>
</param>
<param name="qualifiedName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-qualifiedname">qualified name</termref>of the attribute to create or alter.</p>
</descr>
</param>
<param name="value" type="DOMString" attr="in">
<descr>
<p>The value to set in string form.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
<p>NAMESPACE_ERR: Raised if the<code>qualifiedName</code>is malformed, if the<code>qualifiedName</code>has a prefix and the<code>namespaceURI</code>is<code>null</code>, if the<code>qualifiedName</code>has a prefix that is "xml" and the<code>namespaceURI</code>is different from "", or if the<code>qualifiedName</code>is "xmlns" and the<code>namespaceURI</code>is different from "".</p>
</descr>
</exception>
</raises>
</method>
<method name="removeAttributeNS" id="ID-ElRemAtNS" since="DOM Level 2">
<descr>
<p>Removes an attribute by local name and namespace URI. If the removed attribute has a default value it is immediately replaced. The replacing attribute has the same namespace URI and local name, as well as the original prefix.</p>
<p>HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the attribute to remove.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the attribute to remove.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="getAttributeNodeNS" id="ID-ElGetAtNodeNS" since="DOM Level 2">
<descr>
<p>Retrieves an<code>Attr</code>node by local name and namespace URI. HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the attribute to retrieve.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the attribute to retrieve.</p>
</descr>
</param>
</parameters>
<returns type="Attr">
<descr>
<p>The<code>Attr</code>node with the specified attribute local name and namespace URI or<code>null</code>if there is no such attribute.</p>
</descr>
</returns>
<raises/>
</method>
<method name="setAttributeNodeNS" id="ID-ElSetAtNodeNS" since="DOM Level 2">
<descr>
<p>Adds a new attribute. If an attribute with that local name and that namespace URI is already present in the element, it is replaced by the new one.</p>
<p>HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="newAttr" type="Attr" attr="in">
<descr>
<p>The<code>Attr</code>node to add to the attribute list.</p>
</descr>
</param>
</parameters>
<returns type="Attr">
<descr>
<p>If the<code>newAttr</code>attribute replaces an existing attribute with the same<termref def="dt-localname">local name</termref>and<termref def="dt-namespaceURI">namespace URI</termref>, the replaced<code>Attr</code>node is returned, otherwise<code>null</code>is returned.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>WRONG_DOCUMENT_ERR: Raised if<code>newAttr</code>was created from a different document than the one that created the element.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
<p>INUSE_ATTRIBUTE_ERR: Raised if<code>newAttr</code>is already an attribute of another<code>Element</code>object. The DOM user must explicitly clone<code>Attr</code>nodes to re-use them in other elements.</p>
</descr>
</exception>
</raises>
</method>
<method name="getElementsByTagNameNS" id="ID-A6C90942" since="DOM Level 2">
<descr>
<p>Returns a<code>NodeList</code>of all the<termref def="dt-descendant">descendant</termref>
<code>Elements</code>with a given local name and namespace URI in the order in which they are encountered in a preorder traversal of this<code>Element</code>tree.</p>
<p>HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the elements to match on. The special value "*" matches all namespaces.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the elements to match on. The special value "*" matches all local names.</p>
</descr>
</param>
</parameters>
<returns type="NodeList">
<descr>
<p>A new<code>NodeList</code>object containing all the matched<code>Elements</code>.</p>
</descr>
</returns>
<raises/>
</method>
<method name="hasAttribute" id="ID-ElHasAttr" since="DOM Level 2">
<descr>
<p>Returns<code>true</code>when an attribute with a given name is specified on this element or has a default value,<code>false</code>otherwise.</p>
</descr>
<parameters>
<param name="name" type="DOMString" attr="in">
<descr>
<p>The name of the attribute to look for.</p>
</descr>
</param>
</parameters>
<returns type="boolean">
<descr>
<p>
<code>true</code>if an attribute with the given name is specified on this element or has a default value,<code>false</code>otherwise.</p>
</descr>
</returns>
<raises/>
</method>
<method name="hasAttributeNS" id="ID-ElHasAttrNS" since="DOM Level 2">
<descr>
<p>Returns<code>true</code>when an attribute with a given local name and namespace URI is specified on this element or has a default value,<code>false</code>otherwise. HTML-only DOM implementations do not need to implement this method.</p>
</descr>
<parameters>
<param name="namespaceURI" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-namespaceURI">namespace URI</termref>of the attribute to look for.</p>
</descr>
</param>
<param name="localName" type="DOMString" attr="in">
<descr>
<p>The<termref def="dt-localname">local name</termref>of the attribute to look for.</p>
</descr>
</param>
</parameters>
<returns type="boolean">
<descr>
<p>
<code>true</code>if an attribute with the given local name and namespace URI is specified or has a default value on this element,<code>false</code>otherwise.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="Text" inherits="CharacterData" id="ID-1312295772">
<descr>
<p>The<code>Text</code>interface inherits from<code>CharacterData</code>and represents the textual content (termedin XML) of an<code>Element</code>or<code>Attr</code>. If there is no markup inside an element's content, the text is contained in a single object implementing the<code>Text</code>interface that is the only child of the element. If there is markup, it is parsed into the<termref def="dt-infoitem">information items</termref>(elements, comments, etc.) and<code>Text</code>nodes that form the list of children of the element.</p>
<p>When a document is first made available via the DOM, there is only one<code>Text</code>node for each block of text. Users may create adjacent<code>Text</code>nodes that represent the contents of a given element without any intervening markup, but should be aware that there is no way to represent the separations between these nodes in XML or HTML, so they will not (in general) persist between DOM editing sessions. The<code>normalize()</code>method on<code>Node</code>merges any such adjacent<code>Text</code>objects into a single node for each block of text.</p>
</descr>
<method name="splitText" id="ID-38853C1D">
<descr>
<p>Breaks this node into two nodes at the specified<code>offset</code>, keeping both in the tree as<termref def="dt-sibling">siblings</termref>. After being split, this node will contain all the content up to the<code>offset</code>point. A new node of the same type, which contains all the content at and after the<code>offset</code>point, is returned. If the original node had a parent node, the new node is inserted as the next<termref def="dt-sibling">sibling</termref>of the original node. When the<code>offset</code>is equal to the length of this node, the new node has no data.</p>
</descr>
<parameters>
<param name="offset" type="unsigned long" attr="in">
<descr>
<p>The<termref def="dt-16-bit-unit">16-bit unit</termref>offset at which to split, starting from<code>0</code>.</p>
</descr>
</param>
</parameters>
<returns type="Text">
<descr>
<p>The new node, of the same type as this node.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in<code>data</code>.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="Comment" inherits="CharacterData" id="ID-1728279322">
<descr>
<p>This interface inherits from<code>CharacterData</code>and represents the content of a comment, i.e., all the characters between the starting '<code>&lt;!--</code>' and ending '<code>--&gt;</code>'. Note that this is the definition of a comment in XML, and, in practice, HTML, although some HTML tools may implement the full SGML comment structure.</p>
</descr>
</interface>
<interface name="CDATASection" inherits="Text" id="ID-667469212">
<descr>
<p>CDATA sections are used to escape blocks of text containing characters that would otherwise be regarded as markup. The only delimiter that is recognized in a CDATA section is the "]]&gt;" string that ends the CDATA section. CDATA sections cannot be nested. Their primary purpose is for including material such as XML fragments, without needing to escape all the delimiters.</p>
<p>The<code>DOMString</code>attribute of the<code>Text</code>node holds the text that is contained by the CDATA section. Note that this<emph>may</emph>contain characters that need to be escaped outside of CDATA sections and that, depending on the character encoding ("charset") chosen for serialization, it may be impossible to write out some characters as part of a CDATA section.</p>
<p>The<code>CDATASection</code>interface inherits from the<code>CharacterData</code>interface through the<code>Text</code>interface. Adjacent<code>CDATASection</code>nodes are not merged by use of the<code>normalize</code>method of the<code>Node</code>interface.</p>
<note>
<p>Because no markup is recognized within a<code>CDATASection</code>, character numeric references cannot be used as an escape mechanism when serializing. Therefore, action needs to be taken when serializing a<code>CDATASection</code>with a character encoding where some of the contained characters cannot be represented. Failure to do so would not produce well-formed XML.</p>
<p>One potential solution in the serialization process is to end the CDATA section before the character, output the character using a character reference or entity reference, and open a new CDATA section for any further characters in the text node. Note, however, that some code conversion libraries at the time of writing do not return an error or exception when a character is missing from the encoding, making the task of ensuring that data is not corrupted on serialization more difficult.</p>
</note>
</descr>
</interface>
<interface name="DocumentType" inherits="Node" id="ID-412266927">
<descr>
<p>Each<code>Document</code>has a<code>doctype</code>attribute whose value is either<code>null</code>or a<code>DocumentType</code>object. The<code>DocumentType</code>interface in the DOM Core provides an interface to the list of entities that are defined for the document, and little else because the effect of namespaces and the various XML schema efforts on DTD representation are not clearly understood as of this writing.</p>
<p>The DOM Level 2 doesn't support editing<code>DocumentType</code>nodes.</p>
</descr>
<attribute readonly="yes" name="name" type="DOMString" id="ID-1844763134">
<descr>
<p>The name of DTD; i.e., the name immediately following the<code>DOCTYPE</code>keyword.</p>
</descr>
</attribute>
<attribute readonly="yes" name="entities" type="NamedNodeMap" id="ID-1788794630">
<descr>
<p>A<code>NamedNodeMap</code>containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded. For example in:<eg role="code" xmlns:ns0="http://www.w3.org/XML/1998/namespace0" ns0:space="preserve">&lt;!DOCTYPE ex SYSTEM "ex.dtd" [ &lt;!ENTITY foo "foo"&gt; &lt;!ENTITY bar "bar"&gt; &lt;!ENTITY bar "bar2"&gt; &lt;!ENTITY % baz "baz"&gt; ]&gt; &lt;ex/&gt;</eg>the interface provides access to<code>foo</code>and the first declaration of<code>bar</code>but not the second declaration of<code>bar</code>or<code>baz</code>. Every node in this map also implements the<code>Entity</code>interface.</p>
<p>The DOM Level 2 does not support editing entities, therefore<code>entities</code>cannot be altered in any way.</p>
</descr>
</attribute>
<attribute readonly="yes" name="notations" type="NamedNodeMap" id="ID-D46829EF">
<descr>
<p>A<code>NamedNodeMap</code>containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the<code>Notation</code>interface.</p>
<p>The DOM Level 2 does not support editing notations, therefore<code>notations</code>cannot be altered in any way.</p>
</descr>
</attribute>
<attribute readonly="yes" name="publicId" type="DOMString" id="ID-Core-DocType-publicId" since="DOM Level 2">
<descr>
<p>The public identifier of the external subset.</p>
</descr>
</attribute>
<attribute readonly="yes" name="systemId" type="DOMString" id="ID-Core-DocType-systemId" since="DOM Level 2">
<descr>
<p>The system identifier of the external subset.</p>
</descr>
</attribute>
<attribute readonly="yes" name="internalSubset" type="DOMString" id="ID-Core-DocType-internalSubset" since="DOM Level 2">
<descr>
<p>The internal subset as a string.</p>
<note>
<p>The actual content returned depends on how much information is available to the implementation. This may vary depending on various parameters, including the XML processor used to build the document.</p>
</note>
</descr>
</attribute>
</interface>
<interface name="Notation" inherits="Node" id="ID-5431D1B9">
<descr>
<p>This interface represents a notation declared in the DTD. A notation either declares, by name, the format of an unparsed entity (seeof the XML 1.0 specification<bibref ref="XML"/>), or is used for formal declaration of processing instruction targets (seeof the XML 1.0 specification<bibref ref="XML"/>). The<code>nodeName</code>attribute inherited from<code>Node</code>is set to the declared name of the notation.</p>
<p>The DOM Level 1 does not support editing<code>Notation</code>nodes; they are therefore<termref def="dt-readonly-node">readonly</termref>.</p>
<p>A<code>Notation</code>node does not have any parent.</p>
</descr>
<attribute readonly="yes" name="publicId" type="DOMString" id="ID-54F2B4D0">
<descr>
<p>The public identifier of this notation. If the public identifier was not specified, this is<code>null</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" name="systemId" type="DOMString" id="ID-E8AAB1D0">
<descr>
<p>The system identifier of this notation. If the system identifier was not specified, this is<code>null</code>.</p>
</descr>
</attribute>
</interface>
<interface name="Entity" inherits="Node" id="ID-527DCFF2">
<descr>
<p>This interface represents an entity, either parsed or unparsed, in an XML document. Note that this models the entity itself<emph>not</emph>the entity declaration.<code>Entity</code>declaration modeling has been left for a later Level of the DOM specification.</p>
<p>The<code>nodeName</code>attribute that is inherited from<code>Node</code>contains the name of the entity.</p>
<p>An XML processor may choose to completely expand entities before the structure model is passed to the DOM; in this case there will be no<code>EntityReference</code>nodes in the document tree.</p>
<p>XML does not mandate that a non-validating XML processor read and process entity declarations made in the external subset or declared in external parameter entities. This means that parsed entities declared in the external subset need not be expanded by some classes of applications, and that the replacement value of the entity may not be available. When the replacement value is available, the corresponding<code>Entity</code>node's child list represents the structure of that replacement text. Otherwise, the child list is empty.</p>
<p>The DOM Level 2 does not support editing<code>Entity</code>nodes; if a user wants to make changes to the contents of an<code>Entity</code>, every related<code>EntityReference</code>node has to be replaced in the structure model by a clone of the<code>Entity</code>'s contents, and then the desired changes must be made to each of those clones instead.<code>Entity</code>nodes and all their<termref def="dt-descendant">descendants</termref>are<termref def="dt-readonly-node">readonly</termref>.</p>
<p>An<code>Entity</code>node does not have any parent.</p>
<note>
<p>If the entity contains an unbound<termref def="dt-namespaceprefix">namespace prefix</termref>, the<code>namespaceURI</code>of the corresponding node in the<code>Entity</code>node subtree is<code>null</code>. The same is true for<code>EntityReference</code>nodes that refer to this entity, when they are created using the<code>createEntityReference</code>method of the<code>Document</code>interface. The DOM Level 2 does not support any mechanism to resolve namespace prefixes.</p>
</note>
</descr>
<attribute readonly="yes" name="publicId" type="DOMString" id="ID-D7303025">
<descr>
<p>The public identifier associated with the entity, if specified. If the public identifier was not specified, this is<code>null</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" name="systemId" type="DOMString" id="ID-D7C29F3E">
<descr>
<p>The system identifier associated with the entity, if specified. If the system identifier was not specified, this is<code>null</code>.</p>
</descr>
</attribute>
<attribute readonly="yes" name="notationName" type="DOMString" id="ID-6ABAEB38">
<descr>
<p>For unparsed entities, the name of the notation for the entity. For parsed entities, this is<code>null</code>.</p>
</descr>
</attribute>
</interface>
<interface name="EntityReference" inherits="Node" id="ID-11C98490">
<descr>
<p>
<code>EntityReference</code>objects may be inserted into the structure model when an entity reference is in the source document, or when the user wishes to insert an entity reference. Note that character references and references to predefined entities are considered to be expanded by the HTML or XML processor so that characters are represented by their Unicode equivalent rather than by an entity reference. Moreover, the XML processor may completely expand references to entities while building the structure model, instead of providing<code>EntityReference</code>objects. If it does provide such objects, then for a given<code>EntityReference</code>node, it may be that there is no<code>Entity</code>node representing the referenced entity. If such an<code>Entity</code>exists, then the subtree of the<code>EntityReference</code>node is in general a copy of the<code>Entity</code>node subtree. However, this may not be true when an entity contains an unbound<termref def="dt-namespaceprefix">namespace prefix</termref>. In such a case, because the namespace prefix resolution depends on where the entity reference is, the<termref def="dt-descendant">descendants</termref>of the<code>EntityReference</code>node may be bound to different<termref def="dt-namespaceURI">namespace URIs</termref>.</p>
<p>As for<code>Entity</code>nodes,<code>EntityReference</code>nodes and all their<termref def="dt-descendant">descendants</termref>are<termref def="dt-readonly-node">readonly</termref>.</p>
</descr>
</interface>
<interface name="ProcessingInstruction" inherits="Node" id="ID-1004215813">
<descr>
<p>The<code>ProcessingInstruction</code>interface represents a "processing instruction", used in XML as a way to keep processor-specific information in the text of the document.</p>
</descr>
<attribute readonly="yes" type="DOMString" name="target" id="ID-1478689192">
<descr>
<p>The target of this processing instruction. XML defines this as being the first<termref def="dt-token">token</termref>following the markup that begins the processing instruction.</p>
</descr>
</attribute>
<attribute type="DOMString" name="data" id="ID-837822393" readonly="no">
<descr>
<p>The content of this processing instruction. This is from the first non white space character after the target to the character immediately preceding the<code>?&gt;</code>.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
</interface>
<interface id="i18n-methods-StringExtend" name="StringExtend">
<descr>
<p>Extensions to a language's native String class or interface</p>
</descr>
<method id="i18n-methods-StringExtend-findOffset16" name="findOffset16">
<descr>
<p>Returns the UTF-16 offset that corresponds to a UTF-32 offset. Used for random access.</p>
<note>
<p>You can always round-trip from a UTF-32 offset to a UTF-16 offset and back. You can round-trip from a UTF-16 offset to a UTF-32 offset and back if and only if the offset16 is not in the middle of a surrogate pair. Unmatched surrogates count as a single UTF-16 value.</p>
</note>
</descr>
<parameters>
<param name="offset32" type="int" attr="in">
<descr>
<p>UTF-32 offset.</p>
</descr>
</param>
</parameters>
<returns type="int">
<descr>
<p>UTF-16 offset</p>
</descr>
</returns>
<raises>
<exception name="StringIndexOutOfBoundsException">
<descr>
<p>if<code>offset32</code>is out of bounds.</p>
</descr>
</exception>
</raises>
</method>
<method id="i18n-methods-StringExtend-findOffset32" name="findOffset32">
<descr>
<p>Returns the UTF-32 offset corresponding to a UTF-16 offset. Used for random access. To find the UTF-32 length of a string, use:<eg xmlns:ns0="http://www.w3.org/XML/1998/namespace0" ns0:space="preserve">len32 = findOffset32(source, source.length());</eg>
</p>
<note>
<p>If the UTF-16 offset is into the middle of a surrogate pair, then the UTF-32 offset of the<emph>end</emph>of the pair is returned; that is, the index of the char after the end of the pair. You can always round-trip from a UTF-32 offset to a UTF-16 offset and back. You can round-trip from a UTF-16 offset to a UTF-32 offset and back if and only if the offset16 is not in the middle of a surrogate pair. Unmatched surrogates count as a single UTF-16 value.</p>
</note>
</descr>
<parameters>
<param attr="in" type="int" name="offset16">
<descr>
<p>UTF-16 offset</p>
</descr>
</param>
</parameters>
<returns type="int">
<descr>
<p>UTF-32 offset</p>
</descr>
</returns>
<raises>
<exception name="StringIndexOutOfBoundsException">
<descr>
<p>if offset16 is out of bounds.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="AbstractView" id="Views-AbstractView" since="DOM Level 2">
<descr>
<p>A base interface that all views shall derive from.</p>
</descr>
<attribute id="Views-AbstractView-document" type="DocumentView" name="document" readonly="yes">
<descr>
<p>The source<code>DocumentView</code>of which this is an<code>AbstractView</code>.</p>
</descr>
</attribute>
</interface>
<interface name="DocumentView" id="Views-DocumentView" since="DOM Level 2">
<descr>
<p>The<code>DocumentView</code>interface is implemented by<code>Document</code>objects in DOM implementations supporting DOM Views. It provides an attribute to retrieve the default view of a document.</p>
</descr>
<attribute id="Views-DocumentView-defaultView" type="AbstractView" name="defaultView" readonly="yes">
<descr>
<p>The default<code>AbstractView</code>for this<code>Document</code>, or<code>null</code>if none available.</p>
</descr>
</attribute>
</interface>
<interface name="EventTarget" id="Events-EventTarget" since="DOM Level 2">
<descr>
<p>The<code>EventTarget</code>interface is implemented by all<code>Nodes</code>in an implementation which supports the DOM Event Model. Therefore, this interface can be obtained by using binding-specific casting methods on an instance of the<code>Node</code>interface. The interface allows registration and removal of<code>EventListeners</code>on an<code>EventTarget</code>and dispatch of events to that<code>EventTarget</code>.</p>
</descr>
<method name="addEventListener" id="Events-EventTarget-addEventListener">
<descr>
<p>This method allows the registration of event listeners on the event target. If an<code>EventListener</code>is added to an<code>EventTarget</code>while it is processing an event, it will not be triggered by the current actions but may be triggered during a later stage of event flow, such as the bubbling phase.</p>
<p>If multiple identical<code>EventListener</code>s are registered on the same<code>EventTarget</code>with the same parameters the duplicate instances are discarded. They do not cause the<code>EventListener</code>to be called twice and since they are discarded they do not need to be removed with the<code>removeEventListener</code>method.</p>
</descr>
<parameters>
<param name="type" type="DOMString" attr="in">
<descr>
<p>The event type for which the user is registering</p>
</descr>
</param>
<param name="listener" type="EventListener" attr="in">
<descr>
<p>The<code>listener</code>parameter takes an interface implemented by the user which contains the methods to be called when the event occurs.</p>
</descr>
</param>
<param name="useCapture" type="boolean" attr="in">
<descr>
<p>If true,<code>useCapture</code>indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered<code>EventListener</code>before being dispatched to any<code>EventTargets</code>beneath them in the tree. Events which are bubbling upward through the tree will not trigger an<code>EventListener</code>designated to use capture.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="removeEventListener" id="Events-EventTarget-removeEventListener">
<descr>
<p>This method allows the removal of event listeners from the event target. If an<code>EventListener</code>is removed from an<code>EventTarget</code>while it is processing an event, it will not be triggered by the current actions.<code>EventListener</code>s can never be invoked after being removed.</p>
<p>Calling<code>removeEventListener</code>with arguments which do not identify any currently registered<code>EventListener</code>on the<code>EventTarget</code>has no effect.</p>
</descr>
<parameters>
<param name="type" type="DOMString" attr="in">
<descr>
<p>Specifies the event type of the<code>EventListener</code>being removed.</p>
</descr>
</param>
<param name="listener" type="EventListener" attr="in">
<descr>
<p>The<code>EventListener</code>parameter indicates the<code>EventListener</code>to be removed.</p>
</descr>
</param>
<param name="useCapture" type="boolean" attr="in">
<descr>
<p>Specifies whether the<code>EventListener</code>being removed was registered as a capturing listener or not. If a listener was registered twice, one with capture and one without, each must be removed separately. Removal of a capturing listener does not affect a non-capturing version of the same listener, and vice versa.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="dispatchEvent" id="Events-EventTarget-dispatchEvent">
<descr>
<p>This method allows the dispatch of events into the implementations event model. Events dispatched in this manner will have the same capturing and bubbling behavior as events dispatched directly by the implementation. The target of the event is the<code>EventTarget</code>on which<code>dispatchEvent</code>is called.</p>
</descr>
<parameters>
<param name="evt" type="Event" attr="in">
<descr>
<p>Specifies the event type, behavior, and contextual information to be used in processing the event.</p>
</descr>
</param>
</parameters>
<returns type="boolean">
<descr>
<p>The return value of<code>dispatchEvent</code>indicates whether any of the listeners which handled the event called<code>preventDefault</code>. If<code>preventDefault</code>was called the value is false, else the value is true.</p>
</descr>
</returns>
<raises>
<exception name="EventException">
<descr>
<p>UNSPECIFIED_EVENT_TYPE_ERR: Raised if the<code>Event</code>'s type was not specified by initializing the event before<code>dispatchEvent</code>was called. Specification of the<code>Event</code>'s type as<code>null</code>or an empty string will also trigger this exception.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface id="Events-EventListener" name="EventListener" since="DOM Level 2">
<descr>
<p>The<code>EventListener</code>interface is the primary method for handling events. Users implement the<code>EventListener</code>interface and register their listener on an<code>EventTarget</code>using the<code>AddEventListener</code>method. The users should also remove their<code>EventListener</code>from its<code>EventTarget</code>after they have completed using the listener.</p>
<p>When a<code>Node</code>is copied using the<code>cloneNode</code>method the<code>EventListener</code>s attached to the source<code>Node</code>are not attached to the copied<code>Node</code>. If the user wishes the same<code>EventListener</code>s to be added to the newly created copy the user must add them manually.</p>
</descr>
<method name="handleEvent" id="Events-EventListener-handleEvent">
<descr>
<p>This method is called whenever an event occurs of the type for which the<code>EventListener</code>interface was registered.</p>
</descr>
<parameters>
<param name="evt" type="Event" attr="in">
<descr>
<p>The<code>Event</code>contains contextual information about the event. It also contains the<code>stopPropagation</code>and<code>preventDefault</code>methods which are used in determining the event's flow and default action.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="Event" id="Events-Event" since="DOM Level 2">
<descr>
<p>The<code>Event</code>interface is used to provide contextual information about an event to the handler processing the event. An object which implements the<code>Event</code>interface is generally passed as the first parameter to an event handler. More specific context information is passed to event handlers by deriving additional interfaces from<code>Event</code>which contain information directly relating to the type of event they accompany. These derived interfaces are also implemented by the object passed to the event listener.</p>
</descr>
<group id="Events-Event-eventPhaseType" name="PhaseType">
<descr>
<p>An integer indicating which phase of event flow is being processed.</p>
</descr>
<constant name="CAPTURING_PHASE" type="unsigned short" value="1">
<descr>
<p>The current event phase is the capturing phase.</p>
</descr>
</constant>
<constant name="AT_TARGET" type="unsigned short" value="2">
<descr>
<p>The event is currently being evaluated at the target<code>EventTarget</code>.</p>
</descr>
</constant>
<constant name="BUBBLING_PHASE" type="unsigned short" value="3">
<descr>
<p>The current event phase is the bubbling phase.</p>
</descr>
</constant>
</group>
<attribute type="DOMString" name="type" readonly="yes" id="Events-Event-type">
<descr>
<p>The name of the event (case-insensitive). The name must be an<termref def="dt-XML-name">XML name</termref>.</p>
</descr>
</attribute>
<attribute type="EventTarget" name="target" readonly="yes" id="Events-Event-target">
<descr>
<p>Used to indicate the<code>EventTarget</code>to which the event was originally dispatched.</p>
</descr>
</attribute>
<attribute type="EventTarget" name="currentTarget" readonly="yes" id="Events-Event-currentTarget">
<descr>
<p>Used to indicate the<code>EventTarget</code>whose<code>EventListeners</code>are currently being processed. This is particularly useful during capturing and bubbling.</p>
</descr>
</attribute>
<attribute type="unsigned short" name="eventPhase" readonly="yes" id="Events-Event-eventPhase">
<descr>
<p>Used to indicate which phase of event flow is currently being evaluated.</p>
</descr>
</attribute>
<attribute type="boolean" name="bubbles" readonly="yes" id="Events-Event-canBubble">
<descr>
<p>Used to indicate whether or not an event is a bubbling event. If the event can bubble the value is true, else the value is false.</p>
</descr>
</attribute>
<attribute type="boolean" name="cancelable" readonly="yes" id="Events-Event-canCancel">
<descr>
<p>Used to indicate whether or not an event can have its default action prevented. If the default action can be prevented the value is true, else the value is false.</p>
</descr>
</attribute>
<attribute type="DOMTimeStamp" name="timeStamp" readonly="yes" id="Events-Event-timeStamp">
<descr>
<p>Used to specify the time (in milliseconds relative to the epoch) at which the event was created. Due to the fact that some systems may not provide this information the value of<code>timeStamp</code>may be not available for all events. When not available, a value of 0 will be returned. Examples of epoch time are the time of the system start or 0:0:0 UTC 1st January 1970.</p>
</descr>
</attribute>
<method name="stopPropagation" id="Events-Event-stopPropagation">
<descr>
<p>The<code>stopPropagation</code>method is used prevent further propagation of an event during event flow. If this method is called by any<code>EventListener</code>the event will cease propagating through the tree. The event will complete dispatch to all listeners on the current<code>EventTarget</code>before event flow stops. This method may be used during any stage of event flow.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="preventDefault" id="Events-Event-preventDefault">
<descr>
<p>If an event is cancelable, the<code>preventDefault</code>method is used to signify that the event is to be canceled, meaning any default action normally taken by the implementation as a result of the event will not occur. If, during any stage of event flow, the<code>preventDefault</code>method is called the event is canceled. Any default action associated with the event will not occur. Calling this method for a non-cancelable event has no effect. Once<code>preventDefault</code>has been called it will remain in effect throughout the remainder of the event's propagation. This method may be used during any stage of event flow.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="initEvent" id="Events-Event-initEvent">
<descr>
<p>The<code>initEvent</code>method is used to initialize the value of an<code>Event</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>Event</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times the final invocation takes precedence. If called from a subclass of<code>Event</code>interface only the values specified in the<code>initEvent</code>method are modified, all other attributes are left unchanged.</p>
</descr>
<parameters>
<param name="eventTypeArg" type="DOMString" attr="in">
<descr>
<p>Specifies the event type. This type may be any event type currently defined in this specification or a new event type.. The string must be an<termref def="dt-XML-name">XML name</termref>.</p>
<p>Any new event type must not begin with any upper, lower, or mixed case version of the string "DOM". This prefix is reserved for future DOM event sets. It is also strongly recommended that third parties adding their own events use their own prefix to avoid confusion and lessen the probability of conflicts with other new events.</p>
</descr>
</param>
<param name="canBubbleArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event can bubble.</p>
</descr>
</param>
<param name="cancelableArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event's default action can be prevented.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<exception id="Events-EventException" name="EventException" since="DOM Level 2">
<descr>
<p>Event operations may throw an<code>EventException</code>as specified in their method descriptions.</p>
</descr>
<component id="Events-EventException-code" name="code">
<typename>unsigned short</typename>
</component>
</exception>
<group id="Events-EventException-EventExceptionCode" name="EventExceptionCode" since="DOM Level 2">
<descr>
<p>An integer indicating the type of error generated.</p>
</descr>
<constant name="UNSPECIFIED_EVENT_TYPE_ERR" type="unsigned short" value="0">
<descr>
<p>If the<code>Event</code>'s type was not specified by initializing the event before the method was called. Specification of the Event's type as<code>null</code>or an empty string will also trigger this exception.</p>
</descr>
</constant>
</group>
<interface name="DocumentEvent" id="Events-DocumentEvent" since="DOM Level 2">
<descr>
<p>The<code>DocumentEvent</code>interface provides a mechanism by which the user can create an Event of a type supported by the implementation. It is expected that the<code>DocumentEvent</code>interface will be implemented on the same object which implements the<code>Document</code>interface in an implementation which supports the Event model.</p>
</descr>
<method name="createEvent" id="Events-DocumentEvent-createEvent">
<descr>
<p/>
</descr>
<parameters>
<param name="eventType" type="DOMString" attr="in">
<descr>
<p>The<code>eventType</code>parameter specifies the type of<code>Event</code>interface to be created. If the<code>Event</code>interface specified is supported by the implementation this method will return a new<code>Event</code>of the interface type requested. If the<code>Event</code>is to be dispatched via the<code>dispatchEvent</code>method the appropriate event init method must be called after creation in order to initialize the<code>Event</code>'s values. As an example, a user wishing to synthesize some kind of<code>UIEvent</code>would call<code>createEvent</code>with the parameter "UIEvents". The<code>initUIEvent</code>method could then be called on the newly created<code>UIEvent</code>to set the specific type of UIEvent to be dispatched and set its context information.</p>
<p>The<code>createEvent</code>method is used in creating<code>Event</code>s when it is either inconvenient or unnecessary for the user to create an<code>Event</code>themselves. In cases where the implementation provided<code>Event</code>is insufficient, users may supply their own<code>Event</code>implementations for use with the<code>dispatchEvent</code>method.</p>
</descr>
</param>
</parameters>
<returns type="Event">
<descr>
<p>The newly created<code>Event</code>
</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: Raised if the implementation does not support the type of<code>Event</code>interface requested</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="UIEvent" inherits="Event" id="Events-UIEvent" since="DOM Level 2">
<descr>
<p>The<code>UIEvent</code>interface provides specific contextual information associated with User Interface events.</p>
</descr>
<attribute type="views::AbstractView" name="view" readonly="yes" id="Events-UIEvent-view">
<descr>
<p>The<code>view</code>attribute identifies the<code>AbstractView</code>from which the event was generated.</p>
</descr>
</attribute>
<attribute id="Events-UIEvent-detail" name="detail" type="long" readonly="yes">
<descr>
<p>Specifies some detail information about the<code>Event</code>, depending on the type of event.</p>
</descr>
</attribute>
<method name="initUIEvent" id="Events-Event-initUIEvent">
<descr>
<p>The<code>initUIEvent</code>method is used to initialize the value of a<code>UIEvent</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>UIEvent</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</p>
</descr>
<parameters>
<param name="typeArg" type="DOMString" attr="in">
<descr>
<p>Specifies the event type.</p>
</descr>
</param>
<param name="canBubbleArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event can bubble.</p>
</descr>
</param>
<param name="cancelableArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event's default action can be prevented.</p>
</descr>
</param>
<param name="viewArg" type="views::AbstractView" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s<code>AbstractView</code>.</p>
</descr>
</param>
<param name="detailArg" type="long" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s detail.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="MouseEvent" inherits="UIEvent" id="Events-MouseEvent" since="DOM Level 2">
<descr>
<p>The<code>MouseEvent</code>interface provides specific contextual information associated with Mouse events.</p>
<p>The<code>detail</code>attribute inherited from<code>UIEvent</code>indicates the number of times a mouse button has been pressed and released over the same screen location during a user action. The attribute value is 1 when the user begins this action and increments by 1 for each full sequence of pressing and releasing. If the user moves the mouse between the mousedown and mouseup the value will be set to 0, indicating that no click is occurring.</p>
<p>In the case of nested elements mouse events are always targeted at the most deeply nested element. Ancestors of the targeted element may use bubbling to obtain notification of mouse events which occur within its descendent elements.</p>
</descr>
<attribute type="long" name="screenX" readonly="yes" id="Events-MouseEvent-screenX">
<descr>
<p>The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system.</p>
</descr>
</attribute>
<attribute type="long" name="screenY" readonly="yes" id="Events-MouseEvent-screenY">
<descr>
<p>The vertical coordinate at which the event occurred relative to the origin of the screen coordinate system.</p>
</descr>
</attribute>
<attribute type="long" name="clientX" readonly="yes" id="Events-MouseEvent-clientX">
<descr>
<p>The horizontal coordinate at which the event occurred relative to the DOM implementation's client area.</p>
</descr>
</attribute>
<attribute type="long" name="clientY" readonly="yes" id="Events-MouseEvent-clientY">
<descr>
<p>The vertical coordinate at which the event occurred relative to the DOM implementation's client area.</p>
</descr>
</attribute>
<attribute type="boolean" name="ctrlKey" readonly="yes" id="Events-MouseEvent-ctrlKey">
<descr>
<p>Used to indicate whether the 'ctrl' key was depressed during the firing of the event.</p>
</descr>
</attribute>
<attribute type="boolean" name="shiftKey" readonly="yes" id="Events-MouseEvent-shiftKey">
<descr>
<p>Used to indicate whether the 'shift' key was depressed during the firing of the event.</p>
</descr>
</attribute>
<attribute type="boolean" name="altKey" readonly="yes" id="Events-MouseEvent-altKey">
<descr>
<p>Used to indicate whether the 'alt' key was depressed during the firing of the event. On some platforms this key may map to an alternative key name.</p>
</descr>
</attribute>
<attribute type="boolean" name="metaKey" readonly="yes" id="Events-MouseEvent-metaKey">
<descr>
<p>Used to indicate whether the 'meta' key was depressed during the firing of the event. On some platforms this key may map to an alternative key name.</p>
</descr>
</attribute>
<attribute type="unsigned short" name="button" readonly="yes" id="Events-MouseEvent-button">
<descr>
<p>During mouse events caused by the depression or release of a mouse button,<code>button</code>is used to indicate which mouse button changed state. The values for<code>button</code>range from zero to indicate the left button of the mouse, one to indicate the middle button if present, and two to indicate the right button. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left.</p>
</descr>
</attribute>
<attribute type="EventTarget" name="relatedTarget" readonly="yes" id="Events-MouseEvent-relatedTarget">
<descr>
<p>Used to identify a secondary<code>EventTarget</code>related to a UI event. Currently this attribute is used with the mouseover event to indicate the<code>EventTarget</code>which the pointing device exited and with the mouseout event to indicate the<code>EventTarget</code>which the pointing device entered.</p>
</descr>
</attribute>
<method name="initMouseEvent" id="Events-Event-initMouseEvent">
<descr>
<p>The<code>initMouseEvent</code>method is used to initialize the value of a<code>MouseEvent</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>MouseEvent</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</p>
</descr>
<parameters>
<param name="typeArg" type="DOMString" attr="in">
<descr>
<p>Specifies the event type.</p>
</descr>
</param>
<param name="canBubbleArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event can bubble.</p>
</descr>
</param>
<param name="cancelableArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event's default action can be prevented.</p>
</descr>
</param>
<param name="viewArg" type="views::AbstractView" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s<code>AbstractView</code>.</p>
</descr>
</param>
<param name="detailArg" type="long" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s mouse click count.</p>
</descr>
</param>
<param name="screenXArg" type="long" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s screen x coordinate</p>
</descr>
</param>
<param name="screenYArg" type="long" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s screen y coordinate</p>
</descr>
</param>
<param name="clientXArg" type="long" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s client x coordinate</p>
</descr>
</param>
<param name="clientYArg" type="long" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s client y coordinate</p>
</descr>
</param>
<param name="ctrlKeyArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not control key was depressed during the<code>Event</code>.</p>
</descr>
</param>
<param name="altKeyArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not alt key was depressed during the<code>Event</code>.</p>
</descr>
</param>
<param name="shiftKeyArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not shift key was depressed during the<code>Event</code>.</p>
</descr>
</param>
<param name="metaKeyArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not meta key was depressed during the<code>Event</code>.</p>
</descr>
</param>
<param name="buttonArg" type="unsigned short" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s mouse button.</p>
</descr>
</param>
<param name="relatedTargetArg" type="EventTarget" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s related<code>EventTarget</code>.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="MutationEvent" inherits="Event" id="Events-MutationEvent" since="DOM Level 2">
<descr>
<p>The<code>MutationEvent</code>interface provides specific contextual information associated with Mutation events.</p>
</descr>
<group id="Events-MutationEvent-attrChangeType" name="attrChangeType">
<descr>
<p>An integer indicating in which way the<code>Attr</code>was changed.</p>
</descr>
<constant name="MODIFICATION" type="unsigned short" value="1">
<descr>
<p>The<code>Attr</code>was modified in place.</p>
</descr>
</constant>
<constant name="ADDITION" type="unsigned short" value="2">
<descr>
<p>The<code>Attr</code>was just added.</p>
</descr>
</constant>
<constant name="REMOVAL" type="unsigned short" value="3">
<descr>
<p>The<code>Attr</code>was just removed.</p>
</descr>
</constant>
</group>
<attribute type="Node" name="relatedNode" readonly="yes" id="Events-MutationEvent-relatedNode">
<descr>
<p>
<code>relatedNode</code>is used to identify a secondary node related to a mutation event. For example, if a mutation event is dispatched to a node indicating that its parent has changed, the<code>relatedNode</code>is the changed parent. If an event is instead dispatched to a subtree indicating a node was changed within it, the<code>relatedNode</code>is the changed node. In the case of the DOMAttrModified event it indicates the<code>Attr</code>node which was modified, added, or removed.</p>
</descr>
</attribute>
<attribute type="DOMString" name="prevValue" readonly="yes" id="Events-MutationEvent-prevValue">
<descr>
<p>
<code>prevValue</code>indicates the previous value of the<code>Attr</code>node in DOMAttrModified events, and of the<code>CharacterData</code>node in DOMCharDataModified events.</p>
</descr>
</attribute>
<attribute type="DOMString" name="newValue" readonly="yes" id="Events-MutationEvent-newValue">
<descr>
<p>
<code>newValue</code>indicates the new value of the<code>Attr</code>node in DOMAttrModified events, and of the<code>CharacterData</code>node in DOMCharDataModified events.</p>
</descr>
</attribute>
<attribute type="DOMString" name="attrName" readonly="yes" id="Events-MutationEvent-attrName">
<descr>
<p>
<code>attrName</code>indicates the name of the changed<code>Attr</code>node in a DOMAttrModified event.</p>
</descr>
</attribute>
<attribute type="unsigned short" name="attrChange" readonly="yes" id="Events-MutationEvent-attrChange">
<descr>
<p>
<code>attrChange</code>indicates the type of change which triggered the DOMAttrModified event. The values can be<code>MODIFICATION</code>,<code>ADDITION</code>, or<code>REMOVAL</code>.</p>
</descr>
</attribute>
<method name="initMutationEvent" id="Events-Event-initMutationEvent">
<descr>
<p>The<code>initMutationEvent</code>method is used to initialize the value of a<code>MutationEvent</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>MutationEvent</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</p>
</descr>
<parameters>
<param name="typeArg" type="DOMString" attr="in">
<descr>
<p>Specifies the event type.</p>
</descr>
</param>
<param name="canBubbleArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event can bubble.</p>
</descr>
</param>
<param name="cancelableArg" type="boolean" attr="in">
<descr>
<p>Specifies whether or not the event's default action can be prevented.</p>
</descr>
</param>
<param name="relatedNodeArg" type="Node" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s related Node.</p>
</descr>
</param>
<param name="prevValueArg" type="DOMString" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s<code>prevValue</code>attribute. This value may be null.</p>
</descr>
</param>
<param name="newValueArg" type="DOMString" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s<code>newValue</code>attribute. This value may be null.</p>
</descr>
</param>
<param name="attrNameArg" type="DOMString" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s<code>attrName</code>attribute. This value may be null.</p>
</descr>
</param>
<param name="attrChangeArg" type="unsigned short" attr="in">
<descr>
<p>Specifies the<code>Event</code>'s<code>attrChange</code>attribute</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="StyleSheet" id="StyleSheets-StyleSheet" since="DOM Level 2">
<descr>
<p>The<code>StyleSheet</code>interface is the abstract base interface for any type of style sheet. It represents a single style sheet associated with a structured document. In HTML, the StyleSheet interface represents either an external style sheet, included via the HTMLelement, or an inlineelement. In XML, this interface represents an external style sheet, included via a.</p>
</descr>
<attribute type="DOMString" readonly="yes" name="type" id="StyleSheets-StyleSheet-type">
<descr>
<p>This specifies the style sheet language for this style sheet. The style sheet language is specified as a content type (e.g. "text/css"). Theis often specified in the<code>ownerNode</code>. Also see thefor the<code>LINK</code>element in HTML 4.0, and the type pseudo-attribute for the XML.</p>
</descr>
</attribute>
<attribute type="boolean" name="disabled" id="StyleSheets-StyleSheet-disabled" readonly="no">
<descr>
<p>
<code>false</code>if the style sheet is applied to the document.<code>true</code>if it is not. Modifying this attribute may cause a new resolution of style for the document. A stylesheet only applies if both an appropriate medium definition is present and the disabled attribute is false. So, if the media doesn't apply to the current user agent, the<code>disabled</code>attribute is ignored.</p>
</descr>
</attribute>
<attribute type="Node" readonly="yes" name="ownerNode" id="StyleSheets-StyleSheet-ownerNode">
<descr>
<p>The node that associates this style sheet with the document. For HTML, this may be the corresponding<code>LINK</code>or<code>STYLE</code>element. For XML, it may be the linking processing instruction. For style sheets that are included by other style sheets, the value of this attribute is<code>null</code>.</p>
</descr>
</attribute>
<attribute type="StyleSheet" readonly="yes" name="parentStyleSheet" id="StyleSheets-StyleSheet-parentStyleSheet">
<descr>
<p>For style sheet languages that support the concept of style sheet inclusion, this attribute represents the including style sheet, if one exists. If the style sheet is a top-level style sheet, or the style sheet language does not support inclusion, the value of this attribute is<code>null</code>.</p>
</descr>
</attribute>
<attribute type="DOMString" readonly="yes" name="href" id="StyleSheets-StyleSheet-href">
<descr>
<p>If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is<code>null</code>. See thefor the<code>LINK</code>element in HTML 4.0, and the href pseudo-attribute for the XML.</p>
</descr>
</attribute>
<attribute type="DOMString" readonly="yes" name="title" id="StyleSheets-StyleSheet-title">
<descr>
<p>The advisory title. The title is often specified in the<code>ownerNode</code>. See thefor the<code>LINK</code>element in HTML 4.0, and the title pseudo-attribute for the XML.</p>
</descr>
</attribute>
<attribute type="MediaList" readonly="yes" name="media" id="StyleSheets-StyleSheet-media">
<descr>
<p>The intended destination media for style information. The media is often specified in the<code>ownerNode</code>. If no media has been specified, the<code>MediaList</code>will be empty. See thefor the<code>LINK</code>element in HTML 4.0, and the media pseudo-attribute for the XML. Modifying the media list may cause a change to the attribute<code>disabled</code>.</p>
</descr>
</attribute>
</interface>
<interface name="StyleSheetList" id="StyleSheets-StyleSheetList" since="DOM Level 2">
<descr>
<p>The<code>StyleSheetList</code>interface provides the abstraction of an ordered collection of style sheets.</p>
<p>The items in the<code>StyleSheetList</code>are accessible via an integral index, starting from 0.</p>
</descr>
<attribute type="unsigned long" readonly="yes" name="length" id="StyleSheets-StyleSheetList-length">
<descr>
<p>The number of<code>StyleSheets</code>in the list. The range of valid child stylesheet indices is<code>0</code>to<code>length-1</code>inclusive.</p>
</descr>
</attribute>
<method name="item" id="StyleSheets-StyleSheetList-item">
<descr>
<p>Used to retrieve a style sheet by ordinal index. If index is greater than or equal to the number of style sheets in the list, this returns<code>null</code>.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>Index into the collection</p>
</descr>
</param>
</parameters>
<returns type="StyleSheet">
<descr>
<p>The style sheet at the<code>index</code>position in the<code>StyleSheetList</code>, or<code>null</code>if that is not a valid index.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface id="StyleSheets-MediaList" name="MediaList" since="DOM Level 2">
<descr>
<p>The<code>MediaList</code>interface provides the abstraction of an ordered collection of, without defining or constraining how this collection is implemented. An empty list is the same as a list that contains the medium<code>"all"</code>.</p>
<p>The items in the<code>MediaList</code>are accessible via an integral index, starting from 0.</p>
</descr>
<attribute type="DOMString" name="mediaText" id="StyleSheets-MediaList-mediaText" readonly="no">
<descr>
<p>The parsable textual representation of the media list. This is a comma-separated list of media.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified string value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute id="StyleSheets-MediaList-length" name="length" type="unsigned long" readonly="yes">
<descr>
<p>The number of media in the list. The range of valid media is<code>0</code>to<code>length-1</code>inclusive.</p>
</descr>
</attribute>
<method id="StyleSheets-MediaList-item" name="item">
<descr>
<p>Returns the<code>index</code>th in the list. If<code>index</code>is greater than or equal to the number of media in the list, this returns<code>null</code>.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>Index into the collection.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>The medium at the<code>index</code>th position in the<code>MediaList</code>, or<code>null</code>if that is not a valid index.</p>
</descr>
</returns>
<raises/>
</method>
<method name="deleteMedium" id="StyleSheets-MediaList-deleteMedium">
<descr>
<p>Deletes the medium indicated by<code>oldMedium</code>from the list.</p>
</descr>
<parameters>
<param name="oldMedium" type="DOMString" attr="in">
<descr>
<p>The medium to delete in the media list.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.</p>
<p>NOT_FOUND_ERR: Raised if<code>oldMedium</code>is not in the list.</p>
</descr>
</exception>
</raises>
</method>
<method id="StyleSheets-MediaList-appendMedium" name="appendMedium">
<descr>
<p>Adds the medium<code>newMedium</code>to the end of the list. If the<code>newMedium</code>is already used, it is first removed.</p>
</descr>
<parameters>
<param name="newMedium" type="DOMString" attr="in">
<descr>
<p>The new medium to add.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_CHARACTER_ERR: If the medium contains characters that are invalid in the underlying style language.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface id="StyleSheets-LinkStyle" name="LinkStyle" since="DOM Level 2">
<descr>
<p>The<code>LinkStyle</code>interface provides a mechanism by which a style sheet can be retrieved from the node responsible for linking it into a document. An instance of the<code>LinkStyle</code>interface can be obtained using binding-specific casting methods on an instance of a linking node (<code>HTMLLinkElement</code>,<code>HTMLStyleElement</code>or<code>ProcessingInstruction</code>in DOM Level 2).</p>
</descr>
<attribute id="StyleSheets-LinkStyle-sheet" name="sheet" type="StyleSheet" readonly="yes">
<descr>
<p>The style sheet.</p>
</descr>
</attribute>
</interface>
<interface name="DocumentStyle" id="StyleSheets-StyleSheet-DocumentStyle" since="DOM Level 2">
<descr>
<p>The<code>DocumentStyle</code>interface provides a mechanism by which the style sheets embedded in a document can be retrieved. The expectation is that an instance of the<code>DocumentStyle</code>interface can be obtained by using binding-specific casting methods on an instance of the<code>Document</code>interface.</p>
</descr>
<attribute type="StyleSheetList" readonly="yes" name="styleSheets" id="StyleSheets-DocumentStyle-styleSheets">
<descr>
<p>A list containing all the style sheets explicitly linked into or embedded in a document. For HTML documents, this includes external style sheets, included via the HTMLelement, and inlineelements. In XML, this includes external style sheets, included via style sheet processing instructions (see<bibref ref="XML-StyleSheet"/>).</p>
</descr>
</attribute>
</interface>
<interface name="CSSStyleSheet" inherits="stylesheets::StyleSheet" id="CSS-CSSStyleSheet" since="DOM Level 2">
<descr>
<p>The<code>CSSStyleSheet</code>interface is a concrete interface used to represent a CSS style sheet i.e., a style sheet whose content type is "text/css".</p>
</descr>
<attribute type="CSSRule" readonly="yes" name="ownerRule" id="CSS-CSSStyleSheet-ownerRule">
<descr>
<p>If this style sheet comes from an<code>@import</code>rule, the<code>ownerRule</code>attribute will contain the<code>CSSImportRule</code>. In that case, the<code>ownerNode</code>attribute in the<code>StyleSheet</code>interface will be<code>null</code>. If the style sheet comes from an element or a processing instruction, the<code>ownerRule</code>attribute will be<code>null</code>and the<code>ownerNode</code>attribute will contain the<code>Node</code>.</p>
</descr>
</attribute>
<attribute type="CSSRuleList" readonly="yes" name="cssRules" id="CSS-CSSStyleSheet-cssRules">
<descr>
<p>The list of all CSS rules contained within the style sheet. This includes bothand.</p>
</descr>
</attribute>
<method name="insertRule" id="CSS-CSSStyleSheet-insertRule">
<descr>
<p>Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.</p>
</descr>
<parameters>
<param name="rule" type="DOMString" attr="in">
<descr>
<p>The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</p>
</descr>
</param>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>The index within the style sheet's rule list of the rule before which to insert the specified rule. If the specified index is equal to the length of the style sheet's rule collection, the rule will be added to the end of the style sheet.</p>
</descr>
</param>
</parameters>
<returns type="unsigned long">
<descr>
<p>The index within the style sheet's rule collection of the newly inserted rule.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified index e.g. if an<code>@import</code>rule is inserted after a standard rule set or other at-rule.</p>
<p>INDEX_SIZE_ERR: Raised if the specified index is not a valid insertion point.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</p>
<p>SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.</p>
</descr>
</exception>
</raises>
</method>
<method name="deleteRule" id="CSS-CSSStyleSheet-deleteRule">
<descr>
<p>Used to delete a rule from the style sheet.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>The index within the style sheet's rule list of the rule to remove.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="CSSRuleList" id="CSS-CSSRuleList" since="DOM Level 2">
<descr>
<p>The<code>CSSRuleList</code>interface provides the abstraction of an ordered collection of CSS rules.</p>
<p>The items in the<code>CSSRuleList</code>are accessible via an integral index, starting from 0.</p>
</descr>
<attribute type="unsigned long" readonly="yes" name="length" id="CSS-CSSRuleList-length">
<descr>
<p>The number of<code>CSSRules</code>in the list. The range of valid child rule indices is<code>0</code>to<code>length-1</code>inclusive.</p>
</descr>
</attribute>
<method name="item" id="CSS-CSSRuleList-item">
<descr>
<p>Used to retrieve a CSS rule by ordinal index. The order in this collection represents the order of the rules in the CSS style sheet. If index is greater than or equal to the number of rules in the list, this returns<code>null</code>.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>Index into the collection</p>
</descr>
</param>
</parameters>
<returns type="CSSRule">
<descr>
<p>The style rule at the<code>index</code>position in the<code>CSSRuleList</code>, or<code>null</code>if that is not a valid index.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="CSSRule" id="CSS-CSSRule" since="DOM Level 2">
<descr>
<p>The<code>CSSRule</code>interface is the abstract base interface for any type of CSS. This includes bothand. An implementation is expected to preserve all rules specified in a CSS style sheet, even if the rule is not recognized by the parser. Unrecognized rules are represented using the<code>CSSUnknownRule</code>interface.</p>
</descr>
<group id="CSS-CSSRule-ruleType" name="RuleType">
<descr>
<p>An integer indicating which type of rule this is.</p>
</descr>
<constant name="UNKNOWN_RULE" type="unsigned short" value="0">
<descr>
<p>The rule is a<code>CSSUnknownRule</code>.</p>
</descr>
</constant>
<constant name="STYLE_RULE" type="unsigned short" value="1">
<descr>
<p>The rule is a<code>CSSStyleRule</code>.</p>
</descr>
</constant>
<constant name="CHARSET_RULE" type="unsigned short" value="2">
<descr>
<p>The rule is a<code>CSSCharsetRule</code>.</p>
</descr>
</constant>
<constant name="IMPORT_RULE" type="unsigned short" value="3">
<descr>
<p>The rule is a<code>CSSImportRule</code>.</p>
</descr>
</constant>
<constant name="MEDIA_RULE" type="unsigned short" value="4">
<descr>
<p>The rule is a<code>CSSMediaRule</code>.</p>
</descr>
</constant>
<constant name="FONT_FACE_RULE" type="unsigned short" value="5">
<descr>
<p>The rule is a<code>CSSFontFaceRule</code>.</p>
</descr>
</constant>
<constant name="PAGE_RULE" type="unsigned short" value="6">
<descr>
<p>The rule is a<code>CSSPageRule</code>.</p>
</descr>
</constant>
</group>
<attribute type="unsigned short" readonly="yes" name="type" id="CSS-CSSRule-type">
<descr>
<p>The type of the rule, as defined above. The expectation is that binding-specific casting methods can be used to cast down from an instance of the<code>CSSRule</code>interface to the specific derived interface implied by the<code>type</code>.</p>
</descr>
</attribute>
<attribute type="DOMString" name="cssText" id="CSS-CSSRule-cssText" readonly="no">
<descr>
<p>The parsable textual representation of the rule. This reflects the current state of the rule and not its initial value.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</p>
<p>INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of rule than the current one.</p>
<p>HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at this point in the style sheet.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if the rule is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="CSSStyleSheet" readonly="yes" name="parentStyleSheet" id="CSS-CSSRule-sheet">
<descr>
<p>The style sheet that contains this rule.</p>
</descr>
</attribute>
<attribute type="CSSRule" readonly="yes" name="parentRule" id="CSS-CSSRule-parentRule">
<descr>
<p>If this rule is contained inside another rule (e.g. a style rule inside an @media block), this is the containing rule. If this rule is not nested inside any other rules, this returns<code>null</code>.</p>
</descr>
</attribute>
</interface>
<interface name="CSSStyleRule" inherits="CSSRule" id="CSS-CSSStyleRule" since="DOM Level 2">
<descr>
<p>The<code>CSSStyleRule</code>interface represents a singlein a CSS style sheet.</p>
</descr>
<attribute type="DOMString" name="selectorText" id="CSS-CSSStyleRule-selectorText" readonly="no">
<descr>
<p>The textual representation of thefor the rule set. The implementation may have stripped out insignificant whitespace while parsing the selector.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="CSSStyleDeclaration" readonly="yes" name="style" id="CSS-CSSStyleRule-style">
<descr>
<p>Theof this rule set.</p>
</descr>
</attribute>
</interface>
<interface name="CSSMediaRule" inherits="CSSRule" id="CSS-CSSMediaRule" since="DOM Level 2">
<descr>
<p>The<code>CSSMediaRule</code>interface represents ain a CSS style sheet. A<code>@media</code>rule can be used to delimit style rules for specific media types.</p>
</descr>
<attribute id="CSS-CSSMediaRule-mediaTypes" name="media" type="stylesheets::MediaList" readonly="yes">
<descr>
<p>A list offor this rule.</p>
</descr>
</attribute>
<attribute type="CSSRuleList" readonly="yes" name="cssRules" id="CSS-CSSMediaRule-cssRules">
<descr>
<p>A list of all CSS rules contained within the media block.</p>
</descr>
</attribute>
<method name="insertRule" id="CSS-CSSMediaRule-insertRule">
<descr>
<p>Used to insert a new rule into the media block.</p>
</descr>
<parameters>
<param name="rule" type="DOMString" attr="in">
<descr>
<p>The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</p>
</descr>
</param>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>The index within the media block's rule collection of the rule before which to insert the specified rule. If the specified index is equal to the length of the media blocks's rule collection, the rule will be added to the end of the media block.</p>
</descr>
</param>
</parameters>
<returns type="unsigned long">
<descr>
<p>The index within the media block's rule collection of the newly inserted rule.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified index, e.g., if an<code>@import</code>rule is inserted after a standard rule set or other at-rule.</p>
<p>INDEX_SIZE_ERR: Raised if the specified index is not a valid insertion point.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly.</p>
<p>SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.</p>
</descr>
</exception>
</raises>
</method>
<method name="deleteRule" id="CSS-CSSMediaRule-deleteRule">
<descr>
<p>Used to delete a rule from the media block.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>The index within the media block's rule collection of the rule to remove.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the media rule list.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="CSSFontFaceRule" inherits="CSSRule" id="CSS-CSSFontFaceRule" since="DOM Level 2">
<descr>
<p>The<code>CSSFontFaceRule</code>interface represents ain a CSS style sheet. The<code>@font-face</code>rule is used to hold a set of font descriptions.</p>
</descr>
<attribute type="CSSStyleDeclaration" readonly="yes" name="style" id="CSS-CSSFontFaceRule-style">
<descr>
<p>Theof this rule.</p>
</descr>
</attribute>
</interface>
<interface name="CSSPageRule" inherits="CSSRule" id="CSS-CSSPageRule" since="DOM Level 2">
<descr>
<p>The<code>CSSPageRule</code>interface represents awithin a CSS style sheet. The<code>@page</code>rule is used to specify the dimensions, orientation, margins, etc. of a page box for paged media.</p>
</descr>
<attribute type="DOMString" name="selectorText" id="CSS-CSSPageRule-name" readonly="no">
<descr>
<p>The parsable textual representation of the page selector for the rule.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="CSSStyleDeclaration" readonly="yes" name="style" id="CSS-CSSPageRule-style">
<descr>
<p>Theof this rule.</p>
</descr>
</attribute>
</interface>
<interface name="CSSImportRule" inherits="CSSRule" id="CSS-CSSImportRule" since="DOM Level 2">
<descr>
<p>The<code>CSSImportRule</code>interface represents awithin a CSS style sheet. The<code>@import</code>rule is used to import style rules from other style sheets.</p>
</descr>
<attribute id="CSS-CSSImportRule-href" name="href" type="DOMString" readonly="yes">
<descr>
<p>The location of the style sheet to be imported. The attribute will not contain the<code>"url(...)"</code>specifier around the URI.</p>
</descr>
</attribute>
<attribute id="CSS-CSSImportRule-media" name="media" type="stylesheets::MediaList" readonly="yes">
<descr>
<p>A list of media types for which this style sheet may be used.</p>
</descr>
</attribute>
<attribute id="CSS-CSSImportRule-styleSheet" name="styleSheet" type="CSSStyleSheet" readonly="yes">
<descr>
<p>The style sheet referred to by this rule, if it has been loaded. The value of this attribute is<code>null</code>if the style sheet has not yet been loaded or if it will not be loaded (e.g. if the style sheet is for a media type not supported by the user agent).</p>
</descr>
</attribute>
</interface>
<interface id="CSS-CSSCharsetRule" name="CSSCharsetRule" inherits="CSSRule" since="DOM Level 2">
<descr>
<p>The<code>CSSCharsetRule</code>interface represents ain a CSS style sheet. The value of the<code>encoding</code>attribute does not affect the encoding of text data in the DOM objects; this encoding is always UTF-16. After a stylesheet is loaded, the value of the<code>encoding</code>attribute is the value found in the<code>@charset</code>rule. If there was no<code>@charset</code>in the original document, then no<code>CSSCharsetRule</code>is created. The value of the<code>encoding</code>attribute may also be used as a hint for the encoding used on serialization of the style sheet.</p>
<p>The value of the(and therefore of the<code>CSSCharsetRule</code>) may not correspond to the encoding the document actually came in; character encoding information e.g. in an HTTP header, has priority (see) but this is not reflected in the<code>CSSCharsetRule</code>.</p>
</descr>
<attribute type="DOMString" readonly="no" name="encoding" id="CSS-CSSCharsetRule-encoding">
<descr>
<p>The encoding information used in this<code>@charset</code>rule.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified encoding value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this encoding rule is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
</interface>
<interface name="CSSUnknownRule" inherits="CSSRule" id="CSS-CSSUnknownRule" since="DOM Level 2">
<descr>
<p>The<code>CSSUnknownRule</code>interface represents an at-rule not supported by this user agent.</p>
</descr>
</interface>
<interface name="CSSStyleDeclaration" id="CSS-CSSStyleDeclaration" since="DOM Level 2">
<descr>
<p>The<code>CSSStyleDeclaration</code>interface represents a single. This interface may be used to determine the style properties currently set in a block or to set style properties explicitly within the block.</p>
<p>While an implementation may not recognize all CSS properties within a CSS declaration block, it is expected to provide access to all specified properties in the style sheet through the<code>CSSStyleDeclaration</code>interface. Furthermore, implementations that support a specific level of CSS should correctly handleproperties for that level. For a further discussion of shorthand properties, see the<code>CSS2Properties</code>interface.</p>
<p>This interface is also used to provide a<b>read-only</b>access to theof an element. See also the<code>ViewCSS</code>interface.</p>
<note>
<p>The CSS Object Model doesn't provide an access to theorvalues of the CSS cascade.</p>
</note>
</descr>
<attribute type="DOMString" name="cssText" id="CSS-CSSStyleDeclaration-cssText" readonly="no">
<descr>
<p>The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or a property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<method name="getPropertyValue" id="CSS-CSSStyleDeclaration-getPropertyValue">
<descr>
<p>Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.</p>
</descr>
<parameters>
<param name="propertyName" type="DOMString" attr="in">
<descr>
<p>The name of the CSS property. See the.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set.</p>
</descr>
</returns>
<raises/>
</method>
<method name="getPropertyCSSValue" id="CSS-CSSStyleDeclaration-getPropertyCSSValue">
<descr>
<p>Used to retrieve the object representation of the value of a CSS property if it has been explicitly set within this declaration block. This method returns<code>null</code>if the property is aproperty. Shorthand property values can only be accessed and modified as strings, using the<code>getPropertyValue</code>and<code>setProperty</code>methods.</p>
</descr>
<parameters>
<param name="propertyName" type="DOMString" attr="in">
<descr>
<p>The name of the CSS property. See the.</p>
</descr>
</param>
</parameters>
<returns type="CSSValue">
<descr>
<p>Returns the value of the property if it has been explicitly set for this declaration block. Returns<code>null</code>if the property has not been set.</p>
</descr>
</returns>
<raises/>
</method>
<method name="removeProperty" id="CSS-CSSStyleDeclaration-removeProperty">
<descr>
<p>Used to remove a CSS property if it has been explicitly set within this declaration block.</p>
</descr>
<parameters>
<param name="propertyName" type="DOMString" attr="in">
<descr>
<p>The name of the CSS property. See the.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method name="getPropertyPriority" id="CSS-CSSStyleDeclaration-getPropertyPriority">
<descr>
<p>Used to retrieve the priority of a CSS property (e.g. the<code>"important"</code>qualifier) if the property has been explicitly set in this declaration block.</p>
</descr>
<parameters>
<param name="propertyName" type="DOMString" attr="in">
<descr>
<p>The name of the CSS property. See the.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>A string representing the priority (e.g.<code>"important"</code>) if one exists. The empty string if none exists.</p>
</descr>
</returns>
<raises/>
</method>
<method name="setProperty" id="CSS-CSSStyleDeclaration-setProperty">
<descr>
<p>Used to set a property value and priority within this declaration block.</p>
</descr>
<parameters>
<param name="propertyName" type="DOMString" attr="in">
<descr>
<p>The name of the CSS property. See the.</p>
</descr>
</param>
<param name="value" type="DOMString" attr="in">
<descr>
<p>The new value of the property.</p>
</descr>
</param>
<param name="priority" type="DOMString" attr="in">
<descr>
<p>The new priority of the property (e.g.<code>"important"</code>).</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</p>
</descr>
</exception>
</raises>
</method>
<attribute type="unsigned long" readonly="yes" name="length" id="CSS-CSSStyleDeclaration-length">
<descr>
<p>The number of properties that have been explicitly set in this declaration block. The range of valid indices is 0 to length-1 inclusive.</p>
</descr>
</attribute>
<method name="item" id="CSS-CSSStyleDeclaration-item">
<descr>
<p>Used to retrieve the properties that have been explicitly set in this declaration block. The order of the properties retrieved using this method does not have to be the order in which they were set. This method can be used to iterate over all properties in this declaration block.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>Index of the property name to retrieve.</p>
</descr>
</param>
</parameters>
<returns type="DOMString">
<descr>
<p>The name of the property at this ordinal position. The empty string if no property exists at this position.</p>
</descr>
</returns>
<raises/>
</method>
<attribute type="CSSRule" readonly="yes" name="parentRule" id="CSS-CSSStyleDeclaration-parentRule">
<descr>
<p>The CSS rule that contains this declaration block or<code>null</code>if this<code>CSSStyleDeclaration</code>is not attached to a<code>CSSRule</code>.</p>
</descr>
</attribute>
</interface>
<interface name="CSSValue" id="CSS-CSSValue" since="DOM Level 2">
<descr>
<p>The<code>CSSValue</code>interface represents a simple or a complex value. A<code>CSSValue</code>object only occurs in a context of a CSS property.</p>
</descr>
<group id="CSS-CSSValue-types" name="UnitTypes">
<descr>
<p>An integer indicating which type of unit applies to the value.</p>
</descr>
<constant name="CSS_INHERIT" type="unsigned short" value="0">
<descr>
<p>The value is inherited and the<code>cssText</code>contains "inherit".</p>
</descr>
</constant>
<constant name="CSS_PRIMITIVE_VALUE" type="unsigned short" value="1">
<descr>
<p>The value is a primitive value and an instance of the<code>CSSPrimitiveValue</code>interface can be obtained by using binding-specific casting methods on this instance of the<code>CSSValue</code>interface.</p>
</descr>
</constant>
<constant name="CSS_VALUE_LIST" type="unsigned short" value="2">
<descr>
<p>The value is a<code>CSSValue</code>list and an instance of the<code>CSSValueList</code>interface can be obtained by using binding-specific casting methods on this instance of the<code>CSSValue</code>interface.</p>
</descr>
</constant>
<constant name="CSS_CUSTOM" type="unsigned short" value="3">
<descr>
<p>The value is a custom value.</p>
</descr>
</constant>
</group>
<attribute id="CSS-CSSValue-cssText" name="cssText" type="DOMString" readonly="no">
<descr>
<p>A string representation of the current value.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified CSS string value has a syntax error (according to the attached property) or is unparsable.</p>
<p>INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of values than the values allowed by the CSS property.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this value is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute id="CSS-CSSValue-cssValueType" name="cssValueType" type="unsigned short" readonly="yes">
<descr>
<p>A code defining the type of the value as defined above.</p>
</descr>
</attribute>
</interface>
<interface id="CSS-CSSPrimitiveValue" name="CSSPrimitiveValue" inherits="CSSValue" since="DOM Level 2">
<descr>
<p>The<code>CSSPrimitiveValue</code>interface represents a single. This interface may be used to determine the value of a specific style property currently set in a block or to set a specific style property explicitly within the block. An instance of this interface might be obtained from the<code>getPropertyCSSValue</code>method of the<code>CSSStyleDeclaration</code>interface. A<code>CSSPrimitiveValue</code>object only occurs in a context of a CSS property.</p>
<p>Conversions are allowed between absolute values (from millimeters to centimeters, from degrees to radians, and so on) but not between relative values. (For example, a pixel value cannot be converted to a centimeter value.) Percentage values can't be converted since they are relative to the parent value (or another property value). There is one exception for color percentage values: since a color percentage value is relative to the range 0-255, a color percentage value can be converted to a number; (see also the<code>RGBColor</code>interface).</p>
</descr>
<group id="CSS-CSSPrimitiveValue-types" name="UnitTypes">
<descr>
<p>An integer indicating which type of unit applies to the value.</p>
</descr>
<constant name="CSS_UNKNOWN" type="unsigned short" value="0">
<descr>
<p>The value is not a recognized CSS2 value. The value can only be obtained by using the<code>cssText</code>attribute.</p>
</descr>
</constant>
<constant name="CSS_NUMBER" type="unsigned short" value="1">
<descr>
<p>The value is a simple. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_PERCENTAGE" type="unsigned short" value="2">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_EMS" type="unsigned short" value="3">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_EXS" type="unsigned short" value="4">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_PX" type="unsigned short" value="5">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_CM" type="unsigned short" value="6">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_MM" type="unsigned short" value="7">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_IN" type="unsigned short" value="8">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_PT" type="unsigned short" value="9">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_PC" type="unsigned short" value="10">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_DEG" type="unsigned short" value="11">
<descr>
<p>The value is an. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_RAD" type="unsigned short" value="12">
<descr>
<p>The value is an. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_GRAD" type="unsigned short" value="13">
<descr>
<p>The value is an. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_MS" type="unsigned short" value="14">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_S" type="unsigned short" value="15">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_HZ" type="unsigned short" value="16">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_KHZ" type="unsigned short" value="17">
<descr>
<p>The value is a. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_DIMENSION" type="unsigned short" value="18">
<descr>
<p>The value is a number with an unknown dimension. The value can be obtained by using the<code>getFloatValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_STRING" type="unsigned short" value="19">
<descr>
<p>The value is a. The value can be obtained by using the<code>getStringValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_URI" type="unsigned short" value="20">
<descr>
<p>The value is a. The value can be obtained by using the<code>getStringValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_IDENT" type="unsigned short" value="21">
<descr>
<p>The value is an. The value can be obtained by using the<code>getStringValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_ATTR" type="unsigned short" value="22">
<descr>
<p>The value is a. The value can be obtained by using the<code>getStringValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_COUNTER" type="unsigned short" value="23">
<descr>
<p>The value is a. The value can be obtained by using the<code>getCounterValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_RECT" type="unsigned short" value="24">
<descr>
<p>The value is a. The value can be obtained by using the<code>getRectValue</code>method.</p>
</descr>
</constant>
<constant name="CSS_RGBCOLOR" type="unsigned short" value="25">
<descr>
<p>The value is a. The value can be obtained by using the<code>getRGBColorValue</code>method.</p>
</descr>
</constant>
</group>
<attribute id="CSS-CSSPrimitiveValue-primitiveType" name="primitiveType" type="unsigned short" readonly="yes">
<descr>
<p>The type of the value as defined by the constants specified above.</p>
</descr>
</attribute>
<method id="CSS-CSSPrimitiveValue-setFloatValue" name="setFloatValue">
<descr>
<p>A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a<code>DOMException</code>will be raised.</p>
</descr>
<parameters>
<param name="unitType" type="unsigned short" attr="in">
<descr>
<p>A unit code as defined above. The unit code can only be a float unit type (i.e.<code>CSS_NUMBER</code>,<code>CSS_PERCENTAGE</code>,<code>CSS_EMS</code>,<code>CSS_EXS</code>,<code>CSS_PX</code>,<code>CSS_CM</code>,<code>CSS_MM</code>,<code>CSS_IN</code>,<code>CSS_PT</code>,<code>CSS_PC</code>,<code>CSS_DEG</code>,<code>CSS_RAD</code>,<code>CSS_GRAD</code>,<code>CSS_MS</code>,<code>CSS_S</code>,<code>CSS_HZ</code>,<code>CSS_KHZ</code>,<code>CSS_DIMENSION</code>).</p>
</descr>
</param>
<param name="floatValue" type="float" attr="in">
<descr>
<p>The new float value.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr/>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_ACCESS_ERR: Raised if the attached property doesn't support the float value or the unit type.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method id="CSS-CSSPrimitiveValue-getFloatValue" name="getFloatValue">
<descr>
<p>This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a<code>DOMException</code>is raised.</p>
</descr>
<parameters>
<param name="unitType" type="unsigned short" attr="in">
<descr>
<p>A unit code to get the float value. The unit code can only be a float unit type (i.e.<code>CSS_NUMBER</code>,<code>CSS_PERCENTAGE</code>,<code>CSS_EMS</code>,<code>CSS_EXS</code>,<code>CSS_PX</code>,<code>CSS_CM</code>,<code>CSS_MM</code>,<code>CSS_IN</code>,<code>CSS_PT</code>,<code>CSS_PC</code>,<code>CSS_DEG</code>,<code>CSS_RAD</code>,<code>CSS_GRAD</code>,<code>CSS_MS</code>,<code>CSS_S</code>,<code>CSS_HZ</code>,<code>CSS_KHZ</code>,<code>CSS_DIMENSION</code>).</p>
</descr>
</param>
</parameters>
<returns type="float">
<descr>
<p>The float value in the specified unit.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float value or if the float value can't be converted into the specified unit.</p>
</descr>
</exception>
</raises>
</method>
<method id="CSS-CSSPrimitiveValue-setStringValue" name="setStringValue">
<descr>
<p>A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a<code>DOMException</code>will be raised.</p>
</descr>
<parameters>
<param name="stringType" type="unsigned short" attr="in">
<descr>
<p>A string code as defined above. The string code can only be a string unit type (i.e.<code>CSS_STRING</code>,<code>CSS_URI</code>,<code>CSS_IDENT</code>, and<code>CSS_ATTR</code>).</p>
</descr>
</param>
<param name="stringValue" type="DOMString" attr="in">
<descr>
<p>The new string value.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr/>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value or if the string value can't be converted into the specified unit.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</raises>
</method>
<method id="CSS-CSSPrimitiveValue-getStringValue" name="getStringValue">
<descr>
<p>This method is used to get the string value. If the CSS value doesn't contain a string value, a<code>DOMException</code>is raised.</p>
<note>
<p>Some properties (likeor) convert a whitespace separated list of idents to a string.</p>
</note>
</descr>
<parameters/>
<returns type="DOMString">
<descr>
<p>The string value in the current unit. The current<code>primitiveType</code>can only be a string unit type (i.e.<code>CSS_STRING</code>,<code>CSS_URI</code>,<code>CSS_IDENT</code>and<code>CSS_ATTR</code>).</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value.</p>
</descr>
</exception>
</raises>
</method>
<method id="CSS-CSSPrimitiveValue-getCounterValue" name="getCounterValue">
<descr>
<p>This method is used to get the Counter value. If this CSS value doesn't contain a counter value, a<code>DOMException</code>is raised. Modification to the corresponding style property can be achieved using the<code>Counter</code>interface.</p>
</descr>
<parameters/>
<returns type="Counter">
<descr>
<p>The Counter value.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Counter value (e.g. this is not<code>CSS_COUNTER</code>).</p>
</descr>
</exception>
</raises>
</method>
<method id="CSS-CSSPrimitiveValue-getRectValue" name="getRectValue">
<descr>
<p>This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a<code>DOMException</code>is raised. Modification to the corresponding style property can be achieved using the<code>Rect</code>interface.</p>
</descr>
<parameters/>
<returns type="Rect">
<descr>
<p>The Rect value.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Rect value. (e.g. this is not<code>CSS_RECT</code>).</p>
</descr>
</exception>
</raises>
</method>
<method id="CSS-CSSPrimitiveValue-getRGBColorValue" name="getRGBColorValue">
<descr>
<p>This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a<code>DOMException</code>is raised. Modification to the corresponding style property can be achieved using the<code>RGBColor</code>interface.</p>
</descr>
<parameters/>
<returns type="RGBColor">
<descr>
<p>the RGB color value.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_ACCESS_ERR: Raised if the attached property can't return a RGB color value (e.g. this is not<code>CSS_RGBCOLOR</code>).</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface id="CSS-CSSValueList" name="CSSValueList" inherits="CSSValue" since="DOM Level 2">
<descr>
<p>The<code>CSSValueList</code>interface provides the abstraction of an ordered collection of CSS values.</p>
<p>Some properties allow an empty list into their syntax. In that case, these properties take the<code>none</code>identifier. So, an empty list means that the property has the value<code>none</code>.</p>
<p>The items in the<code>CSSValueList</code>are accessible via an integral index, starting from 0.</p>
</descr>
<attribute id="CSS-CSSValueList-length" name="length" type="unsigned long" readonly="yes">
<descr>
<p>The number of<code>CSSValues</code>in the list. The range of valid values of the indices is<code>0</code>to<code>length-1</code>inclusive.</p>
</descr>
</attribute>
<method id="CSS-CSSValueList-item" name="item">
<descr>
<p>Used to retrieve a<code>CSSValue</code>by ordinal index. The order in this collection represents the order of the values in the CSS style property. If index is greater than or equal to the number of values in the list, this returns<code>null</code>.</p>
</descr>
<parameters>
<param name="index" type="unsigned long" attr="in">
<descr>
<p>Index into the collection.</p>
</descr>
</param>
</parameters>
<returns type="CSSValue">
<descr>
<p>The<code>CSSValue</code>at the<code>index</code>position in the<code>CSSValueList</code>, or<code>null</code>if that is not a valid index.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface id="CSS-RGBColor" name="RGBColor" since="DOM Level 2">
<descr>
<p>The<code>RGBColor</code>interface is used to represent anyvalue. This interface reflects the values in the underlying style property. Hence, modifications made to the<code>CSSPrimitiveValue</code>objects modify the style property.</p>
<p>A specified RGB color is not clipped (even if the number is outside the range 0-255 or 0%-100%). A computed RGB color is clipped depending on the device.</p>
<p>Even if a style sheet can only contain an integer for a color value, the internal storage of this integer is a float, and this can be used as a float in the specified or the computed style.</p>
<p>A color percentage value can always be converted to a number and vice versa.</p>
</descr>
<attribute id="CSS-RGBColor-red" name="red" type="CSSPrimitiveValue" readonly="yes">
<descr>
<p>This attribute is used for the red value of the RGB color.</p>
</descr>
</attribute>
<attribute id="CSS-RGBColor-green" name="green" type="CSSPrimitiveValue" readonly="yes">
<descr>
<p>This attribute is used for the green value of the RGB color.</p>
</descr>
</attribute>
<attribute id="CSS-RGBColor-blue" name="blue" type="CSSPrimitiveValue" readonly="yes">
<descr>
<p>This attribute is used for the blue value of the RGB color.</p>
</descr>
</attribute>
</interface>
<interface id="CSS-Rect" name="Rect" since="DOM Level 2">
<descr>
<p>The<code>Rect</code>interface is used to represent anyvalue. This interface reflects the values in the underlying style property. Hence, modifications made to the<code>CSSPrimitiveValue</code>objects modify the style property.</p>
</descr>
<attribute id="CSS-Rect-top" name="top" type="CSSPrimitiveValue" readonly="yes">
<descr>
<p>This attribute is used for the top of the rect.</p>
</descr>
</attribute>
<attribute id="CSS-Rect-right" name="right" type="CSSPrimitiveValue" readonly="yes">
<descr>
<p>This attribute is used for the right of the rect.</p>
</descr>
</attribute>
<attribute id="CSS-Rect-bottom" name="bottom" type="CSSPrimitiveValue" readonly="yes">
<descr>
<p>This attribute is used for the bottom of the rect.</p>
</descr>
</attribute>
<attribute id="CSS-Rect-left" name="left" type="CSSPrimitiveValue" readonly="yes">
<descr>
<p>This attribute is used for the left of the rect.</p>
</descr>
</attribute>
</interface>
<interface id="CSS-Counter" name="Counter" since="DOM Level 2">
<descr>
<p>The<code>Counter</code>interface is used to represent anyvalue. This interface reflects the values in the underlying style property.</p>
</descr>
<attribute id="CSS-Counter-identifier" name="identifier" type="DOMString" readonly="yes">
<descr>
<p>This attribute is used for the identifier of the counter.</p>
</descr>
</attribute>
<attribute id="CSS-Counter-listStyle" name="listStyle" type="DOMString" readonly="yes">
<descr>
<p>This attribute is used for the style of the list.</p>
</descr>
</attribute>
<attribute id="CSS-Counter-separator" name="separator" type="DOMString" readonly="yes">
<descr>
<p>This attribute is used for the separator of the nested counters.</p>
</descr>
</attribute>
</interface>
<interface id="CSS-ViewCSS" name="ViewCSS" inherits="views::AbstractView" since="DOM Level 2">
<descr>
<p>This interface represents a CSS view. The<code>getComputedStyle</code>method provides a<b>read only access</b>to theof an element.</p>
<p>The expectation is that an instance of the<code>ViewCSS</code>interface can be obtained by using binding-specific casting methods on an instance of the<code>AbstractView</code>interface.</p>
<p>Since a computed style is related to an<code>Element</code>node, if this element is removed from the document, the associated<code>CSSStyleDeclaration</code>and<code>CSSValue</code>related to this declaration are no longer valid.</p>
</descr>
<method id="CSS-CSSview-getComputedStyle" name="getComputedStyle">
<descr>
<p>This method is used to get the computed style as it is defined in<bibref ref="CSS2"/>.</p>
</descr>
<parameters>
<param name="elt" type="Element" attr="in">
<descr>
<p>The element whose style is to be computed. This parameter cannot be null.</p>
</descr>
</param>
<param name="pseudoElt" type="DOMString" attr="in">
<descr>
<p>The pseudo-element or<code>null</code>if none.</p>
</descr>
</param>
</parameters>
<returns type="CSSStyleDeclaration">
<descr>
<p>The computed style. The<code>CSSStyleDeclaration</code>is read-only and contains only absolute values.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface id="CSS-DocumentCSS" name="DocumentCSS" inherits="stylesheets::DocumentStyle" since="DOM Level 2">
<descr>
<p>This interface represents a document with a CSS view.</p>
<p>The<code>getOverrideStyle</code>method provides a mechanism through which a DOM author could effect immediate change to the style of an element without modifying the explicitly linked style sheets of a document or the inline style of elements in the style sheets. This style sheet comes after the author style sheet in the cascade algorithm and is called<emph>override style sheet</emph>. The override style sheet takes precedence over author style sheets. An "!important" declaration still takes precedence over a normal declaration. Override, author, and user style sheets all may contain "!important" declarations. User "!important" rules take precedence over both override and author "!important" rules, and override "!important" rules take precedence over author "!important" rules.</p>
<p>The expectation is that an instance of the<code>DocumentCSS</code>interface can be obtained by using binding-specific casting methods on an instance of the<code>Document</code>interface.</p>
</descr>
<method id="CSS-DocumentCSS-getOverrideStyle" name="getOverrideStyle">
<descr>
<p>This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element.</p>
</descr>
<parameters>
<param name="elt" type="Element" attr="in">
<descr>
<p>The element whose style is to be modified. This parameter cannot be null.</p>
</descr>
</param>
<param name="pseudoElt" type="DOMString" attr="in">
<descr>
<p>The pseudo-element or<code>null</code>if none.</p>
</descr>
</param>
</parameters>
<returns type="CSSStyleDeclaration">
<descr>
<p>The override style declaration.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface id="CSS-DOMImplementationCSS" name="DOMImplementationCSS" since="DOM   Level 2" inherits="DOMImplementation">
<descr>
<p>This interface allows the DOM user to create a<code>CSSStyleSheet</code>outside the context of a document. There is no way to associate the new<code>CSSStyleSheet</code>with a document in DOM Level 2.</p>
</descr>
<method id="CSS-DOMImplementationCSS-createCSSStyleSheet" name="createCSSStyleSheet">
<descr>
<p>Creates a new<code>CSSStyleSheet</code>.</p>
</descr>
<parameters>
<param name="title" type="DOMString" attr="in">
<descr>
<p>The advisory title. See also the<specref ref="StyleSheets-StyleSheet-title"/>section.</p>
</descr>
</param>
<param name="media" type="DOMString" attr="in">
<descr>
<p>The comma-separated list of media associated with the new style sheet. See also the<specref ref="StyleSheets-StyleSheet-media"/>section.</p>
</descr>
</param>
</parameters>
<returns type="CSSStyleSheet">
<descr>
<p>A new CSS style sheet.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the specified media string value has a syntax error and is unparsable.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface id="CSS-ElementCSSInlineStyle" name="ElementCSSInlineStyle" since="DOM Level 2">
<descr>
<p>Inline style information attached to elements is exposed through the<code>style</code>attribute. This represents the contents of theattribute for HTML elements (or elements in other schemas or DTDs which use the STYLE attribute in the same way). The expectation is that an instance of the ElementCSSInlineStyle interface can be obtained by using binding-specific casting methods on an instance of the Element interface when the element supports inline CSS style informations.</p>
</descr>
<attribute id="CSS-ElementCSSInlineStyle-style" name="style" type="CSSStyleDeclaration" readonly="yes">
<descr>
<p>The style attribute.</p>
</descr>
</attribute>
</interface>
<interface name="CSS2Properties" id="CSS-CSS2Properties" since="DOM Level 2">
<descr>
<p>The<code>CSS2Properties</code>interface represents a convenience mechanism for retrieving and setting properties within a<code>CSSStyleDeclaration</code>. The attributes of this interface correspond to all the. Getting an attribute of this interface is equivalent to calling the<code>getPropertyValue</code>method of the<code>CSSStyleDeclaration</code>interface. Setting an attribute of this interface is equivalent to calling the<code>setProperty</code>method of the<code>CSSStyleDeclaration</code>interface.</p>
<p>A conformant implementation of the CSS module is not required to implement the<code>CSS2Properties</code>interface. If an implementation does implement this interface, the expectation is that language-specific methods can be used to cast from an instance of the<code>CSSStyleDeclaration</code>interface to the<code>CSS2Properties</code>interface.</p>
<p>If an implementation does implement this interface, it is expected to understand the specific syntax of the shorthand properties, and apply their semantics; when the<code>margin</code>property is set, for example, the<code>marginTop</code>,<code>marginRight</code>,<code>marginBottom</code>and<code>marginLeft</code>properties are actually being set by the underlying implementation.</p>
<p>When dealing with CSS "shorthand" properties, the shorthand properties should be decomposed into their component longhand properties as appropriate, and when querying for their value, the form returned should be the shortest form exactly equivalent to the declarations made in the ruleset. However, if there is no shorthand declaration that could be added to the ruleset without changing in any way the rules already declared in the ruleset (i.e., by adding longhand rules that were previously not declared in the ruleset), then the empty string should be returned for the shorthand property.</p>
<p>For example, querying for the<code>font</code>property should not return "normal normal normal 14pt/normal Arial, sans-serif", when "14pt Arial, sans-serif" suffices. (The normals are initial values, and are implied by use of the longhand property.)</p>
<p>If the values for all the longhand properties that compose a particular string are the initial values, then a string consisting of all the initial values should be returned (e.g. a<code>border-width</code>value of "medium" should be returned as such, not as "").</p>
<p>For some shorthand properties that take missing values from other sides, such as the<code>margin</code>,<code>padding</code>, and<code>border-[width|style|color]</code>properties, the minimum number of sides possible should be used; i.e., "0px 10px" will be returned instead of "0px 10px 0px 10px".</p>
<p>If the value of a shorthand property can not be decomposed into its component longhand properties, as is the case for the<code>font</code>property with a value of "menu", querying for the values of the component longhand properties should return the empty string.</p>
</descr>
<attribute type="DOMString" name="azimuth" id="CSS-CSS2Properties-azimuth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="background" id="CSS-CSS2Properties-background" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="backgroundAttachment" id="CSS-CSS2Properties-backgroundAttachment" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="backgroundColor" id="CSS-CSS2Properties-backgroundColor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="backgroundImage" id="CSS-CSS2Properties-backgroundImage" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="backgroundPosition" id="CSS-CSS2Properties-backgroundPosition" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="backgroundRepeat" id="CSS-CSS2Properties-backgroundRepeat" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="border" id="CSS-CSS2Properties-border" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderCollapse" id="CSS-CSS2Properties-borderCollapse" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderColor" id="CSS-CSS2Properties-borderColor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderSpacing" id="CSS-CSS2Properties-borderSpacing" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderStyle" id="CSS-CSS2Properties-borderStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderTop" id="CSS-CSS2Properties-borderTop" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderRight" id="CSS-CSS2Properties-borderRight" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderBottom" id="CSS-CSS2Properties-borderBottom" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderLeft" id="CSS-CSS2Properties-borderLeft" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderTopColor" id="CSS-CSS2Properties-borderTopColor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderRightColor" id="CSS-CSS2Properties-borderRightColor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderBottomColor" id="CSS-CSS2Properties-borderBottomColor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderLeftColor" id="CSS-CSS2Properties-borderLeftColor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderTopStyle" id="CSS-CSS2Properties-borderTopStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderRightStyle" id="CSS-CSS2Properties-borderRightStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderBottomStyle" id="CSS-CSS2Properties-borderBottomStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderLeftStyle" id="CSS-CSS2Properties-borderLeftStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderTopWidth" id="CSS-CSS2Properties-borderTopWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderRightWidth" id="CSS-CSS2Properties-borderRightWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderBottomWidth" id="CSS-CSS2Properties-borderBottomWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderLeftWidth" id="CSS-CSS2Properties-borderLeftWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="borderWidth" id="CSS-CSS2Properties-borderWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="bottom" id="CSS-CSS2Properties-bottom" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="captionSide" id="CSS-CSS2Properties-captionSide" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="clear" id="CSS-CSS2Properties-clear" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="clip" id="CSS-CSS2Properties-clip" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="color" id="CSS-CSS2Properties-color" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="content" id="CSS-CSS2Properties-content" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="counterIncrement" id="CSS-CSS2Properties-counterIncrement" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="counterReset" id="CSS-CSS2Properties-counterReset" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="cue" id="CSS-CSS2Properties-cue" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="cueAfter" id="CSS-CSS2Properties-cueAfter" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="cueBefore" id="CSS-CSS2Properties-cueBefore" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="cursor" id="CSS-CSS2Properties-cursor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="direction" id="CSS-CSS2Properties-direction" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="display" id="CSS-CSS2Properties-display" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="elevation" id="CSS-CSS2Properties-elevation" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="emptyCells" id="CSS-CSS2Properties-emptyCells" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="cssFloat" id="CSS-CSS2Properties-cssFloat" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="font" id="CSS-CSS2Properties-font" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="fontFamily" id="CSS-CSS2Properties-fontFamily" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="fontSize" id="CSS-CSS2Properties-fontSize" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="fontSizeAdjust" id="CSS-CSS2Properties-fontSizeAdjust" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="fontStretch" id="CSS-CSS2Properties-fontStretch" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="fontStyle" id="CSS-CSS2Properties-fontStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="fontVariant" id="CSS-CSS2Properties-fontVariant" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="fontWeight" id="CSS-CSS2Properties-fontWeight" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="height" id="CSS-CSS2Properties-height" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="left" id="CSS-CSS2Properties-left" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="letterSpacing" id="CSS-CSS2Properties-letterSpacing" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="lineHeight" id="CSS-CSS2Properties-lineHeight" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="listStyle" id="CSS-CSS2Properties-listStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="listStyleImage" id="CSS-CSS2Properties-listStyleImage" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="listStylePosition" id="CSS-CSS2Properties-listStylePosition" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="listStyleType" id="CSS-CSS2Properties-listStyleType" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="margin" id="CSS-CSS2Properties-margin" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="marginTop" id="CSS-CSS2Properties-marginTop" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="marginRight" id="CSS-CSS2Properties-marginRight" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="marginBottom" id="CSS-CSS2Properties-marginBottom" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="marginLeft" id="CSS-CSS2Properties-marginLeft" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="markerOffset" id="CSS-CSS2Properties-markerOffset" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="marks" id="CSS-CSS2Properties-marks" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="maxHeight" id="CSS-CSS2Properties-maxHeight" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="maxWidth" id="CSS-CSS2Properties-maxWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="minHeight" id="CSS-CSS2Properties-minHeight" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="minWidth" id="CSS-CSS2Properties-minWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="orphans" id="CSS-CSS2Properties-orphans" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="outline" id="CSS-CSS2Properties-outline" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="outlineColor" id="CSS-CSS2Properties-outlineColor" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="outlineStyle" id="CSS-CSS2Properties-outlineStyle" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="outlineWidth" id="CSS-CSS2Properties-outlineWidth" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="overflow" id="CSS-CSS2Properties-overflow" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="padding" id="CSS-CSS2Properties-padding" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="paddingTop" id="CSS-CSS2Properties-paddingTop" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="paddingRight" id="CSS-CSS2Properties-paddingRight" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="paddingBottom" id="CSS-CSS2Properties-paddingBottom" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="paddingLeft" id="CSS-CSS2Properties-paddingLeft" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="page" id="CSS-CSS2Properties-page" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pageBreakAfter" id="CSS-CSS2Properties-pageBreakAfter" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pageBreakBefore" id="CSS-CSS2Properties-pageBreakBefore" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pageBreakInside" id="CSS-CSS2Properties-pageBreakInside" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pause" id="CSS-CSS2Properties-pause" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pauseAfter" id="CSS-CSS2Properties-pauseAfter" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pauseBefore" id="CSS-CSS2Properties-pauseBefore" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pitch" id="CSS-CSS2Properties-pitch" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="pitchRange" id="CSS-CSS2Properties-pitchRange" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="playDuring" id="CSS-CSS2Properties-playDuring" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="position" id="CSS-CSS2Properties-position" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="quotes" id="CSS-CSS2Properties-quotes" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="richness" id="CSS-CSS2Properties-richness" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="right" id="CSS-CSS2Properties-right" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="size" id="CSS-CSS2Properties-size" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="speak" id="CSS-CSS2Properties-speak" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="speakHeader" id="CSS-CSS2Properties-speakHeader" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="speakNumeral" id="CSS-CSS2Properties-speakNumeral" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="speakPunctuation" id="CSS-CSS2Properties-speakPunctuation" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="speechRate" id="CSS-CSS2Properties-speechRate" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="stress" id="CSS-CSS2Properties-stress" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="tableLayout" id="CSS-CSS2Properties-tableLayout" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="textAlign" id="CSS-CSS2Properties-textAlign" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="textDecoration" id="CSS-CSS2Properties-textDecoration" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="textIndent" id="CSS-CSS2Properties-textIndent" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="textShadow" id="CSS-CSS2Properties-textShadow" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="textTransform" id="CSS-CSS2Properties-textTransform" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="top" id="CSS-CSS2Properties-top" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="unicodeBidi" id="CSS-CSS2Properties-unicodeBidi" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="verticalAlign" id="CSS-CSS2Properties-verticalAlign" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="visibility" id="CSS-CSS2Properties-visibility" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="voiceFamily" id="CSS-CSS2Properties-voiceFamily" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="volume" id="CSS-CSS2Properties-volume" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="whiteSpace" id="CSS-CSS2Properties-whiteSpace" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="widows" id="CSS-CSS2Properties-widows" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="width" id="CSS-CSS2Properties-width" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="wordSpacing" id="CSS-CSS2Properties-wordSpacing" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="DOMString" name="zIndex" id="CSS-CSS2Properties-zIndex" readonly="no">
<descr>
<p>See thein CSS2.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: Raised if the new value has a syntax error and is unparsable.</p>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</p>
</descr>
</exception>
</setraises>
</attribute>
</interface>
<interface name="NodeIterator" id="Traversal-NodeIterator" since="DOM Level 2">
<descr>
<p>
<code>Iterators</code>are used to step through a set of nodes, e.g. the set of nodes in a<code>NodeList</code>, the document subtree governed by a particular<code>Node</code>, the results of a query, or any other set of nodes. The set of nodes to be iterated is determined by the implementation of the<code>NodeIterator</code>. DOM Level 2 specifies a single<code>NodeIterator</code>implementation for document-order traversal of a document subtree. Instances of these iterators are created by calling<code>DocumentTraversal</code>
<code>.createNodeIterator()</code>.</p>
</descr>
<attribute id="Traversal-NodeIterator-root" name="root" type="Node" readonly="yes">
<descr>
<p>The root node of the<code>NodeIterator</code>, as specified when it was created.</p>
</descr>
</attribute>
<attribute id="Traversal-NodeIterator-whatToShow" name="whatToShow" type="unsigned long" readonly="yes">
<descr>
<p>This attribute determines which node types are presented via the iterator. The available set of constants is defined in the<code>NodeFilter</code>interface.Nodes not accepted by<code>whatToShow</code>will be skipped, but their children may still be considered. Note that this skip takes precedence over the filter, if any.</p>
</descr>
</attribute>
<attribute id="Traversal-NodeIterator-filter" name="filter" type="NodeFilter" readonly="yes">
<descr>
<p>The<code>NodeFilter</code>used to screen nodes.</p>
</descr>
</attribute>
<attribute id="Traversal-NodeIterator-expandEntityReferences" name="expandEntityReferences" type="boolean" readonly="yes">
<descr>
<p>The value of this flag determines whether the children of entity reference nodes are visible to the iterator. If false, theyand their<termref def="dt-descendant">descendants</termref>will be rejected. Note that this rejection takes precedence over<code>whatToShow</code>and the filter. Also note that this is currently the only situation where<code>NodeIterators</code>may reject a complete subtree rather than skipping individual nodes.</p>
<p/>
<p>To produce a view of the document that has entity references expanded and does not expose the entity reference node itself, use the<code>whatToShow</code>flags to hide the entity reference node and set<code>expandEntityReferences</code>to true when creating the iterator. To produce a view of the document that has entity reference nodes but no entity expansion, use the<code>whatToShow</code>flags to show the entity reference node and set<code>expandEntityReferences</code>to false.</p>
</descr>
</attribute>
<method name="nextNode" id="Traversal-NodeIterator-nextNode">
<descr>
<p>Returns the next node in the set and advances the position of the iterator in the set. After a<code>NodeIterator</code>is created, the first call to<code>nextNode()</code>returns the first node in the set.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The next<code>Node</code>in the set being iterated over, or<code>null</code>if there are no more members in that set.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if this method is called after the<code>detach</code>method was invoked.</p>
</descr>
</exception>
</raises>
</method>
<method name="previousNode" id="Traversal-NodeIterator-previousNode">
<descr>
<p>Returns the previous node in the set and moves the position of the<code>NodeIterator</code>backwards in the set.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The previous<code>Node</code>in the set being iterated over, or<code>null</code>if there are no more members in that set.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if this method is called after the<code>detach</code>method was invoked.</p>
</descr>
</exception>
</raises>
</method>
<method name="detach" id="Traversal-NodeIterator-detach">
<descr>
<p>Detaches the<code>NodeIterator</code>from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state. After<code>detach</code>has been invoked, calls to<code>nextNode</code>or<code>previousNode</code>will raise the exception INVALID_STATE_ERR.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="NodeFilter" id="Traversal-NodeFilter" since="DOM Level 2" role="special">
<descr>
<p>Filters are objects that know how to "filter out" nodes. If a<code>NodeIterator</code>or<code>TreeWalker</code>is given a<code>NodeFilter</code>, it applies the filter before it returns the next node. If the filter says to accept the node, the traversal logic returns it; otherwise, traversal looks for the next node and pretends that the node that was rejected was not there.</p>
<p>The DOM does not provide any filters.<code>NodeFilter</code>is just an interface that users can implement to provide their own filters.</p>
<p>
<code>NodeFilters</code>do not need to know how to traverse from node to node, nor do they need to know anything about the data structure that is being traversed. This makes it very easy to write filters, since the only thing they have to know how to do is evaluate a single node. One filter may be used with a number of different kinds of traversals, encouraging code reuse.</p>
</descr>
<group name="Constants returned by acceptNode" id="Traversal-NodeFilter-acceptNode-constants">
<descr>
<p>The following constants are returned by the acceptNode() method:</p>
</descr>
<constant name="FILTER_ACCEPT" type="short" value="1">
<descr>
<p>Accept the node. Navigation methods defined for<code>NodeIterator</code>or<code>TreeWalker</code>will return this node.</p>
</descr>
</constant>
<constant name="FILTER_REJECT" type="short" value="2">
<descr>
<p>Reject the node. Navigation methods defined for<code>NodeIterator</code>or<code>TreeWalker</code>will not return this node. For<code>TreeWalker</code>, the children of this node will also be rejected.<code>NodeIterators</code>treat this as a synonym for<code>FILTER_SKIP</code>.</p>
</descr>
</constant>
<constant name="FILTER_SKIP" type="short" value="3">
<descr>
<p>Skip this single node. Navigation methods defined for<code>NodeIterator</code>or<code>TreeWalker</code>will not return this node. For both<code>NodeIterator</code>and<code>TreeWalker</code>, the children of this node will still be considered.</p>
</descr>
</constant>
</group>
<group id="Traversal-NodeFilter-whatToShow-constants" name="Constants for whatToShow">
<descr>
<p>These are the available values for the<code>whatToShow</code>parameter used in<code>TreeWalkers</code>and<code>NodeIterators</code>. They are the same as the set of possible types for<code>Node</code>, and their values are derived by using a bit position corresponding to the value of<code>nodeType</code>for the equivalent node type.If a bit in<code>whatToShow</code>is set false, that will be taken as a request to skip over this type of node; the behavior in that case is similar to that of<code>FILTER_SKIP</code>.</p>
<p>Note that if node types greater than 32 are ever introduced, they may not be individually testable via<code>whatToShow</code>. If that need should arise, it can be handled by selecting<code>SHOW_ALL</code>together with an appropriate<code>NodeFilter</code>.</p>
</descr>
<constant name="SHOW_ALL" type="unsigned long" value="0xFFFFFFFF">
<descr>
<p>Show all<code>Nodes</code>.</p>
</descr>
</constant>
<constant name="SHOW_ELEMENT" type="unsigned long" value="0x00000001">
<descr>
<p>Show<code>Element</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_ATTRIBUTE" type="unsigned long" value="0x00000002">
<descr>
<p>Show<code>Attr</code>nodes. This is meaningful only when creating an iterator or tree-walker with an attribute node as its<code>root</code>; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</p>
</descr>
</constant>
<constant name="SHOW_TEXT" type="unsigned long" value="0x00000004">
<descr>
<p>Show<code>Text</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_CDATA_SECTION" type="unsigned long" value="0x00000008">
<descr>
<p>Show<code>CDATASection</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_ENTITY_REFERENCE" type="unsigned long" value="0x00000010">
<descr>
<p>Show<code>EntityReference</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_ENTITY" type="unsigned long" value="0x00000020">
<descr>
<p>Show<code>Entity</code>nodes. This is meaningful only when creating an iterator or tree-walker with an<code>Entity</code>node as its<code>root</code>; in this case, it means that the<code>Entity</code>node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</p>
</descr>
</constant>
<constant name="SHOW_PROCESSING_INSTRUCTION" type="unsigned long" value="0x00000040">
<descr>
<p>Show<code>ProcessingInstruction</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_COMMENT" type="unsigned long" value="0x00000080">
<descr>
<p>Show<code>Comment</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_DOCUMENT" type="unsigned long" value="0x00000100">
<descr>
<p>Show<code>Document</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_DOCUMENT_TYPE" type="unsigned long" value="0x00000200">
<descr>
<p>Show<code>DocumentType</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_DOCUMENT_FRAGMENT" type="unsigned long" value="0x00000400">
<descr>
<p>Show<code>DocumentFragment</code>nodes.</p>
</descr>
</constant>
<constant name="SHOW_NOTATION" type="unsigned long" value="0x00000800">
<descr>
<p>Show<code>Notation</code>nodes. This is meaningful only when creating an iterator or tree-walker with a<code>Notation</code>node as its<code>root</code>; in this case, it means that the<code>Notation</code>node will appear in the first position of the traversal. Since notations are not part of the document tree, they do not appear when traversing over the document tree.</p>
</descr>
</constant>
</group>
<method name="acceptNode" id="Traversal-NodeFilter-acceptNode">
<descr>
<p>Test whether a specified node is visible in the logical view of a<code>TreeWalker</code>or<code>NodeIterator</code>. This function will be called by the implementation of<code>TreeWalker</code>and<code>NodeIterator</code>; it is not normally called directly from user code. (Though you could do so if you wanted to use the same filter to guide your own application logic.)</p>
</descr>
<parameters>
<param name="n" type="Node" attr="in">
<descr>
<p>The node to check to see if it passes the filter or not.</p>
</descr>
</param>
</parameters>
<returns type="short">
<descr>
<p>a constant to determine whether the node is accepted, rejected, or skipped, as defined.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="TreeWalker" id="Traversal-TreeWalker" since="DOM Level 2">
<descr>
<p>
<code>TreeWalker</code>objects are used to navigate a document tree or subtree using the view of the document defined by their<code>whatToShow</code>flags and filter (if any). Any function which performs navigation using a<code>TreeWalker</code>will automatically support any view defined by a<code>TreeWalker</code>.</p>
<p>Omitting nodes from the logical view of a subtree can result in a structure that is substantially different from the same subtree in the complete, unfiltered document. Nodes that are<termref def="dt-sibling">siblings</termref>in the<code>TreeWalker</code>view may be children of different, widely separated nodes in the original view. For instance, consider a<code>NodeFilter</code>that skips all nodes except for Text nodes and the root node of a document. In the logical view that results, all text nodes will be<termref def="dt-sibling">siblings</termref>and appear as direct children of the root node, no matter how deeply nested the structure of the original document.</p>
</descr>
<attribute id="Traversal-TreeWalker-root" name="root" type="Node" readonly="yes">
<descr>
<p>The<code>root</code>node of the<code>TreeWalker</code>, as specified when it was created.</p>
</descr>
</attribute>
<attribute id="Traversal-TreeWalker-whatToShow" name="whatToShow" type="unsigned long" readonly="yes">
<descr>
<p>This attribute determines which node types are presented via the<code>TreeWalker</code>. The available set of constants is defined in the<code>NodeFilter</code>interface.Nodes not accepted by<code>whatToShow</code>will be skipped, but their children may still be considered. Note that this skip takes precedence over the filter, if any.</p>
</descr>
</attribute>
<attribute id="Traversal-TreeWalker-filter" name="filter" type="NodeFilter" readonly="yes">
<descr>
<p>The filter used to screen nodes.</p>
</descr>
</attribute>
<attribute id="Traversal-TreeWalker-expandEntityReferences" name="expandEntityReferences" type="boolean" readonly="yes">
<descr>
<p>The value of this flag determines whether the children of entity reference nodes are visible to the<code>TreeWalker</code>. If false, theyand their<termref def="dt-descendant">descendants</termref>will be rejected. Note that this rejection takes precedence over<code>whatToShow</code>and the filter, if any.</p>
<p>To produce a view of the document that has entity references expanded and does not expose the entity reference node itself, use the<code>whatToShow</code>flags to hide the entity reference node and set<code>expandEntityReferences</code>to true when creating the<code>TreeWalker</code>. To produce a view of the document that has entity reference nodes but no entity expansion, use the<code>whatToShow</code>flags to show the entity reference node and set<code>expandEntityReferences</code>to false.</p>
</descr>
</attribute>
<attribute id="Traversal-TreeWalker-currentNode" name="currentNode" type="Node" readonly="no">
<descr>
<p>The node at which the<code>TreeWalker</code>is currently positioned.</p>
<p>Alterations to the DOM tree may cause the current node to no longer be accepted by the<code>TreeWalker</code>'s associated filter.<code>currentNode</code>may also be explicitly set to any node, whether or not it is within the subtree specified by the<code>root</code>node or would be accepted by the filter and<code>whatToShow</code>flags. Further traversal occurs relative to<code>currentNode</code>even if it is not part of the current view, by applying the filters in the requested direction; if no traversal is possible,<code>currentNode</code>is not changed.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: Raised if an attempt is made to set<code>currentNode</code>to<code>null</code>.</p>
</descr>
</exception>
</setraises>
</attribute>
<method name="parentNode" id="Traversal-TreeWalker-parentNode">
<descr>
<p>Moves to and returns the closest visible<termref def="dt-ancestor">ancestor</termref>node of the current node. If the search for<code>parentNode</code>attempts to step upward from the<code>TreeWalker</code>'s<code>root</code>node, or if it fails to find a visible<termref def="dt-ancestor">ancestor</termref>node, this method retains the current position and returns<code>null</code>.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The new<termref def="dt-parent">parent</termref>node, or<code>null</code>if the current node has no parentin the<code>TreeWalker</code>'s logical view.</p>
</descr>
</returns>
<raises/>
</method>
<method name="firstChild" id="Traversal-TreeWalker-firstChild">
<descr>
<p>Moves the<code>TreeWalker</code>to the first visible<termref def="dt-child">child</termref>of the current node, and returns the new node. If the current node has no visible children, returns<code>null</code>, and retains the current node.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The new node, or<code>null</code>if the current node has no visible childrenin the<code>TreeWalker</code>'s logical view.</p>
</descr>
</returns>
<raises/>
</method>
<method name="lastChild" id="Traversal-TreeWalker-lastChild">
<descr>
<p>Moves the<code>TreeWalker</code>to the last visible<termref def="dt-child">child</termref>of the current node, and returns the new node. If the current node has no visible children, returns<code>null</code>, and retains the current node.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The new node, or<code>null</code>if the current node has no childrenin the<code>TreeWalker</code>'s logical view.</p>
</descr>
</returns>
<raises/>
</method>
<method name="previousSibling" id="Traversal-TreeWalker-previousSibling">
<descr>
<p>Moves the<code>TreeWalker</code>to the previous<termref def="dt-sibling">sibling</termref>of the current node, and returns the new node. If the current node has no visible previous<termref def="dt-sibling">sibling</termref>, returns<code>null</code>, and retains the current node.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The new node, or<code>null</code>if the current node has no previous<termref def="dt-sibling">sibling</termref>.in the<code>TreeWalker</code>'s logical view.</p>
</descr>
</returns>
<raises/>
</method>
<method name="nextSibling" id="Traversal-TreeWalker-nextSibling">
<descr>
<p>Moves the<code>TreeWalker</code>to the next<termref def="dt-sibling">sibling</termref>of the current node, and returns the new node. If the current node has no visible next<termref def="dt-sibling">sibling</termref>, returns<code>null</code>, and retains the current node.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The new node, or<code>null</code>if the current node has no next<termref def="dt-sibling">sibling</termref>.in the<code>TreeWalker</code>'s logical view.</p>
</descr>
</returns>
<raises/>
</method>
<method name="previousNode" id="Traversal-TreeWalker-previousNode">
<descr>
<p>Moves the<code>TreeWalker</code>to the previous visible node in document order relative to the current node, and returns the new node. If the current node has no previous node,or if the search for<code>previousNode</code>attempts to step upward from the<code>TreeWalker</code>'s<code>root</code>node,returns<code>null</code>, and retains the current node.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The new node, or<code>null</code>if the current node has no previous nodein the<code>TreeWalker</code>'s logical view.</p>
</descr>
</returns>
<raises/>
</method>
<method name="nextNode" id="Traversal-TreeWalker-nextNode">
<descr>
<p>Moves the<code>TreeWalker</code>to the next visible node in document order relative to the current node, and returns the new node. If the current node has no next node, or if the search for nextNode attempts to step upward from the<code>TreeWalker</code>'s<code>root</code>node, returns<code>null</code>, and retains the current node.</p>
</descr>
<parameters/>
<returns type="Node">
<descr>
<p>The new node, or<code>null</code>if the current node has no next nodein the<code>TreeWalker</code>'s logical view.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="DocumentTraversal" id="Traversal-Document" since="DOM Level 2">
<descr>
<p>
<code>DocumentTraversal</code>contains methods that create iterators and tree-walkers to traverse a node and its children in document order (depth first, pre-order traversal, which is equivalent to the order in which the start tags occur in the text representation of the document). In DOMs which support the Traversal feature,<code>DocumentTraversal</code>will be implemented by the same objects that implement the Document interface.</p>
</descr>
<method name="createNodeIterator" id="Traversal-NodeIteratorFactory-createNodeIterator">
<descr>
<p>Create a new<code>NodeIterator</code>over the subtree rooted at the specified node.</p>
</descr>
<parameters>
<param name="root" type="Node" attr="in">
<descr>
<p>The node which will be iterated together with its children. The iterator is initially positioned just before this node. The<code>whatToShow</code>flags and the filter, if any, are not considered when setting this position. The root must not be<code>null</code>.</p>
</descr>
</param>
<param name="whatToShow" type="unsigned long" attr="in">
<descr>
<p>This flag specifies which node types may appear in the logical view of the tree presented by the iterator. See the description of<code>NodeFilter</code>for the set of possible<code>SHOW_</code>values.</p>
<p>These flags can be combined using<code>OR</code>.</p>
</descr>
</param>
<param name="filter" type="NodeFilter" attr="in">
<descr>
<p>The<code>NodeFilter</code>to be used with this<code>TreeWalker</code>, or<code>null</code>to indicate no filter.</p>
</descr>
</param>
<param name="entityReferenceExpansion" type="boolean" attr="in">
<descr>
<p>The value of this flag determines whether entity reference nodes are expanded.</p>
</descr>
</param>
</parameters>
<returns type="NodeIterator">
<descr>
<p>The newly created<code>NodeIterator</code>.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: Raised if the specified<code>root</code>is<code>null</code>.</p>
</descr>
</exception>
</raises>
</method>
<method name="createTreeWalker" id="NodeIteratorFactory-createTreeWalker">
<descr>
<p>Create a new<code>TreeWalker</code>over the subtree rooted at the specified node.</p>
</descr>
<parameters>
<param name="root" type="Node" attr="in">
<descr>
<p>The node which will serve as the<code>root</code>for the<code>TreeWalker</code>. The<code>whatToShow</code>flags and the<code>NodeFilter</code>are not considered when setting this value; any node type will be accepted as the<code>root</code>. The<code>currentNode</code>of the<code>TreeWalker</code>is initialized to this node, whether or not it is visible. The<code>root</code>functions as a stopping point for traversal methods that look upward in the document structure, such as<code>parentNode</code>and nextNode. The<code>root</code>must not be<code>null</code>.</p>
</descr>
</param>
<param name="whatToShow" type="unsigned long" attr="in">
<descr>
<p>This flag specifies which node types may appear in the logical view of the tree presented by the tree-walker. See the description of<code>NodeFilter</code>for the set of possible SHOW_ values.</p>
<p>These flags can be combined using<code>OR</code>.</p>
</descr>
</param>
<param name="filter" type="NodeFilter" attr="in">
<descr>
<p>The<code>NodeFilter</code>to be used with this<code>TreeWalker</code>, or<code>null</code>to indicate no filter.</p>
</descr>
</param>
<param name="entityReferenceExpansion" type="boolean" attr="in">
<descr>
<p>If this flag is false, the contents of<code>EntityReference</code>nodes are not presented in the logical view.</p>
</descr>
</param>
</parameters>
<returns type="TreeWalker">
<descr>
<p>The newly created<code>TreeWalker</code>.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: Raised if the specified<code>root</code>is<code>null</code>.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="Range" id="Level-2-Range-idl" since="DOM Level 2">
<descr/>
<attribute name="startContainer" type="Node" readonly="yes" id="Level-2-Range-attr-startParent">
<descr>
<p>Node within which the Range begins</p>
</descr>
<getraises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</getraises>
</attribute>
<attribute name="startOffset" type="long" readonly="yes" id="Level-2-Range-attr-startOffset">
<descr>
<p>Offset within the starting node of the Range.</p>
</descr>
<getraises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</getraises>
</attribute>
<attribute name="endContainer" type="Node" readonly="yes" id="Level-2-Range-attr-endParent">
<descr>
<p>Node within which the Range ends</p>
</descr>
<getraises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</getraises>
</attribute>
<attribute name="endOffset" type="long" readonly="yes" id="Level-2-Range-attr-endOffset">
<descr>
<p>Offset within the ending node of the Range.</p>
</descr>
<getraises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</getraises>
</attribute>
<attribute name="collapsed" type="boolean" readonly="yes" id="Level-2-Range-attr-collapsed">
<descr>
<p>TRUE if the Range is collapsed</p>
</descr>
<getraises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</getraises>
</attribute>
<attribute name="commonAncestorContainer" type="Node" readonly="yes" id="Level-2-Range-attr-commonParent">
<descr>
<p>The<termref def="dt-deepest">deepest</termref>common<termref def="td-ancestor-container">ancestor container</termref>of the Range's two boundary-points.</p>
</descr>
<getraises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</getraises>
</attribute>
<method name="setStart" id="Level2-Range-method-setStart">
<descr>
<p>Sets the attributes describing the start of the Range.</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>The<code>refNode</code>value. This parameter must be different from<code>null</code>.</p>
</descr>
</param>
<param name="offset" type="long" attr="in">
<descr>
<p>The<code>startOffset</code>value.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if<code>refNode</code>or an ancestor of<code>refNode</code>is an Entity, Notation, or DocumentType node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if<code>offset</code>is negative or greater than the number of child units in<code>refNode</code>. Child units are<termref def="dt-16-bit-unit">16-bit units</termref>if<code>refNode</code>is a type of CharacterData node (e.g., a Text or Comment node) or a ProcessingInstruction node. Child units are Nodes in all other cases.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="setEnd" id="Level2-Range-method-setEnd">
<descr>
<p>Sets the attributes describing the end of a Range.</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>The<code>refNode</code>value. This parameter must be different from<code>null</code>.</p>
</descr>
</param>
<param name="offset" type="long" attr="in">
<descr>
<p>The<code>endOffset</code>value.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if<code>refNode</code>or an ancestor of<code>refNode</code>is an Entity, Notation, or DocumentType node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if<code>offset</code>is negative or greater than the number of child units in<code>refNode</code>. Child units are<termref def="dt-16-bit-unit">16-bit units</termref>if<code>refNode</code>is a type of CharacterData node (e.g., a Text or Comment node) or a ProcessingInstruction node. Child units are Nodes in all other cases.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="setStartBefore" id="Level2-Range-setStartBefore">
<descr>
<p>Sets the start position to be before a node</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>Range starts before<code>refNode</code>
</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if the root container of<code>refNode</code>is not an Attr, Document, or DocumentFragment node or if<code>refNode</code>is a Document, DocumentFragment, Attr, Entity, or Notation node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="setStartAfter" id="Level2-Range-method-setStartAfter">
<descr>
<p>Sets the start position to be after a node</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>Range starts after<code>refNode</code>
</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if the root container of<code>refNode</code>is not an Attr, Document, or DocumentFragment node or if<code>refNode</code>is a Document, DocumentFragment, Attr, Entity, or Notation node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="setEndBefore" id="Level2-Range-method-setEndBefore">
<descr>
<p>Sets the end position to be before a node.</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>Range ends before<code>refNode</code>
</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if the root container of<code>refNode</code>is not an Attr, Document, or DocumentFragment node or if<code>refNode</code>is a Document, DocumentFragment, Attr, Entity, or Notation node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="setEndAfter" id="Level2-Range-method-setEndAfter">
<descr>
<p>Sets the end of a Range to be after a node</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>Range ends after<code>refNode</code>.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if the root container of<code>refNode</code>is not an Attr, Document or DocumentFragment node or if<code>refNode</code>is a Document, DocumentFragment, Attr, Entity, or Notation node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="collapse" id="Level2-Range-method-collapse">
<descr>
<p>Collapse a Range onto one of its boundary-points</p>
</descr>
<parameters>
<param name="toStart" type="boolean" attr="in">
<descr>
<p>If TRUE, collapses the Range onto its start; if FALSE, collapses it onto its end.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="selectNode" id="Level2-Range-method-selectNode">
<descr>
<p>Select a node and its contents</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>The node to select.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if an ancestor of<code>refNode</code>is an Entity, Notation or DocumentType node or if<code>refNode</code>is a Document, DocumentFragment, Attr, Entity, or Notation node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="selectNodeContents" id="Level2-Range-method-selectNodeContents">
<descr>
<p>Select the contents within a node</p>
</descr>
<parameters>
<param name="refNode" type="Node" attr="in">
<descr>
<p>Node to select from</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if<code>refNode</code>or an ancestor of<code>refNode</code>is an Entity, Notation or DocumentType node.</p>
</descr>
</exception>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<group id="Level2-Range-compareHow" name="CompareHow">
<descr>
<p>Passed as a parameter to the<code>compareBoundaryPoints</code>method.</p>
</descr>
<constant name="START_TO_START" type="unsigned short" value="0">
<descr>
<p>Compare start boundary-point of<code>sourceRange</code>to start boundary-point of Range on which<code>compareBoundaryPoints</code>is invoked.</p>
</descr>
</constant>
<constant name="START_TO_END" type="unsigned short" value="1">
<descr>
<p>Compare start boundary-point of<code>sourceRange</code>to end boundary-point of Range on which<code>compareBoundaryPoints</code>is invoked.</p>
</descr>
</constant>
<constant name="END_TO_END" type="unsigned short" value="2">
<descr>
<p>Compare end boundary-point of<code>sourceRange</code>to end boundary-point of Range on which<code>compareBoundaryPoints</code>is invoked.</p>
</descr>
</constant>
<constant name="END_TO_START" type="unsigned short" value="3">
<descr>
<p>Compare end boundary-point of<code>sourceRange</code>to start boundary-point of Range on which<code>compareBoundaryPoints</code>is invoked.</p>
</descr>
</constant>
</group>
<method name="compareBoundaryPoints" id="Level2-Range-method-compareBoundaryPoints">
<descr>
<p>Compare the boundary-points of two Ranges in a document.</p>
</descr>
<parameters>
<param name="how" type="unsigned short" attr="in">
<descr>
<p>A code representing the type of comparison, as defined above.</p>
</descr>
</param>
<param name="sourceRange" type="Range" attr="in">
<descr>
<p>The<code>Range</code>on which this current<code>Range</code>is compared to.</p>
</descr>
</param>
</parameters>
<returns type="short">
<descr>
<p>-1, 0 or 1 depending on whether the corresponding boundary-point of the Range is respectively before, equal to, or after the corresponding boundary-point of<code>sourceRange</code>.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>WRONG_DOCUMENT_ERR: Raised if the two Ranges are not in the same Document or DocumentFragment.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="deleteContents" id="Level2-Range-method-deleteContents">
<descr>
<p>Removes the contents of a Range from the containing document or document fragment without returning a reference to the removed content.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if any portion of the content of the Range is read-only or any of the nodes that contain any of the content of the Range are read-only.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="extractContents" id="Level2-Range-method-extractContents">
<descr>
<p>Moves the contents of a Range from the containing document or document fragment to a new DocumentFragment.</p>
</descr>
<parameters/>
<returns type="DocumentFragment">
<descr>
<p>A DocumentFragment containing the extracted contents.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if any portion of the content of the Range is read-only or any of the nodes which contain any of the content of the Range are read-only.</p>
<p>HIERARCHY_REQUEST_ERR: Raised if a DocumentType node would be extracted into the new DocumentFragment.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="cloneContents" id="Level2-Range-method-cloneContents">
<descr>
<p>Duplicates the contents of a Range</p>
</descr>
<parameters/>
<returns type="DocumentFragment">
<descr>
<p>A DocumentFragment that contains content equivalent to this Range.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: Raised if a DocumentType node would be extracted into the new DocumentFragment.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="insertNode" id="Level2-Range-method-insertNode">
<descr>
<p>Inserts a node into the Document or DocumentFragment at the start of the Range. If the container is a Text node, this will be split at the start of the Range (as if the Text node's splitText method was performed at the insertion point) and the insertion will occur between the two resulting Text nodes. Adjacent Text nodes will not be automatically merged. If the node to be inserted is a DocumentFragment node, the children will be inserted rather than the DocumentFragment node itself.</p>
</descr>
<parameters>
<param name="newNode" type="Node" attr="in">
<descr>
<p>The node to insert at the start of the Range</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if an<termref def="td-ancestor-container">ancestor container</termref>of the start of the Range is read-only.</p>
<p>WRONG_DOCUMENT_ERR: Raised if<code>newNode</code>and the<termref def="td-container">container</termref>of the start of the Range were not created from the same document.</p>
<p>HIERARCHY_REQUEST_ERR: Raised if the<termref def="td-container">container</termref>of the start of the Range is of a type that does not allow children of the type of<code>newNode</code>or if<code>newNode</code>is an ancestor of the<termref def="td-container">container</termref>.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
<exception name="RangeException">
<descr>
<p>INVALID_NODE_TYPE_ERR: Raised if<code>newNode</code>is an Attr, Entity, Notation, or Document node.</p>
</descr>
</exception>
</raises>
</method>
<method name="surroundContents" id="Level2-Range-method-surroundContents">
<descr>
<p>Reparents the contents of the Range to the given node and inserts the node at the position of the start of the Range.</p>
</descr>
<parameters>
<param name="newParent" type="Node" attr="in">
<descr>
<p>The node to surround the contents with.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if an<termref def="td-ancestor-container">ancestor container</termref>of either boundary-point of the Range is read-only.</p>
<p>WRONG_DOCUMENT_ERR: Raised if<code>newParent</code>and the<termref def="td-container">container</termref>of the start of the Range were not created from the same document.</p>
<p>HIERARCHY_REQUEST_ERR: Raised if the<termref def="td-container">container</termref>of the start of the Range is of a type that does not allow children of the type of<code>newParent</code>or if<code>newParent</code>is an ancestor of the<termref def="td-container">container</termref>or if<code>node</code>would end up with a child node of a type not allowed by the type of<code>node</code>.</p>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
<exception name="RangeException">
<descr>
<p>BAD_BOUNDARYPOINTS_ERR: Raised if the Range<termref def="td-partially-selected">partially selects</termref>a non-text node.</p>
<p>INVALID_NODE_TYPE_ERR: Raised if<code>node</code>is an Attr, Entity, DocumentType, Notation, Document, or DocumentFragment node.</p>
</descr>
</exception>
</raises>
</method>
<method name="cloneRange" id="Level2-Range-method-clone">
<descr>
<p>Produces a new Range whose boundary-points are equal to the boundary-points of the Range.</p>
</descr>
<parameters/>
<returns type="Range">
<descr>
<p>The duplicated Range.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="toString" id="Level2-Range-method-toString">
<descr>
<p>Returns the contents of a Range as a string. This string contains only the data characters, not any markup.</p>
</descr>
<parameters/>
<returns type="DOMString">
<descr>
<p>The contents of the Range.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
<method name="detach" id="Level2-Range-method-detach">
<descr>
<p>Called to indicate that the Range is no longer in use and that the implementation may relinquish any resources associated with this Range. Subsequent calls to any methods or attribute getters on this Range will result in a<code>DOMException</code>being thrown with an error code of<code>INVALID_STATE_ERR</code>.</p>
</descr>
<parameters/>
<returns type="void">
<descr/>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INVALID_STATE_ERR: Raised if<code>detach()</code>has already been invoked on this object.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="DocumentRange" id="Level-2-DocumentRange-idl" since="DOM Level 2">
<descr/>
<method name="createRange" id="Level2-DocumentRange-method-createRange">
<descr>
<p>This interface can be obtained from the object implementing the<code>Document</code>interface using binding-specific casting methods.</p>
</descr>
<parameters/>
<returns type="Range">
<descr>
<p>The initial state of the Range returned from this method is such that both of its boundary-points are positioned at the beginning of the corresponding Document, before any content. The Range returned can only be used to select content associated with this Document, or with DocumentFragments and Attrs for which this Document is the<code>ownerDocument</code>.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<exception name="RangeException" id="RangeException" since="DOM Level 2">
<descr>
<p>Range operations may throw a<code>RangeException</code>as specified in their method descriptions.</p>
</descr>
<component id="RangeExceptionComponent" name="code">
<typename>unsigned short</typename>
</component>
</exception>
<group id="RangeExceptionCode" name="RangeExceptionCode">
<descr>
<p>An integer indicating the type of error generated.</p>
</descr>
<constant name="BAD_BOUNDARYPOINTS_ERR" type="unsigned short" value="1">
<descr>
<p>If the boundary-points of a Range do not meet specific requirements.</p>
</descr>
</constant>
<constant name="INVALID_NODE_TYPE_ERR" type="unsigned short" value="2">
<descr>
<p>If the<termref def="td-container">container</termref>of an boundary-point of a Range is being set to either a node of an invalid type or a node with an ancestor of an invalid type.</p>
</descr>
</constant>
</group>
<interface name="HTMLCollection" id="ID-75708506">
<descr>
<p>An<code>HTMLCollection</code>is a list of nodes. An individual node may be accessed by either ordinal index or the node's<code>name</code>or<code>id</code>attributes.</p>
<note>
<p>Collections in the HTML DOM are assumed to be<termref def="dt-live">live</termref>meaning that they are automatically updated when the underlying document is changed.</p>
</note>
</descr>
<attribute readonly="yes" type="unsigned long" name="length" id="ID-40057551">
<descr>
<p>This attribute specifies the length or<emph>size</emph>of the list.</p>
</descr>
</attribute>
<method name="item" id="ID-33262535">
<descr>
<p>This method retrieves a node specified by ordinal index. Nodes are numbered in tree order (depth-first traversal order).</p>
</descr>
<parameters>
<param id="ID-3496656" name="index" type="unsigned long" attr="in">
<descr>
<p>The index of the node to be fetched. The index origin is<code>0</code>.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The<code>Node</code>at the corresponding position upon success. A value of<code>null</code>is returned if the index is out of range.</p>
</descr>
</returns>
<raises/>
</method>
<method name="namedItem" id="ID-21069976">
<descr>
<p>This method retrieves a<code>Node</code>using a name. With<bibref ref="HTML40"/>documents, it first searches for a<code>Node</code>with a matching<code>id</code>attribute. If it doesn't find one, it then searches for a<code>Node</code>with a matching<code>name</code>attribute, but only on those elements that are allowed a name attribute. With<bibref ref="XHTML10"/>documents, this method only searches for<code>Nodes</code>with a matching<code>id</code>attribute. This method is case insensitive in HTML documents and case sensitive in XHTML documents.</p>
</descr>
<parameters>
<param id="ID-76682631" name="name" type="DOMString" attr="in">
<descr>
<p>The name of the<code>Node</code>to be fetched.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The<code>Node</code>with a<code>name</code>or<code>id</code>attribute whose value corresponds to the specified string. Upon failure (e.g., no node with this name exists), returns<code>null</code>.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLOptionsCollection" id="HTMLOptionsCollection" since="DOM Level 2">
<descr>
<p>An<code>HTMLOptionsCollection</code>is a list of nodes representing HTML option element. An individual node may be accessed by either ordinal index or the node's<code>name</code>or<code>id</code>attributes.</p>
<note>
<p>Collections in the HTML DOM are assumed to be<termref def="dt-live">live</termref>meaning that they are automatically updated when the underlying document is changed.</p>
</note>
</descr>
<attribute type="unsigned long" name="length" id="HTMLOptionsCollection-length" readonly="no">
<descr>
<p>This attribute specifies the length or<emph>size</emph>of the list.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: if setting the length is not allowed by the implementation.</p>
</descr>
</exception>
</setraises>
</attribute>
<method name="item" id="HTMLOptionsCollection-item">
<descr>
<p>This method retrieves a node specified by ordinal index. Nodes are numbered in tree order (depth-first traversal order).</p>
</descr>
<parameters>
<param id="HTMLOptionsCollection-item-index" name="index" type="unsigned long" attr="in">
<descr>
<p>The index of the node to be fetched. The index origin is 0.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The<code>Node</code>at the corresponding position upon success. A value of<code>null</code>is returned if the index is out of range.</p>
</descr>
</returns>
<raises/>
</method>
<method name="namedItem" id="HTMLOptionsCollection-namedItem">
<descr>
<p>This method retrieves a<code>Node</code>using a name. It first searches for a<code>Node</code>with a matching<code>id</code>attribute. If it doesn't find one, it then searches for a<code>Node</code>with a matching<code>name</code>attribute, but only on those elements that are allowed a name attribute. This method is case insensitive in HTML documents and case sensitive in XHTML documents.</p>
</descr>
<parameters>
<param id="HTMLOptionsCollection-namedItem-name" name="name" type="DOMString" attr="in">
<descr>
<p>The name of the<code>Node</code>to be fetched.</p>
</descr>
</param>
</parameters>
<returns type="Node">
<descr>
<p>The<code>Node</code>with a<code>name</code>or<code>id</code>attribute whose value corresponds to the specified string. Upon failure (e.g., no node with this name exists), returns<code>null</code>.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLDocument" inherits="Document" id="ID-26809268">
<descr>
<p>An<code>HTMLDocument</code>is the root of the HTML hierarchy and holds the entire content. Besides providing access to the hierarchy, it also provides some<termref def="dt-convenience">convenience</termref>methods for accessing certain sets of information from the document.</p>
<p>The following properties have been deprecated in favor of the corresponding ones for the<code>BODY</code>element:</p>
<ulist>
<item>
<p>alinkColor</p>
</item>
<item>
<p>background</p>
</item>
<item>
<p>bgColor</p>
</item>
<item>
<p>fgColor</p>
</item>
<item>
<p>linkColor</p>
</item>
<item>
<p>vlinkColor</p>
</item>
</ulist>
<note>
<p>In DOM Level 2, the method<code>getElementById</code>is inherited from the<code>Document</code>interface where it was moved to.</p>
</note>
</descr>
<attribute type="DOMString" name="title" id="ID-18446827" readonly="no">
<descr>
<p>The title of a document as specified by the<code>TITLE</code>element in the head of the document.</p>
</descr>
</attribute>
<attribute readonly="yes" type="DOMString" name="referrer" id="ID-95229140">
<descr>
<p>Returns the URI<bibref ref="RFC2396"/>of the page that linked to this page. The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark).</p>
</descr>
</attribute>
<attribute readonly="yes" type="DOMString" name="domain" id="ID-2250147">
<descr>
<p>The domain name of the server that served the document, or<code>null</code>if the server cannot be identified by a domain name.</p>
</descr>
</attribute>
<attribute readonly="yes" type="DOMString" name="URL" id="ID-46183437">
<descr>
<p>The absolute URI<bibref ref="RFC2396"/>of the document.</p>
</descr>
</attribute>
<attribute type="HTMLElement" name="body" id="ID-56360201" readonly="no">
<descr>
<p>The element that contains the content for the document. In documents with<code>BODY</code>contents, returns the<code>BODY</code>element. In frameset documents, this returns the outermost<code>FRAMESET</code>element.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="images" id="ID-90379117">
<descr>
<p>A collection of all the<code>IMG</code>elements in a document. The behavior is limited to<code>IMG</code>elements for backwards compatibility.</p>
<note>
<p>As suggested by<bibref ref="HTML40"/>, to include images, authors may use the<code>OBJECT</code>element or the<code>IMG</code>element. Therefore, it is recommended not to use this attribute to find the images in the document but<code>getElementsByTagName</code>with HTML 4.01 or<code>getElementsByTagNameNS</code>with XHTML 1.0.</p>
</note>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="applets" id="ID-85113862">
<descr>
<p>A collection of all the<code>OBJECT</code>elements that include applets and<code>APPLET</code>(<emph>deprecated</emph>) elements in a document.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="links" id="ID-7068919">
<descr>
<p>A collection of all<code>AREA</code>elements and anchor (<code>A</code>) elements in a document with a value for the<code>href</code>attribute.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="forms" id="ID-1689064">
<descr>
<p>A collection of all the forms of a document.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="anchors" id="ID-7577272">
<descr>
<p>A collection of all the anchor (<code>A</code>) elements in a document with a value for the<code>name</code>attribute.</p>
<note>
<p>For reasons of backward compatibility, the returned set of anchors only contains those anchors created with the<code>name</code>attribute, not those created with the<code>id</code>attribute. Note that in<bibref ref="XHTML10"/>, the<code>name</code>attribute (see) has no semantics and is only present for legacy user agents: the<code>id</code>attribute is used instead. Users should prefer the iterator mechanisms provided by<bibref ref="DOMTraversal-inf"/>instead.</p>
</note>
</descr>
</attribute>
<attribute type="DOMString" name="cookie" id="ID-8747038" readonly="no">
<descr>
<p>This mutable string attribute denotes persistent state information that (1) is associated with the current frame or document and (2) is composed of information described by the<code>cookies</code>non-terminal of<bibref ref="CookieRef"/>, Section 4.2.2.</p>
<p>If no persistent state information is available for the current frame or document document, then this property's value is an empty string.</p>
<p>When this attribute is read, all cookies are returned as a single string, with each cookie's name-value pair concatenated into a list of name-value pairs, each list item being separated by a ';' (semicolon).</p>
<p>When this attribute is set, the value it is set to should be a string that adheres to the<code>cookie</code>non-terminal of<bibref ref="CookieRef"/>; that is, it should be a single name-value pair followed by zero or more cookie attribute values. If no domain attribute is specified, then the domain attribute for the new value defaults to the host portion of an absolute URI<bibref ref="RFC2396"/>of the current frame or document. If no path attribute is specified, then the path attribute for the new value defaults to the absolute path portion of the URI<bibref ref="RFC2396"/>of the current frame or document. If no max-age attribute is specified, then the max-age attribute for the new value defaults to a user agent defined value. If a cookie with the specified name is already associated with the current frame or document, then the new value as well as the new attributes replace the old value and attributes. If a max-age attribute of 0 is specified for the new value, then any existing cookies of the specified name are removed from the cookie storage.</p>
<note>
<p>See<bibref ref="CookieRef"/>for the semantics of persistent state item attribute value pairs.</p>
</note>
<note>
<p>The precise nature of a user agent session is not defined by this specification.</p>
</note>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>SYNTAX_ERR: If the new value does not adhere to the cookie syntax specified by<bibref ref="CookieRef"/>.</p>
</descr>
</exception>
</setraises>
</attribute>
<method name="open" id="ID-72161170">
<descr>
<p>Open a document stream for writing. If a document exists in the target, this method clears it.</p>
<note>
<p>This method and the ones following allow a user to add to or replace the structure model of a document using strings of unparsed HTML. At the time of writing alternate methods for providing similar functionality for both HTML and XML documents were being considered (see<bibref ref="DOMLS"/>).</p>
</note>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="close" id="ID-98948567">
<descr>
<p>Closes a document stream opened by<code>open()</code>and forces rendering.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="write" id="ID-75233634">
<descr>
<p>Write a string of text to a document stream opened by<code>open()</code>. Note that the function will produce a document which is not necessarily driven by a DTD and therefore might be produce an invalid result in the context of the document.</p>
</descr>
<parameters>
<param id="ID-68980829" name="text" type="DOMString" attr="in">
<descr>
<p>The string to be parsed into some structure in the document structure model.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="writeln" id="ID-35318390">
<descr>
<p>Write a string of text followed by a newline character to a document stream opened by<code>open()</code>. Note that the function will produce a document which is not necessarily driven by a DTD and therefore might be produce an invalid result in the context of the document</p>
</descr>
<parameters>
<param id="ID-19167591" name="text" type="DOMString" attr="in">
<descr>
<p>The string to be parsed into some structure in the document structure model.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="getElementsByName" id="ID-71555259">
<descr>
<p>With<bibref ref="HTML40"/>documents, this method returns the (possibly empty) collection of elements whose<code>name</code>value is given by<code>elementName</code>. In<bibref ref="XHTML10"/>documents, this methods only return the (possibly empty) collection of form controls with matching name. This method is case sensitive.</p>
</descr>
<parameters>
<param id="ID-81610098" name="elementName" type="DOMString" attr="in">
<descr>
<p>The<code>name</code>attribute value for an element.</p>
</descr>
</param>
</parameters>
<returns type="NodeList">
<descr>
<p>The matching elements.</p>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLElement" inherits="Element" id="ID-58190037">
<descr>
<p>All HTML element interfaces derive from this class. Elements that only expose the HTML core attributes are represented by the base<code>HTMLElement</code>interface. These elements are as follows:</p>
<ulist>
<item>
<p>special: SUB, SUP, SPAN, BDO</p>
</item>
<item>
<p>font: TT, I, B, U, S, STRIKE, BIG, SMALL</p>
</item>
<item>
<p>phrase: EM, STRONG, DFN, CODE, SAMP, KBD, VAR, CITE, ACRONYM, ABBR</p>
</item>
<item>
<p>list: DD, DT</p>
</item>
<item>
<p>NOFRAMES, NOSCRIPT</p>
</item>
<item>
<p>ADDRESS, CENTER</p>
</item>
</ulist>
<note>
<p>The<code>style</code>attribute of an HTML element is accessible through the<code>ElementCSSInlineStyle</code>interface which is defined in the CSS module<bibref ref="DOMStyle-inf"/>.</p>
</note>
</descr>
<attribute type="DOMString" name="id" id="ID-63534901" readonly="no">
<descr>
<p>The element's identifier. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="title" id="ID-78276800" readonly="no">
<descr>
<p>The element's advisory title. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="lang" id="ID-59132807" readonly="no">
<descr>
<p>Language code defined in RFC 1766. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="dir" id="ID-52460740" readonly="no">
<descr>
<p>Specifies the base direction of directionally neutral text and the directionality of tables. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="className" id="ID-95362176" readonly="no">
<descr>
<p>The class attribute of the element. This attribute has been renamed due to conflicts with the "class" keyword exposed by many languages. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLHtmlElement" inherits="HTMLElement" id="ID-33759296">
<descr>
<p>Root of an HTML document. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="version" id="ID-9383775" readonly="no">
<descr>
<p>Version information about the document's DTD. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLHeadElement" inherits="HTMLElement" id="ID-77253168">
<descr>
<p>Document head information. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="profile" id="ID-96921909" readonly="no">
<descr>
<p>URI<bibref ref="RFC2396"/>designating a metadata profile. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLLinkElement" inherits="HTMLElement" id="ID-35143001">
<descr>
<p>The<code>LINK</code>element specifies a link to an external resource, and defines this document's relationship to that resource (or vice versa). See thein HTML 4.01 (see also the<code>LinkStyle</code>interface in the StyleSheet module<bibref ref="DOMStyle-inf"/>).</p>
</descr>
<attribute type="boolean" name="disabled" id="ID-87355129" readonly="no">
<descr>
<p>Enables/disables the link. This is currently only used for style sheet links, and may be used to activate or deactivate style sheets.</p>
</descr>
</attribute>
<attribute type="DOMString" name="charset" id="ID-63954491" readonly="no">
<descr>
<p>The character encoding of the resource being linked to. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="href" id="ID-33532588" readonly="no">
<descr>
<p>The URI<bibref ref="RFC2396"/>of the linked resource. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="hreflang" id="ID-85145682" readonly="no">
<descr>
<p>Language code of the linked resource. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="media" id="ID-75813125" readonly="no">
<descr>
<p>Designed for use with one or more target media. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="rel" id="ID-41369587" readonly="no">
<descr>
<p>Forward link type. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="rev" id="ID-40715461" readonly="no">
<descr>
<p>Reverse link type. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="target" id="ID-84183095" readonly="no">
<descr>
<p>Frame to render the resource in. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-32498296" readonly="no">
<descr>
<p>Advisory content type. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLTitleElement" inherits="HTMLElement" id="ID-79243169">
<descr>
<p>The document title. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="text" id="ID-77500413" readonly="no">
<descr>
<p>The specified title as a string.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLMetaElement" inherits="HTMLElement" id="ID-37041454">
<descr>
<p>This contains generic meta-information about the document. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="content" id="ID-87670826" readonly="no">
<descr>
<p>Associated information. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="httpEquiv" id="ID-77289449" readonly="no">
<descr>
<p>HTTP response header name<bibref ref="RFC2616"/>. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-31037081" readonly="no">
<descr>
<p>Meta information name. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="scheme" id="ID-35993789" readonly="no">
<descr>
<p>Select form of content. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLBaseElement" inherits="HTMLElement" id="ID-73629039">
<descr>
<p>Document base URI<bibref ref="RFC2396"/>. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="href" id="ID-65382887" readonly="no">
<descr>
<p>The base URI<bibref ref="RFC2396"/>. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="target" id="ID-73844298" readonly="no">
<descr>
<p>The default target frame. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLIsIndexElement" inherits="HTMLElement" id="ID-85283003">
<descr>
<p>This element is used for single-line text input. See thein HTML 4.01. This element is deprecated in HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-87069980">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="prompt" id="ID-33589862" readonly="no">
<descr>
<p>The prompt message. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLStyleElement" inherits="HTMLElement" id="ID-16428977">
<descr>
<p>Style information. See thein HTML 4.01, the CSS module<bibref ref="DOMStyle"/>and the<code>LinkStyle</code>interface in the StyleSheets module<bibref ref="DOMStyle-inf"/>.</p>
</descr>
<attribute type="boolean" name="disabled" id="ID-51162010" readonly="no">
<descr>
<p>Enables/disables the style sheet.</p>
</descr>
</attribute>
<attribute type="DOMString" name="media" id="ID-76412738" readonly="no">
<descr>
<p>Designed for use with one or more target media. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-22472002" readonly="no">
<descr>
<p>The content type of the style sheet language. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLBodyElement" inherits="HTMLElement" id="ID-62018039">
<descr>
<p>The HTML document body. This element is always present in the DOM API, even if the tags are not present in the source document. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="aLink" id="ID-59424581" readonly="no">
<descr>
<p>Color of active links (after mouse-button down, but before mouse-button up). See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="background" id="ID-37574810" readonly="no">
<descr>
<p>URI<bibref ref="RFC2396"/>of the background texture tile image. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="bgColor" id="ID-24940084" readonly="no">
<descr>
<p>Document background color. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="link" id="ID-7662206" readonly="no">
<descr>
<p>Color of links that are not active and unvisited. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="text" id="ID-73714763" readonly="no">
<descr>
<p>Document text color. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="vLink" id="ID-83224305" readonly="no">
<descr>
<p>Color of links that have been visited by the user. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLFormElement" inherits="HTMLElement" id="ID-40002357">
<descr>
<p>The<code>FORM</code>element encompasses behavior similar to a collection and an element. It provides direct access to the contained form controls as well as the attributes of the form element. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLCollection" name="elements" id="ID-76728479">
<descr>
<p>Returns a collection of all form control elements in the form.</p>
</descr>
</attribute>
<attribute readonly="yes" type="long" name="length" id="HTML-HTMLFormElement-length">
<descr>
<p>The number of form controls in the form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-22051454" readonly="no">
<descr>
<p>Names the form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="acceptCharset" id="ID-19661795" readonly="no">
<descr>
<p>List of character sets supported by the server. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="action" id="ID-74049184" readonly="no">
<descr>
<p>Server-side form handler. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="enctype" id="ID-84227810" readonly="no">
<descr>
<p>The content type of the submitted form, generally "application/x-www-form-urlencoded". See thein HTML 4.01.</p>
<note>
<p>The onsubmit even handler is not guaranteed to be triggered when invoking this method. The behavior is inconsistent for historical reasons and authors should not rely on a particular one.</p>
</note>
</descr>
</attribute>
<attribute type="DOMString" name="method" id="ID-82545539" readonly="no">
<descr>
<p>HTTP method<bibref ref="RFC2616"/>used to submit form. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="target" id="ID-6512890" readonly="no">
<descr>
<p>Frame to render the resource in. See thein HTML 4.01.</p>
</descr>
</attribute>
<method name="submit" id="ID-76767676">
<descr>
<p>Submits the form. It performs the same action as a submit button.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="reset" id="ID-76767677">
<descr>
<p>Restores a form element's default values. It performs the same action as a reset button.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLSelectElement" inherits="HTMLElement" id="ID-94282980">
<descr>
<p>The select element allows the selection of an option. The contained options can be directly accessed through the select element as a collection. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="DOMString" name="type" id="ID-58783172">
<descr>
<p>The type of this form control. This is the string "select-multiple" when the multiple attribute is<code>true</code>and the string "select-one" when<code>false</code>.</p>
</descr>
</attribute>
<attribute type="long" name="selectedIndex" id="ID-85676760" readonly="no">
<descr>
<p>The ordinal index of the selected option, starting from 0. The value -1 is returned if no element is selected. If multiple options are selected, the index of the first selected option is returned.</p>
</descr>
</attribute>
<attribute type="DOMString" name="value" id="ID-59351919" readonly="no">
<descr>
<p>The current form control value (i.e. the value of the currently selected option), if multiple options are selected this is the value of the first selected option.</p>
</descr>
</attribute>
<attribute type="unsigned long" name="length" id="ID-5933486" version="DOM Level 2" readonly="no">
<descr>
<p>The number of options in this<code>SELECT</code>.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>NOT_SUPPORTED_ERR: if setting the length is not allowed by the implementation.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-20489458">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLOptionsCollection" name="options" id="ID-30606413" version="DOM Level 2">
<descr>
<p>The collection of<code>OPTION</code>elements contained by this element.</p>
</descr>
</attribute>
<attribute type="boolean" name="disabled" id="ID-79102918" readonly="no">
<descr>
<p>The control is unavailable in this context. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="multiple" id="ID-13246613" readonly="no">
<descr>
<p>If true, multiple<code>OPTION</code>elements may be selected in this<code>SELECT</code>. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-41636323" readonly="no">
<descr>
<p>Form control or object name when submitted with a form. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="size" id="ID-18293826" readonly="no">
<descr>
<p>Number of visible rows. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="tabIndex" id="ID-40676705" readonly="no">
<descr>
<p>Index that represents the element's position in the tabbing order. See thein HTML 4.01.</p>
</descr>
</attribute>
<method name="add" id="ID-14493106">
<descr>
<p>Add a new element to the collection of<code>OPTION</code>elements for this<code>SELECT</code>. This method is the equivalent of the<code>appendChild</code>method of the<code>Node</code>interface if the<code>before</code>parameter is<code>null</code>. It is equivalent to the<code>insertBefore</code>method on the parent of<code>before</code>in all other cases. This method may have no effect if the new element is not an<code>OPTION</code>or an<code>OPTGROUP</code>.</p>
</descr>
<parameters>
<param id="ID-43168006" name="element" type="HTMLElement" attr="in">
<descr>
<p>The element to add.</p>
</descr>
</param>
<param id="ID-76828919" name="before" type="HTMLElement" attr="in">
<descr>
<p>The element to insert before, or<code>null</code>for the tail of the list.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>NOT_FOUND_ERR: Raised if<code>before</code>is not a descendant of the<code>SELECT</code>element.</p>
</descr>
</exception>
</raises>
</method>
<method name="remove" id="ID-33404570">
<descr>
<p>Remove an element from the collection of<code>OPTION</code>elements for this<code>SELECT</code>. Does nothing if no element has the given index.</p>
</descr>
<parameters>
<param id="ID-36270997" name="index" type="long" attr="in">
<descr>
<p>The index of the item to remove, starting from 0.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="blur" id="ID-28216144">
<descr>
<p>Removes keyboard focus from this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="focus" id="ID-32130014">
<descr>
<p>Gives keyboard focus to this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLOptGroupElement" inherits="HTMLElement" id="ID-38450247">
<descr>
<p>Group options together in logical subdivisions. See thein HTML 4.01.</p>
</descr>
<attribute type="boolean" name="disabled" id="ID-15518803" readonly="no">
<descr>
<p>The control is unavailable in this context. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="label" id="ID-95806054" readonly="no">
<descr>
<p>Assigns a label to this option group. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLOptionElement" inherits="HTMLElement" id="ID-70901257">
<descr>
<p>A selectable choice. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-17116503">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="boolean" name="defaultSelected" id="ID-37770574" version="DOM Level 2" readonly="no">
<descr>
<p>Represents the value of the HTML selected attribute. The value of this attribute does not change if the state of the corresponding form control, in an interactive user agent, changes. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute readonly="yes" type="DOMString" name="text" id="ID-48154426">
<descr>
<p>The text contained within the option element.</p>
</descr>
</attribute>
<attribute type="long" name="index" id="ID-14038413" readonly="yes" version="DOM Level 2">
<descr>
<p>The index of this<code>OPTION</code>in its parent<code>SELECT</code>, starting from 0.</p>
</descr>
</attribute>
<attribute type="boolean" name="disabled" id="ID-23482473" readonly="no">
<descr>
<p>The control is unavailable in this context. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="label" id="ID-40736115" readonly="no">
<descr>
<p>Option label for use in hierarchical menus. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="selected" id="ID-70874476" readonly="no">
<descr>
<p>Represents the current state of the corresponding form control, in an interactive user agent. Changing this attribute changes the state of the form control, but does not change the value of the HTML selected attribute of the element.</p>
</descr>
</attribute>
<attribute type="DOMString" name="value" id="ID-6185554" readonly="no">
<descr>
<p>The current form control value. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLInputElement" inherits="HTMLElement" id="ID-6043025">
<descr>
<p>Form control.</p>
<note>
<p>Depending upon the environment in which the page is being viewed, the value property may be read-only for the file upload input type. For the "password" input type, the actual value returned may be masked to prevent unauthorized use. See thein<bibref ref="HTML40"/>.</p>
</note>
</descr>
<attribute type="DOMString" name="defaultValue" id="ID-26091157" readonly="no">
<descr>
<p>When the<code>type</code>attribute of the element has the value "text", "file" or "password", this represents the HTML value attribute of the element. The value of this attribute does not change if the contents of the corresponding form control, in an interactive user agent, changes. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="defaultChecked" id="ID-20509171" readonly="no">
<descr>
<p>When<code>type</code>has the value "radio" or "checkbox", this represents the HTML checked attribute of the element. The value of this attribute does not change if the state of the corresponding form control, in an interactive user agent, changes. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-63239895">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="accept" id="ID-15328520" readonly="no">
<descr>
<p>A comma-separated list of content types that a server processing this form will handle correctly. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="accessKey" id="ID-59914154" readonly="no">
<descr>
<p>A single character access key to give access to the form control. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="align" id="ID-96991182" readonly="no">
<descr>
<p>Aligns this object (vertically or horizontally) with respect to its surrounding text. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="alt" id="ID-92701314" readonly="no">
<descr>
<p>Alternate text for user agents not rendering the normal content of this element. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="checked" id="ID-30233917" readonly="no">
<descr>
<p>When the<code>type</code>attribute of the element has the value "radio" or "checkbox", this represents the current state of the form control, in an interactive user agent. Changes to this attribute change the state of the form control, but do not change the value of the HTML checked attribute of the INPUT element.</p>
<note>
<p>During the handling of a click event on an input element with a type attribute that has the value "radio" or "checkbox", some implementations may change the value of this property before the event is being dispatched in the document. If the default action of the event is canceled, the value of the property may be changed back to its original value. This means that the value of this property during the handling of click events is implementation dependent.</p>
</note>
</descr>
</attribute>
<attribute type="boolean" name="disabled" id="ID-50886781" readonly="no">
<descr>
<p>The control is unavailable in this context. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="maxLength" id="ID-54719353" readonly="no">
<descr>
<p>Maximum number of characters for text fields, when<code>type</code>has the value "text" or "password". See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-89658498" readonly="no">
<descr>
<p>Form control or object name when submitted with a form. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="readOnly" id="ID-88461592" readonly="no">
<descr>
<p>This control is read-only. Relevant only when<code>type</code>has the value "text" or "password". See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="unsigned long" name="size" id="ID-79659438" version="DOM Level 2" readonly="no">
<descr>
<p>Size information. The precise meaning is specific to each type of field. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="src" id="ID-97320704" readonly="no">
<descr>
<p>When the<code>type</code>attribute has the value "image", this attribute specifies the location of the image to be used to decorate the graphical submit button. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="tabIndex" id="ID-62176355" readonly="no">
<descr>
<p>Index that represents the element's position in the tabbing order. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-62883744" version="DOM Level 2" readonly="no">
<descr>
<p>The type of control created (all lower case). See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="useMap" id="ID-32463706" readonly="no">
<descr>
<p>Use client-side image map. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="value" id="ID-49531485" readonly="no">
<descr>
<p>When the<code>type</code>attribute of the element has the value "text", "file" or "password", this represents the current contents of the corresponding form control, in an interactive user agent. Changing this attribute changes the contents of the form control, but does not change the value of the HTML value attribute of the element. When the<code>type</code>attribute of the element has the value "button", "hidden", "submit", "reset", "image", "checkbox" or "radio", this represents the HTML value attribute of the element. See thein HTML 4.01.</p>
</descr>
</attribute>
<method name="blur" id="ID-26838235">
<descr>
<p>Removes keyboard focus from this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="focus" id="ID-65996295">
<descr>
<p>Gives keyboard focus to this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="select" id="ID-34677168">
<descr>
<p>Select the contents of the text area. For<code>INPUT</code>elements whose<code>type</code>attribute has one of the following values: "text", "file", or "password".</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="click" id="ID-2651361">
<descr>
<p>Simulate a mouse-click. For<code>INPUT</code>elements whose<code>type</code>attribute has one of the following values: "button", "checkbox", "radio", "reset", or "submit".</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLTextAreaElement" inherits="HTMLElement" id="ID-24874179">
<descr>
<p>Multi-line text field. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="defaultValue" id="ID-36152213" version="DOM Level 2" readonly="no">
<descr>
<p>Represents the contents of the element. The value of this attribute does not change if the contents of the corresponding form control, in an interactive user agent, changes.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-18911464">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="accessKey" id="ID-93102991" readonly="no">
<descr>
<p>A single character access key to give access to the form control. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="cols" id="ID-51387225" readonly="no">
<descr>
<p>Width of control (in characters). See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="disabled" id="ID-98725443" readonly="no">
<descr>
<p>The control is unavailable in this context. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-70715578" readonly="no">
<descr>
<p>Form control or object name when submitted with a form. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="readOnly" id="ID-39131423" readonly="no">
<descr>
<p>This control is read-only. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="rows" id="ID-46975887" readonly="no">
<descr>
<p>Number of text rows. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="tabIndex" id="ID-60363303" readonly="no">
<descr>
<p>Index that represents the element's position in the tabbing order. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute readonly="yes" type="DOMString" name="type" id="HTML-HTMLTextAreaElement-type">
<descr>
<p>The type of this form control. This the string "textarea".</p>
</descr>
</attribute>
<attribute type="DOMString" name="value" id="ID-70715579" readonly="no">
<descr>
<p>Represents the current contents of the corresponding form control, in an interactive user agent. Changing this attribute changes the contents of the form control, but does not change the contents of the element. If the entirety of the data can not fit into a single<code>DOMString</code>, the implementation may truncate the data.</p>
</descr>
</attribute>
<method name="blur" id="ID-6750689">
<descr>
<p>Removes keyboard focus from this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="focus" id="ID-39055426">
<descr>
<p>Gives keyboard focus to this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="select" id="ID-48880622">
<descr>
<p>Select the contents of the<code>TEXTAREA</code>.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLButtonElement" inherits="HTMLElement" id="ID-34812697">
<descr>
<p>Push button. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-71254493">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="accessKey" id="ID-73169431" readonly="no">
<descr>
<p>A single character access key to give access to the form control. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="disabled" id="ID-92757155" readonly="no">
<descr>
<p>The control is unavailable in this context. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-11029910" readonly="no">
<descr>
<p>Form control or object name when submitted with a form. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="tabIndex" id="ID-39190908" readonly="no">
<descr>
<p>Index that represents the element's position in the tabbing order. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute readonly="yes" type="DOMString" name="type" id="ID-27430092">
<descr>
<p>The type of button (all lower case). See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="value" id="ID-72856782" readonly="no">
<descr>
<p>The current form control value. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLLabelElement" inherits="HTMLElement" id="ID-13691394">
<descr>
<p>Form field label text. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-32480901">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="accessKey" id="ID-43589892" readonly="no">
<descr>
<p>A single character access key to give access to the form control. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="htmlFor" id="ID-96509813" readonly="no">
<descr>
<p>This attribute links this label with another form control by<code>id</code>attribute. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLFieldSetElement" inherits="HTMLElement" id="ID-7365882">
<descr>
<p>Organizes form controls into logical groups. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-75392630">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLLegendElement" inherits="HTMLElement" id="ID-21482039">
<descr>
<p>Provides a caption for a<code>FIELDSET</code>grouping. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-29594519">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="accessKey" id="ID-11297832" readonly="no">
<descr>
<p>A single character access key to give access to the form control. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="align" id="ID-79538067" readonly="no">
<descr>
<p>Text alignment relative to<code>FIELDSET</code>. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLUListElement" inherits="HTMLElement" id="ID-86834457">
<descr>
<p>Unordered list. See thein HTML 4.01.</p>
</descr>
<attribute type="boolean" name="compact" id="ID-39864178" readonly="no">
<descr>
<p>Reduce spacing between list items. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-96874670" readonly="no">
<descr>
<p>Bullet style. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLOListElement" inherits="HTMLElement" id="ID-58056027">
<descr>
<p>Ordered list. See thein HTML 4.01.</p>
</descr>
<attribute type="boolean" name="compact" id="ID-76448506" readonly="no">
<descr>
<p>Reduce spacing between list items. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="start" id="ID-14793325" readonly="no">
<descr>
<p>Starting sequence number. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-40971103" readonly="no">
<descr>
<p>Numbering style. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLDListElement" inherits="HTMLElement" id="ID-52368974">
<descr>
<p>Definition list. See thein HTML 4.01.</p>
</descr>
<attribute type="boolean" name="compact" id="ID-21738539" readonly="no">
<descr>
<p>Reduce spacing between list items. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLDirectoryElement" inherits="HTMLElement" id="ID-71600284">
<descr>
<p>Directory list. See thein HTML 4.01. This element is deprecated in HTML 4.01.</p>
</descr>
<attribute type="boolean" name="compact" id="ID-75317739" readonly="no">
<descr>
<p>Reduce spacing between list items. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLMenuElement" inherits="HTMLElement" id="ID-72509186">
<descr>
<p>Menu list. See thein HTML 4.01. This element is deprecated in HTML 4.01.</p>
</descr>
<attribute type="boolean" name="compact" id="ID-68436464" readonly="no">
<descr>
<p>Reduce spacing between list items. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLLIElement" inherits="HTMLElement" id="ID-74680021">
<descr>
<p>List item. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="type" id="ID-52387668" readonly="no">
<descr>
<p>List item bullet style. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="value" id="ID-45496263" readonly="no">
<descr>
<p>Reset sequence number when used in<code>OL</code>. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLDivElement" inherits="HTMLElement" id="ID-22445964">
<descr>
<p>Generic block container. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-70908791" readonly="no">
<descr>
<p>Horizontal text alignment. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLParagraphElement" inherits="HTMLElement" id="ID-84675076">
<descr>
<p>Paragraphs. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-53465507" readonly="no">
<descr>
<p>Horizontal text alignment. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLHeadingElement" inherits="HTMLElement" id="ID-43345119">
<descr>
<p>For the<code>H1</code>to<code>H6</code>elements. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-6796462" readonly="no">
<descr>
<p>Horizontal text alignment. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLQuoteElement" inherits="HTMLElement" id="ID-70319763">
<descr>
<p>For the<code>Q</code>and<code>BLOCKQUOTE</code>elements. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="cite" id="ID-53895598" readonly="no">
<descr>
<p>A URI<bibref ref="RFC2396"/>designating a source document or message. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLPreElement" inherits="HTMLElement" id="ID-11383425">
<descr>
<p>Preformatted text. See thein HTML 4.01.</p>
</descr>
<attribute type="long" name="width" id="ID-13894083" readonly="no">
<descr>
<p>Fixed width for content. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLBRElement" inherits="HTMLElement" id="ID-56836063">
<descr>
<p>Force a line break. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="clear" id="ID-82703081" readonly="no">
<descr>
<p>Control flow of text around floats. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLBaseFontElement" inherits="HTMLElement" id="ID-32774408">
<descr>
<p>Base font. See thein HTML 4.01. This element is deprecated in HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="color" id="ID-87502302" readonly="no">
<descr>
<p>Font color. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="face" id="ID-88128969" readonly="no">
<descr>
<p>Font face identifier. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="size" id="ID-38930424" version="DOM Level 2" readonly="no">
<descr>
<p>Computed font size. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLFontElement" inherits="HTMLElement" id="ID-43943847">
<descr>
<p>Local change to font. See thein HTML 4.01. This element is deprecated in HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="color" id="ID-53532975" readonly="no">
<descr>
<p>Font color. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="face" id="ID-55715655" readonly="no">
<descr>
<p>Font face identifier. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="size" id="ID-90127284" readonly="no">
<descr>
<p>Font size. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLHRElement" inherits="HTMLElement" id="ID-68228811">
<descr>
<p>Create a horizontal rule. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-15235012" readonly="no">
<descr>
<p>Align the rule on the page. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="noShade" id="ID-79813978" readonly="no">
<descr>
<p>Indicates to the user agent that there should be no shading in the rendering of this element. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="size" id="ID-77612587" readonly="no">
<descr>
<p>The height of the rule. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="width" id="ID-87744198" readonly="no">
<descr>
<p>The width of the rule. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLModElement" inherits="HTMLElement" id="ID-79359609">
<descr>
<p>Notice of modification to part of a document. See theandelement definitions in HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="cite" id="ID-75101708" readonly="no">
<descr>
<p>A URI<bibref ref="RFC2396"/>designating a document that describes the reason for the change. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="dateTime" id="ID-88432678" readonly="no">
<descr>
<p>The date and time of the change. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLAnchorElement" inherits="HTMLElement" id="ID-48250443">
<descr>
<p>The anchor element. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="accessKey" id="ID-89647724" readonly="no">
<descr>
<p>A single character access key to give access to the form control. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="charset" id="ID-67619266" readonly="no">
<descr>
<p>The character encoding of the linked resource. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="coords" id="ID-92079539" readonly="no">
<descr>
<p>Comma-separated list of lengths, defining an active region geometry. See also<code>shape</code>for the shape of the region. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="href" id="ID-88517319" readonly="no">
<descr>
<p>The absolute URI<bibref ref="RFC2396"/>of the linked resource. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="hreflang" id="ID-87358513" readonly="no">
<descr>
<p>Language code of the linked resource. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-32783304" readonly="no">
<descr>
<p>Anchor name. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="rel" id="ID-3815891" readonly="no">
<descr>
<p>Forward link type. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="rev" id="ID-58259771" readonly="no">
<descr>
<p>Reverse link type. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="shape" id="ID-49899808" readonly="no">
<descr>
<p>The shape of the active area. The coordinates are given by<code>coords</code>. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="tabIndex" id="ID-41586466" readonly="no">
<descr>
<p>Index that represents the element's position in the tabbing order. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="target" id="ID-6414197" readonly="no">
<descr>
<p>Frame to render the resource in. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-63938221" readonly="no">
<descr>
<p>Advisory content type. See thein HTML 4.01.</p>
</descr>
</attribute>
<method name="blur" id="ID-65068939">
<descr>
<p>Removes keyboard focus from this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="focus" id="ID-47150313">
<descr>
<p>Gives keyboard focus to this element.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
</interface>
<interface name="HTMLImageElement" inherits="HTMLElement" id="ID-17701901">
<descr>
<p>Embedded image. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="name" id="ID-47534097" readonly="no">
<descr>
<p>The name of the element (for backwards compatibility).</p>
</descr>
</attribute>
<attribute type="DOMString" name="align" id="ID-3211094" readonly="no">
<descr>
<p>Aligns this object (vertically or horizontally) with respect to its surrounding text. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="alt" id="ID-95636861" readonly="no">
<descr>
<p>Alternate text for user agents not rendering the normal content of this element. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="border" id="ID-136671" readonly="no">
<descr>
<p>Width of border around image. See thein HTML 4.01. This attribute is deprecated in HTML 4.01. Note that the type of this attribute was<code>DOMString</code>in DOM Level 1 HTML<bibref ref="DOM-Level-1"/>.</p>
</descr>
</attribute>
<attribute type="long" name="height" id="ID-91561496" version="DOM Level 2" readonly="no">
<descr>
<p>Height of the image in pixels. See thein HTML 4.01. Note that the type of this attribute was<code>DOMString</code>in DOM Level 1 HTML<bibref ref="DOM-Level-1"/>.</p>
</descr>
</attribute>
<attribute type="long" name="hspace" id="ID-53675471" version="DOM Level 2" readonly="no">
<descr>
<p>Horizontal space to the left and right of this image in pixels. See thein HTML 4.01. This attribute is deprecated in HTML 4.01. Note that the type of this attribute was<code>DOMString</code>in DOM Level 1 HTML<bibref ref="DOM-Level-1"/>.</p>
</descr>
</attribute>
<attribute type="boolean" name="isMap" id="ID-58983880" readonly="no">
<descr>
<p>Use server-side image map. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="longDesc" id="ID-77376969" readonly="no">
<descr>
<p>URI<bibref ref="RFC2396"/>designating a long description of this image or frame. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="src" id="ID-87762984" readonly="no">
<descr>
<p>URI<bibref ref="RFC2396"/>designating the source of this image. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="useMap" id="ID-35981181" readonly="no">
<descr>
<p>Use client-side image map. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="vspace" id="ID-85374897" version="DOM Level 2" readonly="no">
<descr>
<p>Vertical space above and below this image in pixels. See thein HTML 4.01. This attribute is deprecated in HTML 4.01. Note that the type of this attribute was "DOMString" in DOM Level 1 HTML<bibref ref="DOM-Level-1"/>.</p>
</descr>
</attribute>
<attribute type="long" name="width" id="ID-13839076" version="DOM Level 2" readonly="no">
<descr>
<p>The width of the image in pixels. See thein HTML 4.01. Note that the type of this attribute was<code>DOMString</code>in DOM Level 1 HTML<bibref ref="DOM-Level-1"/>.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLObjectElement" inherits="HTMLElement" id="ID-9893177">
<descr>
<p>Generic embedded object.</p>
<note>
<p>In principle, all properties on the object element are read-write but in some environments some properties may be read-only once the underlying object is instantiated. See thein<bibref ref="HTML40"/>.</p>
</note>
</descr>
<attribute readonly="yes" type="HTMLFormElement" name="form" id="ID-46094773">
<descr>
<p>Returns the<code>FORM</code>element containing this control. Returns<code>null</code>if this control is not within the context of a form.</p>
</descr>
</attribute>
<attribute type="DOMString" name="code" id="ID-75241146" readonly="no">
<descr>
<p>Applet class file. See the<code>code</code>attribute for HTMLAppletElement.</p>
</descr>
</attribute>
<attribute type="DOMString" name="align" id="ID-16962097" readonly="no">
<descr>
<p>Aligns this object (vertically or horizontally) with respect to its surrounding text. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="archive" id="ID-47783837" readonly="no">
<descr>
<p>Space-separated list of archives. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="border" id="ID-82818419" readonly="no">
<descr>
<p>Width of border around the object. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="codeBase" id="ID-25709136" readonly="no">
<descr>
<p>Base URI<bibref ref="RFC2396"/>for<code>classid</code>,<code>data</code>, and<code>archive</code>attributes. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="codeType" id="ID-19945008" readonly="no">
<descr>
<p>Content type for data downloaded via<code>classid</code>attribute. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="data" id="ID-81766986" readonly="no">
<descr>
<p>A URI<bibref ref="RFC2396"/>specifying the location of the object's data. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="declare" id="ID-942770" readonly="no">
<descr>
<p>Declare (for future reference), but do not instantiate, this object. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="height" id="ID-88925838" readonly="no">
<descr>
<p>Override height. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="hspace" id="ID-17085376" readonly="no">
<descr>
<p>Horizontal space, in pixels, to the left and right of this image, applet, or object. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-20110362" readonly="no">
<descr>
<p>Form control or object name when submitted with a form. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="standby" id="ID-25039673" readonly="no">
<descr>
<p>Message to render while loading the object. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="tabIndex" id="ID-27083787" readonly="no">
<descr>
<p>Index that represents the element's position in the tabbing order. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-91665621" readonly="no">
<descr>
<p>Content type for data downloaded via<code>data</code>attribute. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="useMap" id="ID-6649772" readonly="no">
<descr>
<p>Use client-side image map. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="vspace" id="ID-8682483" readonly="no">
<descr>
<p>Vertical space, in pixels, above and below this image, applet, or object. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="width" id="ID-38538620" readonly="no">
<descr>
<p>Override width. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="Document" name="contentDocument" id="ID-38538621" since="DOM Level 2" readonly="yes">
<descr>
<p>The document this object contains, if there is any and it is available, or<code>null</code>otherwise.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLParamElement" inherits="HTMLElement" id="ID-64077273">
<descr>
<p>Parameters fed to the<code>OBJECT</code>element. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="name" id="ID-59871447" readonly="no">
<descr>
<p>The name of a run-time parameter. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-18179888" readonly="no">
<descr>
<p>Content type for the<code>value</code>attribute when<code>valuetype</code>has the value "ref". See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="value" id="ID-77971357" readonly="no">
<descr>
<p>The value of a run-time parameter. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="valueType" id="ID-23931872" readonly="no">
<descr>
<p>Information about the meaning of the<code>value</code>attribute value. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLAppletElement" inherits="HTMLElement" id="ID-31006348">
<descr>
<p>An embedded Java applet. See thein HTML 4.01. This element is deprecated in HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-8049912" readonly="no">
<descr>
<p>Aligns this object (vertically or horizontally) with respect to its surrounding text. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="alt" id="ID-58610064" readonly="no">
<descr>
<p>Alternate text for user agents not rendering the normal content of this element. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="archive" id="ID-14476360" readonly="no">
<descr>
<p>Comma-separated archive list. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="code" id="ID-61509645" readonly="no">
<descr>
<p>Applet class file. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="codeBase" id="ID-6581160" readonly="no">
<descr>
<p>Optional base URI<bibref ref="RFC2396"/>for applet. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="height" id="ID-90184867" readonly="no">
<descr>
<p>Override height. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="hspace" id="ID-1567197" version="DOM Level 2" readonly="no">
<descr>
<p>Horizontal space, in pixels, to the left and right of this image, applet, or object. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-39843695" readonly="no">
<descr>
<p>The name of the applet. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="object" id="ID-93681523" version="DOM Level 2" readonly="no">
<descr>
<p>The value of the "object" attribute. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="vspace" id="ID-22637173" version="DOM Level 2" readonly="no">
<descr>
<p>Vertical space, in pixels, above and below this image, applet, or object. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="width" id="ID-16526327" readonly="no">
<descr>
<p>Override width. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLMapElement" inherits="HTMLElement" id="ID-94109203">
<descr>
<p>Client-side image map. See thein HTML 4.01.</p>
</descr>
<attribute readonly="yes" type="HTMLCollection" name="areas" id="ID-71838730">
<descr>
<p>The list of areas defined for the image map.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-52696514" readonly="no">
<descr>
<p>Names the map (for use with<code>usemap</code>). See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLAreaElement" inherits="HTMLElement" id="ID-26019118">
<descr>
<p>Client-side image map area definition. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="accessKey" id="ID-57944457" readonly="no">
<descr>
<p>A single character access key to give access to the form control. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="alt" id="ID-39775416" readonly="no">
<descr>
<p>Alternate text for user agents not rendering the normal content of this element. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="coords" id="ID-66021476" readonly="no">
<descr>
<p>Comma-separated list of lengths, defining an active region geometry. See also<code>shape</code>for the shape of the region. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="href" id="ID-34672936" readonly="no">
<descr>
<p>The URI<bibref ref="RFC2396"/>of the linked resource. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="noHref" id="ID-61826871" readonly="no">
<descr>
<p>Specifies that this area is inactive, i.e., has no associated action. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="shape" id="ID-85683271" readonly="no">
<descr>
<p>The shape of the active area. The coordinates are given by<code>coords</code>. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="tabIndex" id="ID-8722121" readonly="no">
<descr>
<p>Index that represents the element's position in the tabbing order. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="target" id="ID-46054682" readonly="no">
<descr>
<p>Frame to render the resource in. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLScriptElement" inherits="HTMLElement" id="ID-81598695">
<descr>
<p>Script statements. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="text" id="ID-46872999" readonly="no">
<descr>
<p>The script content of the element.</p>
</descr>
</attribute>
<attribute type="DOMString" name="htmlFor" id="ID-66979266" readonly="no">
<descr>
<p>
<emph>Reserved for future use.</emph>
</p>
</descr>
</attribute>
<attribute type="DOMString" name="event" id="ID-56700403" readonly="no">
<descr>
<p>
<emph>Reserved for future use.</emph>
</p>
</descr>
</attribute>
<attribute type="DOMString" name="charset" id="ID-35305677" readonly="no">
<descr>
<p>The character encoding of the linked resource. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="defer" id="ID-93788534" readonly="no">
<descr>
<p>Indicates that the user agent can defer processing of the script. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="src" id="ID-75147231" readonly="no">
<descr>
<p>URI<bibref ref="RFC2396"/>designating an external script. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="type" id="ID-30534818" readonly="no">
<descr>
<p>The content type of the script language. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLTableElement" inherits="HTMLElement" id="ID-64060425">
<descr>
<p>The create* and delete* methods on the table allow authors to construct and modify tables.<bibref ref="HTML40"/>specifies that only one of each of the<code>CAPTION</code>,<code>THEAD</code>, and<code>TFOOT</code>elements may exist in a table. Therefore, if one exists, and the createTHead() or createTFoot() method is called, the method returns the existing THead or TFoot element. See thein HTML 4.01.</p>
</descr>
<attribute type="HTMLTableCaptionElement" name="caption" id="ID-14594520" version="DOM Level 2" readonly="no">
<descr>
<p>Returns the table's<code>CAPTION</code>, or void if none exists.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: if the element is not a<code>CAPTION</code>.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="HTMLTableSectionElement" name="tHead" id="ID-9530944" version="DOM Level 2" readonly="no">
<descr>
<p>Returns the table's<code>THEAD</code>, or<code>null</code>if none exists.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: if the element is not a<code>THEAD</code>.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute type="HTMLTableSectionElement" name="tFoot" id="ID-64197097" version="DOM Level 2" readonly="no">
<descr>
<p>Returns the table's<code>TFOOT</code>, or<code>null</code>if none exists.</p>
</descr>
<setraises>
<exception name="DOMException">
<descr>
<p>HIERARCHY_REQUEST_ERR: if the element is not a<code>TFOOT</code>.</p>
</descr>
</exception>
</setraises>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="rows" id="ID-6156016">
<descr>
<p>Returns a collection of all the rows in the table, including all in<code>THEAD</code>,<code>TFOOT</code>, all<code>TBODY</code>elements.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="tBodies" id="ID-63206416">
<descr>
<p>Returns a collection of the table bodies (including implicit ones).</p>
</descr>
</attribute>
<attribute type="DOMString" name="align" id="ID-23180977" readonly="no">
<descr>
<p>Specifies the table's position with respect to the rest of the document. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="bgColor" id="ID-83532985" readonly="no">
<descr>
<p>Cell background color. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="border" id="ID-50969400" readonly="no">
<descr>
<p>The width of the border around the table. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="cellPadding" id="ID-59162158" readonly="no">
<descr>
<p>Specifies the horizontal and vertical space between cell content and cell borders. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="cellSpacing" id="ID-68907883" readonly="no">
<descr>
<p>Specifies the horizontal and vertical separation between cells. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="frame" id="ID-64808476" readonly="no">
<descr>
<p>Specifies which external table borders to render. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="rules" id="ID-26347553" readonly="no">
<descr>
<p>Specifies which internal table borders to render. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="summary" id="ID-44998528" readonly="no">
<descr>
<p>Description about the purpose or structure of a table. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="width" id="ID-77447361" readonly="no">
<descr>
<p>Specifies the desired table width. See thein HTML 4.01.</p>
</descr>
</attribute>
<method name="createTHead" id="ID-70313345">
<descr>
<p>Create a table header row or return an existing one.</p>
</descr>
<parameters/>
<returns type="HTMLElement">
<descr>
<p>A new table header element (<code>THEAD</code>).</p>
</descr>
</returns>
<raises/>
</method>
<method name="deleteTHead" id="ID-38310198">
<descr>
<p>Delete the header from the table, if one exists.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="createTFoot" id="ID-8453710">
<descr>
<p>Create a table footer row or return an existing one.</p>
</descr>
<parameters/>
<returns type="HTMLElement">
<descr>
<p>A footer element (<code>TFOOT</code>).</p>
</descr>
</returns>
<raises/>
</method>
<method name="deleteTFoot" id="ID-78363258">
<descr>
<p>Delete the footer from the table, if one exists.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="createCaption" id="ID-96920263">
<descr>
<p>Create a new table caption object or return an existing one.</p>
</descr>
<parameters/>
<returns type="HTMLElement">
<descr>
<p>A<code>CAPTION</code>element.</p>
</descr>
</returns>
<raises/>
</method>
<method name="deleteCaption" id="ID-22930071">
<descr>
<p>Delete the table caption, if one exists.</p>
</descr>
<parameters/>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises/>
</method>
<method name="insertRow" id="ID-39872903" version="DOM Level 2">
<descr>
<p>Insert a new empty row in the table. The new row is inserted immediately before and in the same section as the current<code>index</code>th row in the table. If<code>index</code>is -1 or equal to the number of rows, the new row is appended. In addition, when the table is empty the row is inserted into a<code>TBODY</code>which is created and inserted into the table.</p>
<note>
<p>A table row cannot be empty according to<bibref ref="HTML40"/>.</p>
</note>
</descr>
<parameters>
<param id="ID-3501423" name="index" type="long" attr="in">
<descr>
<p>The row number where to insert a new row. This index starts from 0 and is relative to the logical order (not document order) of all the rows contained inside the table.</p>
</descr>
</param>
</parameters>
<returns type="HTMLElement">
<descr>
<p>The newly created row.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified index is greater than the number of rows or if the index is a negative number other than -1.</p>
</descr>
</exception>
</raises>
</method>
<method name="deleteRow" id="ID-13114938" version="DOM Level 2">
<descr>
<p>Delete a table row.</p>
</descr>
<parameters>
<param id="ID-41440100" name="index" type="long" attr="in">
<descr>
<p>The index of the row to be deleted. This index starts from 0 and is relative to the logical order (not document order) of all the rows contained inside the table. If the index is -1 the last row in the table is deleted.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified index is greater than or equal to the number of rows or if the index is a negative number other than -1.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="HTMLTableCaptionElement" inherits="HTMLElement" id="ID-12035137">
<descr>
<p>Table caption See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-79875068" readonly="no">
<descr>
<p>Caption alignment with respect to the table. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLTableColElement" inherits="HTMLElement" id="ID-84150186">
<descr>
<p>Regroups the<code>COL</code>and<code>COLGROUP</code>elements. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-31128447" readonly="no">
<descr>
<p>Horizontal alignment of cell data in column. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="ch" id="ID-9447412" readonly="no">
<descr>
<p>Alignment character for cells in a column. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="chOff" id="ID-57779225" readonly="no">
<descr>
<p>Offset of alignment character. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="span" id="ID-96511335" readonly="no">
<descr>
<p>Indicates the number of columns in a group or affected by a grouping. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="vAlign" id="ID-83291710" readonly="no">
<descr>
<p>Vertical alignment of cell data in column. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="width" id="ID-25196799" readonly="no">
<descr>
<p>Default column width. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLTableSectionElement" inherits="HTMLElement" id="ID-67417573">
<descr>
<p>The<code>THEAD</code>,<code>TFOOT</code>, and<code>TBODY</code>elements.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-40530119" readonly="no">
<descr>
<p>Horizontal alignment of data in cells. See the<code>align</code>attribute for HTMLTheadElement for details.</p>
</descr>
</attribute>
<attribute type="DOMString" name="ch" id="ID-83470012" readonly="no">
<descr>
<p>Alignment character for cells in a column. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="chOff" id="ID-53459732" readonly="no">
<descr>
<p>Offset of alignment character. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="vAlign" id="ID-4379116" readonly="no">
<descr>
<p>Vertical alignment of data in cells. See the<code>valign</code>attribute for HTMLTheadElement for details.</p>
</descr>
</attribute>
<attribute readonly="yes" type="HTMLCollection" name="rows" id="ID-52092650">
<descr>
<p>The collection of rows in this table section.</p>
</descr>
</attribute>
<method name="insertRow" id="ID-93995626" version="DOM Level 2">
<descr>
<p>Insert a row into this section. The new row is inserted immediately before the current<code>index</code>th row in this section. If<code>index</code>is -1 or equal to the number of rows in this section, the new row is appended.</p>
</descr>
<parameters>
<param id="ID-48322963" name="index" type="long" attr="in">
<descr>
<p>The row number where to insert a new row. This index starts from 0 and is relative only to the rows contained inside this section, not all the rows in the table.</p>
</descr>
</param>
</parameters>
<returns type="HTMLElement">
<descr>
<p>The newly created row.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified index is greater than the number of rows of if the index is a negative number other than -1.</p>
</descr>
</exception>
</raises>
</method>
<method name="deleteRow" id="ID-5625626" version="DOM Level 2">
<descr>
<p>Delete a row from this section.</p>
</descr>
<parameters>
<param id="ID-49711281" name="index" type="long" attr="in">
<descr>
<p>The index of the row to be deleted, or -1 to delete the last row. This index starts from 0 and is relative only to the rows contained inside this section, not all the rows in the table.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified index is greater than or equal to the number of rows or if the index is a negative number other than -1.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="HTMLTableRowElement" inherits="HTMLElement" id="ID-6986576">
<descr>
<p>A row in a table. See thein HTML 4.01.</p>
</descr>
<attribute type="long" name="rowIndex" id="ID-67347567" readonly="yes" version="DOM Level 2">
<descr>
<p>This is in logical order and not in document order. The<code>rowIndex</code>does take into account sections (<code>THEAD</code>,<code>TFOOT</code>, or<code>TBODY</code>) within the table, placing<code>THEAD</code>rows first in the index, followed by<code>TBODY</code>rows, followed by<code>TFOOT</code>rows.</p>
</descr>
</attribute>
<attribute type="long" name="sectionRowIndex" id="ID-79105901" readonly="yes" version="DOM Level 2">
<descr>
<p>The index of this row, relative to the current section (<code>THEAD</code>,<code>TFOOT</code>, or<code>TBODY</code>), starting from 0.</p>
</descr>
</attribute>
<attribute type="HTMLCollection" name="cells" id="ID-67349879" readonly="yes" version="DOM Level 2">
<descr>
<p>The collection of cells in this row.</p>
</descr>
</attribute>
<attribute type="DOMString" name="align" id="ID-74098257" readonly="no">
<descr>
<p>Horizontal alignment of data within cells of this row. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="bgColor" id="ID-18161327" readonly="no">
<descr>
<p>Background color for rows. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="ch" id="ID-16230502" readonly="no">
<descr>
<p>Alignment character for cells in a column. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="chOff" id="ID-68207461" readonly="no">
<descr>
<p>Offset of alignment character. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="vAlign" id="ID-90000058" readonly="no">
<descr>
<p>Vertical alignment of data within cells of this row. See thein HTML 4.01.</p>
</descr>
</attribute>
<method name="insertCell" id="ID-68927016" version="DOM Level 2">
<descr>
<p>Insert an empty<code>TD</code>cell into this row. If<code>index</code>is -1 or equal to the number of cells, the new cell is appended.</p>
</descr>
<parameters>
<param id="ID-20576436" name="index" type="long" attr="in">
<descr>
<p>The place to insert the cell, starting from 0.</p>
</descr>
</param>
</parameters>
<returns type="HTMLElement">
<descr>
<p>The newly created cell.</p>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified<code>index</code>is greater than the number of cells or if the index is a negative number other than -1.</p>
</descr>
</exception>
</raises>
</method>
<method name="deleteCell" id="ID-11738598" version="DOM Level 2">
<descr>
<p>Delete a cell from the current row.</p>
</descr>
<parameters>
<param id="ID-63209996" name="index" type="long" attr="in">
<descr>
<p>The index of the cell to delete, starting from 0. If the index is -1 the last cell in the row is deleted.</p>
</descr>
</param>
</parameters>
<returns type="void">
<descr>
<p/>
</descr>
</returns>
<raises>
<exception name="DOMException">
<descr>
<p>INDEX_SIZE_ERR: Raised if the specified<code>index</code>is greater than or equal to the number of cells or if the index is a negative number other than -1.</p>
</descr>
</exception>
</raises>
</method>
</interface>
<interface name="HTMLTableCellElement" inherits="HTMLElement" id="ID-82915075">
<descr>
<p>The object used to represent the<code>TH</code>and<code>TD</code>elements. See thein HTML 4.01.</p>
</descr>
<attribute type="long" name="cellIndex" id="ID-80748363" readonly="yes">
<descr>
<p>The index of this cell in the row, starting from 0. This index is in document tree order and not display order.</p>
</descr>
</attribute>
<attribute type="DOMString" name="abbr" id="ID-74444037" readonly="no">
<descr>
<p>Abbreviation for header cells. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="align" id="ID-98433879" readonly="no">
<descr>
<p>Horizontal alignment of data in cell. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="axis" id="ID-76554418" readonly="no">
<descr>
<p>Names group of related headers. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="bgColor" id="ID-88135431" readonly="no">
<descr>
<p>Cell background color. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="ch" id="ID-30914780" readonly="no">
<descr>
<p>Alignment character for cells in a column. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="chOff" id="ID-20144310" readonly="no">
<descr>
<p>Offset of alignment character. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="colSpan" id="ID-84645244" readonly="no">
<descr>
<p>Number of columns spanned by cell. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="headers" id="ID-89104817" readonly="no">
<descr>
<p>List of<code>id</code>attribute values for header cells. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="height" id="ID-83679212" readonly="no">
<descr>
<p>Cell height. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="noWrap" id="ID-62922045" readonly="no">
<descr>
<p>Suppress word wrapping. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="long" name="rowSpan" id="ID-48237625" readonly="no">
<descr>
<p>Number of rows spanned by cell. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="scope" id="ID-36139952" readonly="no">
<descr>
<p>Scope covered by header cells. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="vAlign" id="ID-58284221" readonly="no">
<descr>
<p>Vertical alignment of data in cell. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="width" id="ID-27480795" readonly="no">
<descr>
<p>Cell width. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLFrameSetElement" inherits="HTMLElement" id="ID-43829095">
<descr>
<p>Create a grid of frames. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="cols" id="ID-98869594" readonly="no">
<descr>
<p>The number of columns of frames in the frameset. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="rows" id="ID-19739247" readonly="no">
<descr>
<p>The number of rows of frames in the frameset. See thein HTML 4.01.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLFrameElement" inherits="HTMLElement" id="ID-97790553">
<descr>
<p>Create a frame. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="frameBorder" id="ID-11858633" readonly="no">
<descr>
<p>Request frame borders. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="longDesc" id="ID-7836998" readonly="no">
<descr>
<p>URI<bibref ref="RFC2396"/>designating a long description of this image or frame. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="marginHeight" id="ID-55569778" readonly="no">
<descr>
<p>Frame margin height, in pixels. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="marginWidth" id="ID-8369969" readonly="no">
<descr>
<p>Frame margin width, in pixels. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-91128709" readonly="no">
<descr>
<p>The frame name (object of the<code>target</code>attribute). See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="boolean" name="noResize" id="ID-80766578" readonly="no">
<descr>
<p>When true, forbid user from resizing frame. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="scrolling" id="ID-45411424" readonly="no">
<descr>
<p>Specify whether or not the frame should have scrollbars. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="src" id="ID-78799535" readonly="no">
<descr>
<p>A URI<bibref ref="RFC2396"/>designating the initial frame contents. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="Document" name="contentDocument" id="ID-78799536" since="DOM Level 2" readonly="yes">
<descr>
<p>The document this frame contains, if there is any and it is available, or<code>null</code>otherwise.</p>
</descr>
</attribute>
</interface>
<interface name="HTMLIFrameElement" inherits="HTMLElement" id="ID-50708718">
<descr>
<p>Inline subwindows. See thein HTML 4.01.</p>
</descr>
<attribute type="DOMString" name="align" id="ID-11309947" readonly="no">
<descr>
<p>Aligns this object (vertically or horizontally) with respect to its surrounding text. See thein HTML 4.01. This attribute is deprecated in HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="frameBorder" id="ID-22463410" readonly="no">
<descr>
<p>Request frame borders. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="height" id="ID-1678118" readonly="no">
<descr>
<p>Frame height. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="longDesc" id="ID-70472105" readonly="no">
<descr>
<p>URI<bibref ref="RFC2396"/>designating a long description of this image or frame. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="marginHeight" id="ID-91371294" readonly="no">
<descr>
<p>Frame margin height, in pixels. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="marginWidth" id="ID-66486595" readonly="no">
<descr>
<p>Frame margin width, in pixels. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="name" id="ID-96819659" readonly="no">
<descr>
<p>The frame name (object of the<code>target</code>attribute). See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="scrolling" id="ID-36369822" readonly="no">
<descr>
<p>Specify whether or not the frame should have scrollbars. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="src" id="ID-43933957" readonly="no">
<descr>
<p>A URI<bibref ref="RFC2396"/>designating the initial frame contents. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="DOMString" name="width" id="ID-67133005" readonly="no">
<descr>
<p>Frame width. See thein HTML 4.01.</p>
</descr>
</attribute>
<attribute type="Document" name="contentDocument" id="ID-67133006" since="DOM Level 2" readonly="yes">
<descr>
<p>The document this frame contains, if there is any and it is available, or<code>null</code>otherwise.</p>
</descr>
</attribute>
</interface>
</library>
