
###
# This Ruby source file was generated by test-to-ruby.xsl
# and is a derived work from the source document.
# The source document contained the following notice:
=begin


Copyright (c) 2001 World Wide Web Consortium, 
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University).  All 
Rights Reserved.  This program is distributed under the W3C's Software
Intellectual Property License.  This program is distributed in the 
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
PURPOSE.  

See W3C License http://www.w3.org/Consortium/Legal/ for more details.


=end
#

require 'helper'

###
# Two listeners are registered on the same target, each of which will remove both itself and 
# the other on the first event.  Only one should see the event since event listeners
# can never be invoked after being removed.
# @author Curt Arnold
# see[http://www.w3.org/TR/DOM-Level-2-Events/events#Events-EventTarget-dispatchEvent]
# see[http://www.w3.org/TR/DOM-Level-2-Events/events#xpointer(id('Events-EventTarget-dispatchEvent')/raises/exception[@name='EventException']/descr/p[substring-before(.,':')='UNSPECIFIED_EVENT_TYPE_ERR'])]
##
DOMTestCase('dispatchEvent13') do

  ###
  # Constructor.
  # @param factory document factory, may not be null
  # @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration
  ##
  def setup
    ##
    ##   check if loaded documents are supported for content type
    ##
    contentType = getContentType()
    preload(contentType, "hc_staff", true)
  end

     ###
     #    Inner class implementation for variable listener1 
     ##
      private static class EventListenerid36034708
           extends org.w3c.domts.DOMTestInnerClass 
           implements EventListener {
        ###
        # local copy of variable specified in value parameter
        ##
        private java.util.List events;
         ###
        # local copy of variable specified in value parameter
        ##
        private java.util.List listeners;
        ###
        # Constructor
        # @param test test case
        # @param events Value from value attribute of nested var element
        # @param listeners Value from value attribute of nested var element
        ##
        public EventListenerid36034708(DOMTestCase test, java.util.List events, java.util.List listeners) { 
        super(test)
           this.events = events;
           this.listeners = listeners;
           }
   
        ###
        #    
This method is called whenever an event occurs of the type for which theEventListenerinterface was registered.

        # @param evt TheEventcontains contextual information about the event. It also contains thestopPropagationandpreventDefaultmethods which are used in determining the event's flow and default action.
        ##
         public void handleEvent(Event evt) {
        target = nil
    listener = nil
    events << evt
      target = evt.currentTarget()
      indexid36029811 = 0
    while (indexid36029811 < listeners.size())
      listener = listeners.get(indexid36029811)
    target.removeEventListener("foo", listener, false)
      indexid36029811 += 1
            end
      }
}

     ###
     #    Inner class implementation for variable listener2 
     ##
      private static class EventListenerid36028993
           extends org.w3c.domts.DOMTestInnerClass 
           implements EventListener {
        ###
        # local copy of variable specified in value parameter
        ##
        private java.util.List events;
         ###
        # local copy of variable specified in value parameter
        ##
        private java.util.List listeners;
        ###
        # Constructor
        # @param test test case
        # @param events Value from value attribute of nested var element
        # @param listeners Value from value attribute of nested var element
        ##
        public EventListenerid36028993(DOMTestCase test, java.util.List events, java.util.List listeners) { 
        super(test)
           this.events = events;
           this.listeners = listeners;
           }
   
        ###
        #    
This method is called whenever an event occurs of the type for which theEventListenerinterface was registered.

        # @param evt TheEventcontains contextual information about the event. It also contains thestopPropagationandpreventDefaultmethods which are used in determining the event's flow and default action.
        ##
         public void handleEvent(Event evt) {
        target = nil
    listener = nil
    events << evt
      target = evt.currentTarget()
      indexid36034629 = 0
    while (indexid36034629 < listeners.size())
      listener = listeners.get(indexid36034629)
    target.removeEventListener("foo", listener, false)
      indexid36034629 += 1
            end
      }
}

  ###
  # Runs the test case.
  # @throws Throwable Any uncaught exception causes test to fail
  #
  def test_dispatchEvent13
    doc = nil
    target = nil
    evt = nil
    preventDefault = nil
    listeners = []
      
    events = []
      
    listener1 = new EventListenerid36034708(this, events, listeners)
    listener2 = new EventListenerid36028993(this, events, listeners)
    doc = load_document("hc_staff", true)
      listeners << listener1
      listeners << listener2
      doc.addEventListener("foo", listener1, false)
      doc.addEventListener("foo", listener2, false)
      evt = doc.createEvent("Events")
      evt.initEvent("foo", true, false)
      preventDefault = doc.dispatchEvent(evt)
      assertSize("eventCount", 1, events)
      
  end

  ###
  # Gets URI that identifies the test.
  # @return uri identifier of test
  #
  def targetURI
    "http://www.w3.org/2001/DOM-Test-Suite/tests/Level-1/dispatchEvent13"
  end
end

