
###
# This Ruby source file was generated by test-to-ruby.xsl
# and is a derived work from the source document.
# The source document contained the following notice:
=begin

Copyright (c) 2001-2004 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.

=end
#

require 'helper'

###
#     If the "newChild" is already in the tree, the
#     "insertBefore(newChild,refChild)" method must first
#     remove it before the insertion takes place.
#     
#     Insert a node Element ("employeeId") that is already
#     present in the tree.   The existing node should be 
#     removed first and the new one inserted.   The node is
#     inserted at a different position in the tree to assure
#     that it was indeed inserted.
# @author NIST
# @author Mary Brady
# see[http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#ID-952280727]
##
DOMTestCase('nodeinsertbeforenewchildexists') do

  ###
  # Constructor.
  # @param factory document factory, may not be null
  # @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration
  ##
  def setup
    ##
    ##   check if loaded documents are supported for content type
    ##
    contentType = getContentType()
    preload(contentType, "staff", true)
  end

  ###
  # Runs the test case.
  # @throws Throwable Any uncaught exception causes test to fail
  #
  def test_nodeinsertbeforenewchildexists
    doc = nil
    elementList = nil
    employeeNode = nil
    childList = nil
    refChild = nil
    newChild = nil
    child = nil
    length = nil
    childName = nil
    insertedNode = nil
    expectedWhitespace = []
      expectedWhitespace << "#text"
      expectedWhitespace << "#text"
      expectedWhitespace << "name"
      expectedWhitespace << "#text"
      expectedWhitespace << "position"
      expectedWhitespace << "#text"
      expectedWhitespace << "salary"
      expectedWhitespace << "#text"
      expectedWhitespace << "gender"
      expectedWhitespace << "#text"
      expectedWhitespace << "employeeId"
      expectedWhitespace << "address"
      expectedWhitespace << "#text"
      
    expectedNoWhitespace = []
      expectedNoWhitespace << "name"
      expectedNoWhitespace << "position"
      expectedNoWhitespace << "salary"
      expectedNoWhitespace << "gender"
      expectedNoWhitespace << "employeeId"
      expectedNoWhitespace << "address"
      
    expected = []
      
    result = []
      
    doc = load_document("staff", true)
      elementList = doc.getElementsByTagName("employee")
      employeeNode = elementList.item(1)
      childList = employeeNode.childNodes()
      length = childList.length()
      
      if (equals(6, length))
        expected =  expectedNoWhitespacerefChild = childList.item(5)
      newChild = childList.item(0)
      
          else
            expected =  expectedWhitespacerefChild = childList.item(11)
      newChild = childList.item(1)
      
         end
       insertedNode = employeeNode.insertBefore(newChild, refChild)
      indexid36116193 = 0
    while (indexid36116193 < childList.length)
      child = childList.item(indexid36116193)
    childName = child.nodeName()
      result << childName
      indexid36116193 += 1
            end
      assert_equal(expected, result, "childNames")
            
  end

  ###
  # Gets URI that identifies the test.
  # @return uri identifier of test
  #
  def targetURI
    "http://www.w3.org/2001/DOM-Test-Suite/tests/Level-1/nodeinsertbeforenewchildexists"
  end
end

