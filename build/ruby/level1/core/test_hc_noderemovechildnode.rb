
###
# This Ruby source file was generated by test-to-ruby.xsl
# and is a derived work from the source document.
# The source document contained the following notice:
=begin

Copyright (c) 2001-2004 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.

=end
#

require 'helper'

###
#     The "removeChild(oldChild)" method removes the node
#     indicated by "oldChild". 
#     
#     Retrieve the second p element and remove its first child.
#     After the removal, the second p element should have 5 element
#     children and the first child should now be the child
#     that used to be at the second position in the list.
# @author Curt Arnold
# see[http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#ID-1734834066]
# see[http://www.w3.org/Bugs/Public/show_bug.cgi?id=246]
##
DOMTestCase('hc_noderemovechildnode') do

  ###
  # Constructor.
  # @param factory document factory, may not be null
  # @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration
  ##
  def setup
    ##
    ##   check if loaded documents are supported for content type
    ##
    contentType = getContentType()
    preload(contentType, "hc_staff", true)
  end

  ###
  # Runs the test case.
  # @throws Throwable Any uncaught exception causes test to fail
  #
  def test_hc_noderemovechildnode
    doc = nil
    elementList = nil
    emList = nil
    employeeNode = nil
    childList = nil
    oldChild = nil
    child = nil
    childName = nil
    length = nil
    removedChild = nil
    removedName = nil
    nodeType = nil
    expected = []
      expected << "strong"
      expected << "code"
      expected << "sup"
      expected << "var"
      expected << "acronym"
      
    actual = []
      
    doc = load_document("hc_staff", true)
      elementList = doc.getElementsByTagName("p")
      employeeNode = elementList.item(1)
      childList = employeeNode.childNodes()
      emList = employeeNode.getElementsByTagName("em")
      oldChild = emList.item(0)
      removedChild = employeeNode.removeChild(oldChild)
      removedName = removedChild.nodeName()
      assertEqualsAutoCase("element", "removedName", "em", removedName)
        indexid35967163 = 0
    while (indexid35967163 < childList.length)
      child = childList.item(indexid35967163)
    nodeType = child.nodeType()
      childName = child.nodeName()
      
      if (equals(1, nodeType))
        actual << childName
      
          else
            assert_equal(3, nodeType, "textNodeType")
            assert_equal("#text", childName, "textNodeName")
            
         end
       indexid35967163 += 1
            end
      assertEqualsAutoCase("element", "childNames", expected, actual)
        
  end

  ###
  # Gets URI that identifies the test.
  # @return uri identifier of test
  #
  def targetURI
    "http://www.w3.org/2001/DOM-Test-Suite/tests/Level-1/hc_noderemovechildnode"
  end
end

