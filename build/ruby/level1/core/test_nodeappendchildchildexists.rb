
###
# This Ruby source file was generated by test-to-ruby.xsl
# and is a derived work from the source document.
# The source document contained the following notice:
=begin

Copyright (c) 2001-2004 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.

=end
#

require 'helper'

###
#     If the "newChild" is already in the tree, it is first
#     removed before the new one is appended.
#     
#     Retrieve the first child of the second employee and   
#     append the first child to the end of the list.   After
#     the "appendChild(newChild)" method is invoked the first 
#     child should be the one that was second and the last
#     child should be the one that was first.
# @author NIST
# @author Mary Brady
# see[http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#ID-184E7107]
##
DOMTestCase('nodeappendchildchildexists') do

  ###
  # Constructor.
  # @param factory document factory, may not be null
  # @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration
  ##
  def setup
    ##
    ##   check if loaded documents are supported for content type
    ##
    contentType = getContentType()
    preload(contentType, "staff", true)
  end

  ###
  # Runs the test case.
  # @throws Throwable Any uncaught exception causes test to fail
  #
  def test_nodeappendchildchildexists
    doc = nil
    elementList = nil
    childNode = nil
    newChild = nil
    lchild = nil
    fchild = nil
    lchildName = nil
    fchildName = nil
    appendedChild = nil
    initialName = nil
    doc = load_document("staff", true)
      elementList = doc.getElementsByTagName("employee")
      childNode = elementList.item(1)
      newChild = childNode.firstChild()
      initialName = newChild.nodeName()
      appendedChild = childNode.appendChild(newChild)
      fchild = childNode.firstChild()
      fchildName = fchild.nodeName()
      lchild = childNode.lastChild()
      lchildName = lchild.nodeName()
      
      if (equals("employeeId", initialName))
        assert_equal("name", fchildName, "assert1_nowhitespace")
            assert_equal("employeeId", lchildName, "assert2_nowhitespace")
            
          else
            assert_equal("employeeId", fchildName, "assert1")
            assert_equal("#text", lchildName, "assert2")
            
         end
       
  end

  ###
  # Gets URI that identifies the test.
  # @return uri identifier of test
  #
  def targetURI
    "http://www.w3.org/2001/DOM-Test-Suite/tests/Level-1/nodeappendchildchildexists"
  end
end

