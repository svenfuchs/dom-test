
###
# This Ruby source file was generated by test-to-ruby.xsl
# and is a derived work from the source document.
# The source document contained the following notice:
=begin

Copyright (c) 2001-2003 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.

=end
#

require 'helper'

###
#     If the "newChild" is already in the tree, it is first
#     removed before the new one is appended.
#     
#     Retrieve the "em" second employee and   
#     append the first child to the end of the list.   After
#     the "appendChild(newChild)" method is invoked the first 
#     child should be the one that was second and the last
#     child should be the one that was first.
# @author Curt Arnold
# see[http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#ID-184E7107]
# see[http://www.w3.org/Bugs/Public/show_bug.cgi?id=246]
##
DOMTestCase('hc_nodeappendchildchildexists') do

  ###
  # Constructor.
  # @param factory document factory, may not be null
  # @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration
  ##
  def setup
    ##
    ##   check if loaded documents are supported for content type
    ##
    contentType = getContentType()
    preload(contentType, "hc_staff", true)
  end

  ###
  # Runs the test case.
  # @throws Throwable Any uncaught exception causes test to fail
  #
  def test_hc_nodeappendchildchildexists
    doc = nil
    elementList = nil
    childList = nil
    childNode = nil
    newChild = nil
    memberNode = nil
    memberName = nil
    refreshedActual = []
      
    actual = []
      
    nodeType = nil
    expected = []
      expected << "strong"
      expected << "code"
      expected << "sup"
      expected << "var"
      expected << "acronym"
      expected << "em"
      
    appendedChild = nil
    doc = load_document("hc_staff", true)
      elementList = doc.getElementsByTagName("p")
      childNode = elementList.item(1)
      childList = childNode.getElementsByTagName("*")
      newChild = childList.item(0)
      appendedChild = childNode.appendChild(newChild)
      indexid36023052 = 0
    while (indexid36023052 < childList.length)
      memberNode = childList.item(indexid36023052)
    memberName = memberNode.nodeName()
      actual << memberName
      indexid36023052 += 1
            end
      assertEqualsAutoCase("element", "liveByTagName", expected, actual)
        childList = childNode.childNodes()
      indexid36024098 = 0
    while (indexid36024098 < childList.length)
      memberNode = childList.item(indexid36024098)
    nodeType = memberNode.nodeType()
      
      if (equals(1, nodeType))
        memberName = memberNode.nodeName()
      refreshedActual << memberName
      
         end
       indexid36024098 += 1
            end
      assertEqualsAutoCase("element", "refreshedChildNodes", expected, refreshedActual)
        
  end

  ###
  # Gets URI that identifies the test.
  # @return uri identifier of test
  #
  def targetURI
    "http://www.w3.org/2001/DOM-Test-Suite/tests/Level-1/hc_nodeappendchildchildexists"
  end
end

