
###
# This Ruby source file was generated by test-to-ruby.xsl
# and is a derived work from the source document.
# The source document contained the following notice:
=begin


Copyright (c) 2001 World Wide Web Consortium, 
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University).  All 
Rights Reserved.  This program is distributed under the W3C's Software
Intellectual Property License.  This program is distributed in the 
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
PURPOSE.  

See W3C License http://www.w3.org/Consortium/Legal/ for more details.


=end
#

require 'helper'

###
#     The options attribute returns a collection of OPTION elements contained
#     by this element.
#     Retrieve the options attribute from the first SELECT element and
#     examine the items of the returned collection. 
# @author NIST
# @author Mary Brady
# see[http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-html#ID-30606413]
##
DOMTestCase('HTMLSelectElement08') do

  ###
  # Constructor.
  # @param factory document factory, may not be null
  # @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration
  ##
  def setup
    ##
    ##   check if loaded documents are supported for content type
    ##
    contentType = getContentType()
    preload(contentType, "select", false)
  end

  ###
  # Runs the test case.
  # @throws Throwable Any uncaught exception causes test to fail
  #
  def test_HTMLSelectElement08
    nodeList = nil
    optionsnodeList = nil
    testNode = nil
    vareas = nil
    doc = nil
    optionName = nil
    voption = nil
    result = []
      
    expectedOptions = []
      expectedOptions << "option"
      expectedOptions << "option"
      expectedOptions << "option"
      expectedOptions << "option"
      expectedOptions << "option"
      
    doc = load_document("select", false)
      nodeList = doc.getElementsByTagName("select")
      assertSize("Asize", 3, nodeList)
      testNode = nodeList.item(0)
      optionsnodeList = testNode.options()
      indexid36026225 = 0
    while (indexid36026225 < optionsnodeList.length)
      voption = optionsnodeList.item(indexid36026225)
    optionName = voption.nodeName()
      result << optionName
      indexid36026225 += 1
            end
      assertEqualsAutoCase("element", "optionsLink", expectedOptions, result)
        
  end

  ###
  # Gets URI that identifies the test.
  # @return uri identifier of test
  #
  def targetURI
    "http://www.w3.org/2001/DOM-Test-Suite/tests/Level-1/HTMLSelectElement08"
  end
end

